set autoconf [file dirname $argv0]/../../../Mk/macports.autoconf.mk
eval ::tcltest::configure $::argv

set output_file "output"
set work_dir "work"

# Set of procs used for testing.

# Sets $bindir variable from macports.autoconf.mk
# autogenerated file.
proc load_variables {pwd} {
    global autoconf
    global bindir
    global datadir
    global portsrc
    global cpwd

    if { [file exists $autoconf] == 0 } {
        puts "ERROR: $autoconf does not exist."
        exit 1
    }

    set cpwd [eval file join {*}[lrange [file split $pwd] 0 end-2]]

    set line [get_line $autoconf "prefix*"]
    set prefix [lrange [split $line " "] 1 1]

    set line [get_line $autoconf "bindir*"]
    set bin [lrange [split $line "/"] 1 1]

    set bindir $prefix/$bin/
    set datadir $prefix/share
    set portsrc $cpwd/test-macports.conf

}

proc cleanup {} {
    global cpwd

    file delete -force /tmp/macports-tests/
    file delete -force $cpwd/PortIndex $cpwd/PortIndex.quick
}

# Sets initial directories
proc set_dir {} {
    global datadir
    global cpwd

    cleanup

    file mkdir /tmp/macports-tests/ports
    file mkdir /tmp/macports-tests/opt/local/etc/macports/
    file mkdir /tmp/macports-tests/opt/local/share/
    file mkdir /tmp/macports-tests/opt/local/var/macports/receipts/
    file mkdir /tmp/macports-tests/opt/local/var/macports/registry/
    file mkdir /tmp/macports-tests/opt/local/var/macports/build/

    file link -symbolic /tmp/macports-tests/opt/local/share/macports $datadir/macports
    file link -symbolic /tmp/macports-tests/ports/test $cpwd/test
}

# Run portindex
proc port_index {} {
    global bindir
    global datadir
    global cpwd

    # Move up 2 level to run portindex.
    set path [pwd]
    cd ../..

    set cmd "portindex"

    set result [eval exec $bindir$cmd 2>@1]

    file copy $cpwd/sources.conf /tmp/macports-tests/opt/local/etc/macports/
    file copy $cpwd/PortIndex $cpwd/PortIndex.quick /tmp/macports-tests/ports/

    cd $path
}

# Executes port clean.
proc port_clean {pwd} {
    global bindir
    global datadir
    global portsrc

    set back [pwd]
    cd $pwd

    set env "env PORTSRC=${portsrc}"
    set cmd "port"
    set args "clean"

    set result [catch {eval exec $env $bindir$cmd $args 2>@1} ]
    cd $back
}

# Runs the portfile.
proc port_run {pwd} {
    global bindir
    global datadir
    global portsrc

    set back [pwd]
    cd $pwd

    set env "env PORTSRC=${portsrc}"
    set cmd "port"
    set args "-d test"
    set output "output"

    set result [catch {eval exec $env $bindir$cmd $args >&output} ]
    cd $back
    return $result
}

# Runs port trace.
proc port_trace {pwd} {
    global bindir
    global datadir
    global portsrc

    set back [pwd]
    cd $pwd

    set env "env PORTSRC=${portsrc}"
    set cmd "port"
    set args "-t test"
    set output "output"

    set result [catch {eval exec $env $bindir$cmd $args >&output 2>@1} ]
    cd $back
    return $result
}

# Installs new portfile.
proc port_install {} {
    global bindir
    global portsrc

    set env "env PORTSRC=${portsrc}"
    set cmd "port"
    set args "install"

    set result [catch {eval exec $env $bindir$cmd $args > output 2>@1} ]
}

# Run configure command.
proc port_config {pwd} {
    global path
    global bindir
    global portsrc

    set env "env PORTSRC=${portsrc}"
    set cmd "port"
    set args "configure"

    set result [catch {eval exec $env $bindir$cmd $args 2>@1} ]
}

# Run desroot command.
proc port_desroot {pwd} {
    global path
    global bindir
    global portsrc
    global work_dir
    global output_file

    set env "env PORTSRC=${portsrc}"
    set cmd "port"
    set args "destroot"

    file copy -force $path/statefile $work_dir/.macports.statefile-unknown-version.state
    if { [exec id -u] == 0 } {
        exec chown macports $work_dir/.macports.statefile-unknown-version.state
    }
    set result [catch {eval exec $env $bindir$cmd $args >$output_file 2>@1} ]
}

# Uninstalls portfile.
proc port_uninstall {} {
    global bindir
    global portsrc

    set env "env PORTSRC=${portsrc}"
    set cmd "port"
    set args "uninstall"

    set result [catch {eval exec $env $bindir$cmd $args > output 2>@1} ]
}

# Returns the line containint a given string
# from a given file, or -1 if nothing is found.
proc get_line {filename lookup} {
    set fp [open $filename r]

    while {[gets $fp line] != -1} {
        set line [string tolower $line]

        if {[string match $lookup $line] != 0} {
            close $fp
            return $line
        }
    }
    return -1
}

# This proc contains all the steps necesary
# to install a port and save the output to a file.
# Needed for the majority of regression tests.
proc initial_setup {} {
    global output_file
    global work_dir
    global path

    makeFile "" $output_file
    makeDirectory $work_dir

    load_variables $path
    set_dir
    port_index
    port_clean $path
    port_run $path
}
