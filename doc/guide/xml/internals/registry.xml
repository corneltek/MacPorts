<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
		"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="registry">
  <chapterinfo>
    <keywordset>
      <keyword>
				images
      </keyword>
    </keywordset>
  </chapterinfo>
  
  <title>The MacPorts Registry</title> 

  <sect1 id="about">
    <title>About This Chapter</title>

		<para>This chapter provides a detailed overview of the new MacPorts
			Registry package and its API.  This package is queried by the
			MacPorts tools for information about installed ports for
			information related to dependencies, port images, and simple user
			information about what is installed.</para>

		<para>The MacPorts Registry contains an abstraction layer which
			allows for alternative storage mechanisms for receipts.  This
			chapter will also provide an overview of this, and how to write a
			receipt storage module.</para>
  </sect1>

	<sect1 id="registry_intro">
		<title>Introduction To The New Registry</title>

		<para>The new MacPorts Registry solves many problems with the old
			registry:</para>

		<itemizedlist>
			<listitem><para>The old registry provided no mechanism for
				modifying a receipt after installation.</para></listitem>
			<listitem><para>The old registry kept no global database of 
				all installed files and ports that could be queried by the port
				system to check for conflicts, or by the user to check which
				port installed a file.</para></listitem>
			<listitem><para>The old registry was tied to flat-file receipts,
				and provided no abstraction of open and close calls to receipt
				files.</para></listitem>
		</itemizedlist>

		<para>The new registry allows for modification of receipts, to
			reflect and changes made to installed ports being maintained by
			MacPorts.  It also provides global file and dependencies
			databases that can be queried to check if installed files conflict
			with each other, and to maintain dependency trees of installed
			ports.  It also provides abstraction over a modular receipt
			storage layer, allowing for flat-file receipts, as well as
			receipts stored in a SQLite database.</para>
	</sect1>

	<sect1 id="registry_api">
		<title>API For Accessing The Registry</title>

		<para>The MacPorts Registry provides a public API in the
			<varname>registry1.0</varname> Tcl package.  Using this API you
			can access the MacPorts Registry using the storage mechanism
			the MacPorts user has chosen for receipt storage.</para>

		<variablelist>
			<varlistentry>
				<term><computeroutput>registry::new_entry {name version
					{revision 0} {variants ""}}</computeroutput></term>

				<listitem>
					<para>Begin the creation of a new registry entry for the given
						port.</para>
					<para>Returns a reference ID to the registry entry
						created.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::open_entry {name {version 0}
					{revision 0} {variants ""}}</computeroutput></term>

				<listitem>
					<para>Opens an existing registry entry.</para>
					<para>Returns a reference ID to the registry entry that was
						opened.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::entry_exists {name version
					{revision 0} {variants ""}}</computeroutput></term>

				<listitem>
					<para>Checks to see if a port exists in the registry.</para>
					<para>Returns 1 if the entry exists, 0 if not.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::write_entry
					{ref}</computeroutput></term>

				<listitem>
					<para>Writes the receipt associated with the given
						reference.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><computeroutput>registry::delete_entry
					{ref}</computeroutput></term>

				<listitem>
					<para>Deletes the receipt associated with the given
						reference.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::property_store {ref property
					value}</computeroutput></term>

				<listitem>
					<para>Store the given value with the property name in the
						receipt associated with the given reference.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::property_retrieve {ref
					property}</computeroutput></term>

				<listitem>
					<para>Retrieve the property name from the receipt associated
						with the given reference.</para>
					<para>Returns the value of the property, if the property
						exists.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::installed {{name ""} {version
					""}}</computeroutput></term>

				<listitem>
					<para>Get all installed ports, optionally all installed ports
						matching the given name, or the given name and version.</para>
					<para>Returns a list of the installed ports.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::location {portname
					portversion}</computeroutput></term>

				<listitem>
					<para>Returns the physical location the port is installed in on
						the disk.  This is primarily useful for finding out where a
						port image is installed.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::open_file_map
					{args}</computeroutput></term>

				<listitem>
					<para>Opens the file map that contains file-port
						relationships.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::file_registered
					{file}</computeroutput></term>

				<listitem>
					<para>Returns the name of the port that owns the given file,
						if the file is registered as installed, and 0 otherwise.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::port_registered
					{name}</computeroutput></term>

				<listitem>
					<para>Returns a list of all files associated with the given
						port if that port is installed, and 0 otherwise.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::register_file {file
					port}</computeroutput></term>

				<listitem>
					<para>Registeres the given file in the file map as belonging
						to the given port.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::unregister_file
					{file}</computeroutput></term>

				<listitem>
					<para>Removes the file from the file map.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::write_file_map
					{args}</computeroutput></term>

				<listitem>
					<para>Write the changes to the file map.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::open_dep_map
					{args}</computeroutput></term>

				<listitem>
					<para>Opens the dependency map that contains port dependency
						relationships.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::fileinfo_for_file {fname}</computeroutput></term>

				<listitem>
					<para>Returns a list for the given file name representing all
						data currently known about the file.  This is a 6-tuple in the
						form of:</para>
					<orderedlist>
						<listitem>file path</listitem>
						<listitem>uid</listitem>
						<listitem>gid</listitem>
						<listitem>mode</listitem>
						<listitem>size</listitem>
						<listitem>md5 checksum</listitem>
					</orderedlist>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::fileinfo_for_index {flist}</computeroutput></term>

				<listitem>
					<para>Returns a list of information concerning each file in
						the given file list, if that file exists in the registry.  The
						information if obtained through
						<varname>registry::fileinfo_for_file</varname></para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::list_depends
					{name}</computeroutput></term>

				<listitem>
					<para>Returns a list of all the ports that given port name
						depends on.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::list_dependents
					{name}</computeroutput></term>

				<listitem>
					<para>Returns a list of all the ports that depend on the given
						port name.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::register_dep {dep type
					port}</computeroutput></term>

				<listitem>
					<para>Registers the given dependency as the given type of
						dependency with the given port.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::unregister_dep {dep type
					port}</computeroutput></term>

				<listitem>
					<para>Unregisters the given dependency of the given type as a
						dependency of the given port.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><computeroutput>registry::write_dep_map
					{args}</computeroutput></term>

				<listitem>
					<para>Write changes to the dependency map.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</sect1>

	<!-- <sect1 id="receipt_modules">
		<title>New Registry Receipt Modules</title>

		<para>Writing a receipt module for the new registry is very easy.
			The new registry makes </para>
	</sect1> -->

</chapter>
