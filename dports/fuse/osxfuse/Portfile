# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0

name                osxfuse
version             2.7.2
categories          fuse devel
platforms           macosx
license             BSD APSL
maintainers         dports openmaintainer

description         A FUSE-Compliant File System Implementation Mechanism \
                    for Mac OS X
long_description    FUSE for OS X implements a mechanism that makes it possible to implement \
                    a fully functional file system in a user-space program on Mac OS X. It \
                    aims to be API-compliant with the FUSE (File-system in USErspace) \
                    mechanism that originated on Linux.  Therefore, many existing FUSE file \
                    systems become readily usable on Mac OS X. This port provides the \
                    user-space library and header files for building filesystems.

homepage            http://osxfuse.github.io/

livecheck.type      regex
livecheck.url       ${homepage}
livecheck.regex     "[quotemeta [string toupper ${name}]] (\\d+(?:\\.\\d+)*)"

# We will build user-space components for the specified arch, and
# kernel modules for the kernel arch.
set kernel_arch [exec uname -m]
# If building for different kernel arch than our buildslaves use, force a build
# from source. The binary package IDs don't encode the kernel arch.
if {${kernel_arch} ne "x86_64"} {
    archive_sites
}

distfiles
set mp.dist {
    osxfuse     400d171
    kext        a8a109b
    framework   dc53dea
    prefpane    1c603b0
    fuse        98b9960
    support     2698c5e
}

depends_build       port:autoconf \
                    port:automake \
                    port:libtool

set mp.osxfuse_rev  [lindex ${mp.dist} [expr [lsearch ${mp.dist} osxfuse] + 1]]
worksrcdir          osxfuse-osxfuse-${mp.osxfuse_rev}

foreach { mp.comp mp.rev } ${mp.dist} {
    set f ${mp.comp}-${mp.rev}.tar.gz
    master_sites-append https://github.com/osxfuse/${mp.comp}/tarball/${mp.rev}/:${mp.comp}
    distfiles-append    ${f}:${mp.comp}
}

checksums           osxfuse-400d171.tar.gz \
                    rmd160  9f0c6e8829d5fa058513a7cb9cc6066bc370a220 \
                    sha256  dc1df774ce249e67a90e3ab555f1714838fb51f2399247a05f7c18416631993e \
                    kext-a8a109b.tar.gz \
                    rmd160  adaee514087099ab0abae75350cb47e1532747aa \
                    sha256  fc9c1379047628a5f98497b8df22e78cfbe4d4c7844cff71c3e69ccedd261b7e \
                    framework-dc53dea.tar.gz \
                    rmd160  a25bfda1f77f43b7c90655b73ac913f2fa5b515b \
                    sha256  ca0f7addb831b9d845ce6fddc12f32e1d7d51fa3756ca7d9f41d3e4718b8a75b \
                    prefpane-1c603b0.tar.gz \
                    rmd160  aab76bc71f400785d95becb3714c52b3cad6f5b0 \
                    sha256  1a87ad0badc8c916fbbc4096a7c7bd85e68d444524b233045bab2a4e8d7f842d \
                    fuse-98b9960.tar.gz \
                    rmd160  589cbe0c819caded56dc4be64727580e1400fd9e \
                    sha256  f60205e19c2971228b78d180dc65cda2a6271a567229acdeb19567fcbcebb641 \
                    support-2698c5e.tar.gz \
                    rmd160  d1ae10e4d3329e336d7dea6508ad1f3ee902efa3 \
                    sha256  83f7577ba28cb8c5096391b63daae000b98887ad75b60beedc385b0f00f23f89

post-extract {
    foreach { mp.comp mp.rev } ${mp.dist} {
        if {${mp.comp} ne "osxfuse"} {
            # Replace existing empty directory if it exists
            file delete ${workpath}/${worksrcdir}/${mp.comp}
            move ${workpath}/osxfuse-${mp.comp}-${mp.rev} ${workpath}/${worksrcdir}/${mp.comp}
        }
    }
}

patchfiles          patch-buildsystem.diff \
                    patch-kext-location.diff

post-patch {
    # Perhaps the ports sandbox does not let us write to /tmp.
    # For a quick and temporary fix use this reinplace.
    file mkdir ${workpath}/tmp
    reinplace "s,@@TMP@@,${workpath}/tmp,g" ${worksrcpath}/build.sh

    # Only build the archs we want, not the hardcoded universal archs
    reinplace -E "s,@@ARCHS@@,[get_canonical_archs],g" ${worksrcpath}/build.sh
    reinplace -E "s,@@KERNELARCHS@@,${kernel_arch},g" ${worksrcpath}/build.sh

    # Inject the destroot path as the buildsystem tries to write to the prefix directly
    reinplace -E "s,@@DESTROOT@@,${destroot},g" ${worksrcpath}/build.sh

    # Correct the location of the kext
    reinplace -E "s,@@PREFIX@@,${prefix},g" ${worksrcpath}/kext/common/fuse_param.h
}

use_configure   no

build.cmd       ./build.sh
# Yes, they really named this target homebrew
build.target    -t homebrew
build.args      -f ${prefix}

# The build step already does everything
destroot {}

# Move filesystem bundle into place
post-destroot {
    # Set proper permissions
    fs-traverse f ${destroot}${prefix}/Library {
        file attributes $f -owner root -group wheel
    }
    # Enable setuid on helper binary
    file attributes ${destroot}${prefix}/Library/Filesystems/osxfusefs.fs/Support/load_osxfusefs -permissions 04755
}
destroot.violate_mtree yes

notes {
    When upgrading, unmount all FUSE filesystems and then unload the kernel extension.
    Unloading can be done via: sudo kextunload -b com.github.osxfuse.filesystems.osxfusefs
    Alternativley (or if this fails), just reboot your computer now.
}

# Could probably be supported by setting ARCHS correctly above
universal_variant no
