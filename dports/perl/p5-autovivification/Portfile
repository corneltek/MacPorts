# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           perl5 1.0

perl5.branches      5.8 5.10 5.12 5.14 5.16 5.18 5.20
perl5.setup         autovivification 0.12 ../by-authors/id/V/VP/VPIT
revision            1

platforms           darwin
maintainers         nomaintainer
license             {Artistic-1 GPL}

supported_archs     noarch

description         Lexically disable autovivification

long_description \
    When an undefined variable is dereferenced, it gets silently upgraded to \
    an array or hash reference (depending of the type of the dereferencing). \
    This behaviour is called *autovivification* and usually does what you    \
    mean (e.g. when you store a value) but it may be unnatural or surprising \
    because your variables gets populated behind your back. This is          \
    especially true when several levels of dereferencing are involved, in    \
    which case all levels are vivified up to the last, or when it happens in \
    intuitively read-only constructs like 'exists'.                          \
                                                                             \
    This pragma lets you disable autovivification for some constructs and    \
    optionally throws a warning or an error when it would have happened.

checksums           sha256 6ef8686766c63571389880e5d87a0ca1d46f7d127982e8ef38aca7568c44840c \
                    rmd160 b0d6cdd83f6b4bc7bdf153020b954f60342b3247
