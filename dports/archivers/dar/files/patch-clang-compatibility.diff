http://sourceforge.net/p/dar/patches/32/
--- src/dar_suite/command_line.cpp	2013-08-26 00:02:14.000000000 +0200
+++ src/dar_suite/command_line.cpp	2013-11-16 17:01:55.000000000 +0100
@@ -778,7 +778,7 @@ static bool get_args_recursive(recursive
 			try
 			{
 				// trying to read a simple integer
-			    deci tmp = string(optarg);
+			    libdar::deci tmp = string(optarg);
 			    p.fixed_date = tmp.computer();
 			}
 			catch(Edeci & e)
@@ -865,7 +865,7 @@ static bool get_args_recursive(recursive
             case 'p':
 		if(optarg != NULL)
 		{
-		    deci conv = string(optarg);
+		    libdar::deci conv = string(optarg);
 		    p.pause = conv.computer();
 		}
 		else
@@ -1244,7 +1244,7 @@ static bool get_args_recursive(recursive
                 {
                     try
                     {
-                        p.hourshift = deci(string(optarg)).computer();
+                        p.hourshift = libdar::deci(string(optarg)).computer();
                     }
                     catch(Edeci & e)
                     {
--- src/dar_suite/crit_action_cmd_line.cpp	2013-08-25 19:09:49.000000000 +0200
+++ src/dar_suite/crit_action_cmd_line.cpp	2013-11-16 17:03:59.000000000 +0100
@@ -412,7 +412,7 @@ static const criterium * criterium_creat
 		case 'r':
 		    try
 		    {
-			deci tmp = sub_arg;
+			libdar::deci tmp = sub_arg;
 			date = tmp.computer();
 		    }
 		    catch(Edeci & e)
--- src/dar_suite/dar_manager.cpp	2013-08-26 00:02:14.000000000 +0200
+++ src/dar_suite/dar_manager.cpp	2013-11-16 17:13:39.000000000 +0100
@@ -78,7 +78,7 @@ using namespace libdar;
 #define INVALID_ARG "Invalid argument given to -%c (requires integer)"
 #define OPT_STRING "C:B:A:lD:b:p:od:ru:f:shVm:vQjw:ie:c@:N;:ka:"
 
-enum operation { none_op, create, add, listing, del, chbase, where, options, dar, restore, used, files, stats, move, interactive, check, batch };
+namespace libdar { enum operation { none_op, create, add, listing, del, chbase, where, options, dar, restore, used, files, stats, move, interactive, check, batch }; };
 
 static S_I little_main(user_interaction & dialog, S_I argc, char *const argv[], const char **env);
 static bool command_line(user_interaction & dialog,
@@ -197,7 +197,7 @@ S_I little_main(user_interaction & dialo
     case used:
     case files:
     case stats:
-    case move:
+    case libdar::move:
     case interactive:
     case check:
     case batch:
@@ -404,7 +404,7 @@ static bool command_line(user_interactio
 		case 'm':
 		    if(op != none_op)
 			throw Erange("command_line", tools_printf(gettext(ONLY_ONCE), char(lu)));
-		    op = move;
+		    op = libdar::move;
 		    if(optarg == NULL)
 			throw Erange("command_line", tools_printf(gettext(MISSING_ARG), char(lu)));
 		    num = tools_str2int(optarg);
@@ -466,7 +466,7 @@ static bool command_line(user_interactio
 		    {
 			try
 			{
-			    deci tmp = string(optarg);
+			    libdar::deci tmp = string(optarg);
 			    date = tmp.computer();
 			}
 			catch(Edeci & e)
@@ -555,7 +555,7 @@ static bool command_line(user_interactio
 	    break;
 	case options:
 	    break;
-	case move:
+	case libdar::move:
 	    if(rest.size() != 1)
 	    {
 		dialog.warning(gettext("Missing argument to command line, aborting"));
@@ -1321,7 +1321,7 @@ static void finalize(user_interaction & 
     case where:
     case options:
     case dar:
-    case move:
+    case libdar::move:
     case batch:
 	if(info_details)
 	    dialog.warning(gettext("Compressing and writing back database to file..."));
@@ -1385,7 +1385,7 @@ static void action(user_interaction & di
     case stats:
 	op_stats(dialog, dat, info_details);
 	break;
-    case move:
+    case libdar::move:
 	op_move(dialog, dat, num, num2, info_details);
 	break;
     case interactive:
--- src/dar_suite/dar_xform.cpp	2013-08-26 00:02:14.000000000 +0200
+++ src/dar_suite/dar_xform.cpp	2013-11-16 17:04:25.000000000 +0100
@@ -342,7 +342,7 @@ static bool command_line(user_interactio
             case 'p':
 		if(optarg != NULL)
 		{
-		    deci conv = string(optarg);
+		    libdar::deci conv = string(optarg);
 		    pause = conv.computer();
 		}
 		else
--- src/dar_suite/line_tools.cpp	2013-08-26 00:02:14.000000000 +0200
+++ src/dar_suite/line_tools.cpp	2013-11-16 17:03:30.000000000 +0100
@@ -221,8 +221,8 @@ void line_tools_repeat_param(const strin
 
     try
     {
-	deci x1 = tmp1;
-	deci x2 = tmp2;
+	libdar::deci x1 = tmp1;
+	libdar::deci x2 = tmp2;
 
 	repeat_count = x1.computer();
 	repeat_byte = x2.computer();
@@ -520,14 +520,14 @@ void line_tools_get_min_digits(string th
 	it1 = tools_find_first_char_of(the_arg, ',');
 	if(it1 == the_arg.end()) // a single number is provided
 	{
-	    deci tmp = the_arg;
+	    libdar::deci tmp = the_arg;
 	    num = tmp.computer();
 	}
 	else // at least two numbers are provided
 	{
 	    if(the_arg.begin() != it1)
 	    {
-		deci convert = string(the_arg.begin(), it1);
+		libdar::deci convert = string(the_arg.begin(), it1);
 		num = convert.computer();
 	    }
 		// else we ignore the leading ','
@@ -539,20 +539,20 @@ void line_tools_get_min_digits(string th
 	    it2 = tools_find_first_char_of(tmp2, ',');
 	    if(it2 == tmp2.end()) // just two number have been provided
 	    {
-		deci convert = tmp2;
+		libdar::deci convert = tmp2;
 		ref_num = convert.computer();
 	    }
 	    else
 	    {
 		if(tmp2.begin() != it2)
 		{
-		    deci convert = string(tmp2.begin(), it2);
+		    libdar::deci convert = string(tmp2.begin(), it2);
 		    ref_num = convert.computer();
 		}
 		++it2;
 		if(it2 != tmp2.end())
 		{
-		    deci convert = string(it2, tmp2.end());
+		    libdar::deci convert = string(it2, tmp2.end());
 		    aux_num = convert.computer();
 		}
 	    }
--- src/libdar/generic_file.cpp	2013-08-25 19:09:49.000000000 +0200
+++ src/libdar/generic_file.cpp	2013-11-03 09:15:46.000000000 +0100
@@ -470,7 +470,7 @@ namespace libdar
 
     const char * generic_file_get_name(gf_mode mode)
     {
-        char *ret = NULL;
+        const char *ret = NULL;
 
         switch(mode)
         {
--- src/libdar/mask_list.hpp	2013-08-25 19:09:49.000000000 +0200
+++ src/libdar/mask_list.hpp	2013-11-16 16:56:09.000000000 +0100
@@ -77,8 +77,8 @@ namespace libdar
 	class my_char
 	{
 	public:
-	    my_char() { val = 0; };
+	    my_char() = default;
	    my_char(const char x) : val(x) {};
 	    bool operator < (const my_char & x) const
 	    {
 		if(val == '/')
--- src/libdar/tools.cpp	2013-08-26 00:02:14.000000000 +0200
+++ src/libdar/tools.cpp	2013-11-03 18:57:49.000000000 +0100
@@ -1048,7 +1048,7 @@ namespace libdar
 
     void tools_display_features(user_interaction & dialog)
     {
-	char *endy = NULL;
+	const char *endy = NULL;
 
 	tools_display_features(dialog,
 			       compile_time::ea(),
