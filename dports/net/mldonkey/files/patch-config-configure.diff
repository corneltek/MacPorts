--- config/configure.orig	2011-08-08 00:11:57.000000000 -0500
+++ config/configure	2012-01-18 20:52:17.000000000 -0600
@@ -4198,7 +4198,8 @@
 
 OCAML_PATH=
 
-echo -e "\n--------------------------------"
+echo
+echo "--------------------------------"
 echo "     Checking system tools."
 echo "--------------------------------"
 
@@ -4667,8 +4668,8 @@
 
 echo "----------------------------------------"
 echo "     Checking system tools finished."
-echo -e "----------------------------------------\n"
-
+echo "----------------------------------------"
+echo
 echo "--------------------------------"
 echo "     Checking Ocaml compiler."
 echo "--------------------------------"
@@ -5447,7 +5448,8 @@
     OCAMLOPT="$OCAMLOPT -g"
 fi
 
-echo -e "\n----------------------------------"
+echo
+echo "----------------------------------"
 echo "     Checking system headers."
 echo "----------------------------------"
 
@@ -6288,7 +6290,8 @@
 
 echo "-------------------------------------------"
 echo "     Checking system headers finished."
-echo -e "-------------------------------------------\n"
+echo "-------------------------------------------"
+echo
 echo "-----------------------------------"
 echo "     Checking system libraries."
 echo "-----------------------------------"
@@ -8548,7 +8551,8 @@
 
 echo "---------------------------------------------"
 echo "     Checking system libraries finished."
-echo -e "---------------------------------------------\n"
+echo "---------------------------------------------"
+echo
 
 CXX_VERSION=
 CRYPTOPPFLAGS=
@@ -10761,17 +10765,19 @@
 
 cd ..
 
-echo -e "\nBuilding dependencies (if it blocks, try '$GNU_MAKE depend' to see the problem)"
+echo
+echo "Building dependencies (if it blocks, try '$GNU_MAKE depend' to see the problem)"
 $GNU_MAKE depend 2> /dev/null > /dev/null || echo "Building dependencies fails: try: '$GNU_MAKE depend'"
 
-echo -e -n "\nConfiguring MLDonkey" $MLDONKEY_VERSION
+printf "\nConfiguring MLDonkey $MLDONKEY_VERSION"
 if test ! -z "$SCM_VERSION"; then
-  echo -n " - SCM: $SCM_VERSION"
+  printf " - SCM: $SCM_VERSION"
 fi
 echo " completed."
 
-echo -e "\nNetwork modules:"
-echo -n " - eDonkey           "
+echo
+echo "Network modules:"
+printf " - eDonkey           "
 if test "$DONKEY" = "yes"; then
   if test "$DONKEY_SUI" = "yes"; then
     echo "enabled (eMule SUI enabled)"
@@ -10782,119 +10788,120 @@
   echo "        disabled"
 fi
 
-echo -n " - BitTorrent        "
+printf " - BitTorrent        "
 if test "$BITTORRENT" = "yes"; then
   echo "enabled"
 else
   echo "        disabled"
 fi
 
-echo -n " - FileTP (aka wget) "
+printf " - FileTP (aka wget) "
 if test "$FILETP" = "yes"; then
   echo "enabled"
 else
   echo "        disabled"
 fi
 
-echo -n " - Fasttrack         "
+printf " - Fasttrack         "
 if test "$FASTTRACK" = "yes"; then
   echo "enabled"
 else
   echo "        disabled"
 fi
 
-echo -n " - Gnutella          "
+printf " - Gnutella          "
 if test "$GNUTELLA" = "yes"; then
   echo "enabled (warning: this network module is unmaintained)"
 else
   echo "        disabled - unmaintained"
 fi
 
-echo -n " - Gnutella2         "
+printf " - Gnutella2         "
 if test "$GNUTELLA2" = "yes"; then
   echo "enabled (warning: this network module is unmaintained)"
 else
   echo "        disabled - unmaintained"
 fi
 
-echo -n " - Direct Connect    "
+printf " - Direct Connect    "
 if test "$DIRECT_CONNECT" = "yes"; then
   echo "enabled"
 else
   echo "        disabled"
 fi
 
-echo -n " - Open Napster      "
+printf " - Open Napster      "
 if test "$OPEN_NAPSTER" = "yes"; then
   echo "enabled          - currently not usable"
 else
   echo "        disabled - currently not usable"
 fi
 
-echo -n " - Soulseek          "
+printf " - Soulseek          "
 if test "$SOULSEEK" = "yes"; then
   echo "enabled          - currently not usable"
 else
   echo "        disabled - currently not usable"
 fi
 
-echo -n " - OpenFT            "
+printf " - OpenFT            "
 if test "$OPENFT" = "yes"; then
   echo "enabled          - currently not usable"
 else
   echo "        disabled - currently not usable"
 fi
 
-echo -e "\nCore features:"
+echo
+echo "Core features:"
 
 echo " - zlib (required)   enabled"
 
-echo -n " - threads           "
+printf " - threads           "
 if test "$USE_PTHREAD" = "yes"; then
   echo "enabled"
 else
   echo "        disabled"
 fi
 
-echo -n " - bzip2             "
+printf " - bzip2             "
 if test "$BZIP2" = "yes"; then
   echo "enabled"
 else
   echo "        disabled"
 fi
 
-echo -n " - iconv             "
+printf " - iconv             "
 if test "$ICONV" = "yes"; then
   echo "enabled"
 else
   echo "        disabled"
 fi
 
-echo -n " - libmagic          "
+printf " - libmagic          "
 if test "$MAGIC" = "yes"; then
   echo "enabled"
 else
   echo "        disabled"
 fi
 
-echo -n " - upnp & natpmp     "
+printf " - upnp & natpmp     "
 if test "$UPNP_NATPMP" = "yes"; then
   echo "enabled"
 else
   echo "        disabled"
 fi
 
-echo -n " - graphical stats   "
+printf " - graphical stats   "
 if test "$GD" = "yes"; then
   echo "enabled"
-  echo -n "   - png support     "
+  printf "   - png support     "
   if test "$GD_PNG" = "yes"; then
     echo "enabled"
   else
     echo "        disabled"
   fi
 
-  echo -n "   - jpg support     "
+  printf "   - jpg support     "
   if test "$GD_JPG" = "yes"; then
     echo "enabled"
   else
@@ -10905,7 +10912,7 @@
 fi
 
 if test "$LABLGTK_CONFIG" = "yes"; then
-  echo -n -e "\n - GUI support       "
+  printf "\n - GUI support       "
   if test "$GUI" = "newgui1"; then
     echo "GTK1 newgui"
   else
@@ -10925,17 +10932,21 @@
   OCAML_TYPE="- byte code"
   COMPILE_TARGET=".byte"
 fi
-echo -e "\nCompilers:"
-echo -e " - Ocaml version     $OCAMLVERSION $OCAML_TYPE"
-echo -e " - $CC version       $CC_VERSION"
+echo
+echo "Compilers:"
+echo " - Ocaml version     $OCAMLVERSION $OCAML_TYPE"
+echo " - $CC version       $CC_VERSION"
 if test "x$CXX" != "x"; then
-  echo -e " - $CXX version       $CXX_VERSION"
+  echo " - $CXX version       $CXX_VERSION"
 fi
-echo -e "\nNow execute '$GNU_MAKE' to start compiling. Good luck!"
+echo
+echo "Now execute '$GNU_MAKE' to start compiling. Good luck!"
 
-echo -e "\nTo compile a static code execute:     $GNU_MAKE mlnet$COMPILE_TARGET.static"
+echo
+echo      "To compile a static code execute:     $GNU_MAKE mlnet$COMPILE_TARGET.static"
 echo      "To produce a release tarball execute: $GNU_MAKE release.mlnet.static"
 echo      "To clean the build directory execute: $GNU_MAKE maintainerclean"
 if test "$DONKEY_SUI" = "yes"; then
-  echo -e "\nCompiling CryptoPP.cc can take several minutes, on slow machines up to half an hour."
+  echo
+  echo "Compiling CryptoPP.cc can take several minutes, on slow machines up to half an hour."
 fi
