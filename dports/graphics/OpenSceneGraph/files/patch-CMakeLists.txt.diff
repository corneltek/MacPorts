--- CMakeLists.txt.orig	2011-07-31 00:50:34.000000000 -0700
+++ CMakeLists.txt	2013-05-31 16:31:45.000000000 -0700
@@ -451,31 +451,77 @@
 ELSE()
 # Common to all platforms except android:
     FIND_PACKAGE(FreeType)
-    FIND_PACKAGE(Inventor)
+    OPTION(OSG_ENABLE_INVENTOR "Enable Inventor (Coin) support" OFF)
+    IF(OSG_ENABLE_INVENTOR)
+        FIND_PACKAGE(Inventor)
+    ELSE()
+        SET(INVENTOR_FOUND NO)
+    ENDIF()
     FIND_PACKAGE(Jasper)
-    FIND_PACKAGE(OpenEXR)
-    FIND_PACKAGE(COLLADA)
+    OPTION(OSG_ENABLE_OPENEXR "Enable OpenEXR support" OFF)
+    IF(OSG_ENABLE_OPENEXR)
+    	FIND_PACKAGE(OpenEXR)
+    ELSE()
+        SET(OPENEXR_FOUND NO)
+    ENDIF()
+    OPTION(OSG_ENABLE_COLLADA "Enable Collada support" OFF)
+    IF(OSG_ENABLE_COLLADA)
+        FIND_PACKAGE(COLLADA)
+    ELSE()
+        SET(COLLADA_FOUND NO)
+    ENDIF()
     FIND_PACKAGE(FBX)
     FIND_PACKAGE(ZLIB)
-    FIND_PACKAGE(Xine)
-    FIND_PACKAGE(OpenVRML)
+    OPTION(OSG_ENABLE_XINE "Enable xine-lib support" OFF)
+    IF(OSG_ENABLE_XINE)
+        FIND_PACKAGE(Xine)
+    ELSE()
+        SET(XINE_FOUND NO)
+    ENDIF()
+    OPTION(OSG_ENABLE_OPENVRML "Enable OpenVRML support" OFF)
+    IF(OSG_ENABLE_OPENVRML)
+    	FIND_PACKAGE(OpenVRML)
+    ELSE()
+        SET(OPENVRML_FOUND NO)
+    ENDIF()
     FIND_PACKAGE(Performer)
     FIND_PACKAGE(GDAL)
     FIND_PACKAGE(CURL)
-    FIND_PACKAGE(ITK)
-    FIND_PACKAGE(LibVNCServer)
+    OPTION(OSG_ENABLE_LIBVNCSERVER "Enable LibVNCServer support" OFF)
+    IF(OSG_ENABLE_LIBVNCSERVER)
+        FIND_PACKAGE(LibVNCServer)
+    ELSE()
+        SET(LIBVNCSERVER_FOUND NO)
+    ENDIF()
     FIND_PACKAGE(OurDCMTK)
     FIND_PACKAGE(OpenAL)
-    FIND_PACKAGE(FFmpeg)
+    OPTION(OSG_ENABLE_FFMPEG "Enable FFmpeg support" OFF)
+    IF(OSG_ENABLE_FFMPEG)
+    	FIND_PACKAGE(FFmpeg)
+    ELSE()
+        SET(FFMPEG_FOUND NO)
+    ENDIF()
     FIND_PACKAGE(DirectShow)
-    FIND_PACKAGE(SDL)
+    OPTION(OSG_ENABLE_SDL "Enable SDL support" OFF)
+    IF(OSG_ENABLE_SDL)
+    	FIND_PACKAGE(SDL)
+    ELSE()
+        SET(SDL_FOUND NO)
+    ENDIF()
     FIND_PACKAGE(Poppler-glib)
     FIND_PACKAGE(RSVG)
-    FIND_PACKAGE(GtkGl)
+    OPTION(OSG_ENABLE_GTKGL "Enable GTK GL widget support" OFF)
+    IF(OSG_ENABLE_GTKGL)
+    	FIND_PACKAGE(GtkGl)
+    ENDIF()
     FIND_PACKAGE(DirectInput)
     FIND_PACKAGE(NVTT)
 ENDIF()
 
+IF(CMAKE_MAJOR_VERSION EQUAL 2 AND CMAKE_MINOR_VERSION LESS 8)
+    FIND_PACKAGE(ITK)
+ENDIF()
+
 # Include macro utilities here
 INCLUDE(OsgMacroUtils)
 
@@ -794,40 +840,6 @@
         #I think this or similar will be required for IPhone apps
         OPTION(OSG_BUILD_APPLICATION_BUNDLES "Enable the building of applications and examples as OSX Bundles" ON)
 
-    ELSE()
-
-        # Set defaults for Universal Binaries. We want 32-bit Intel/PPC on 10.4
-        # and 32/64-bit Intel/PPC on >= 10.5. Anything <= 10.3 doesn't support.
-
-        # These are just defaults/recommendations, but how we want to build
-        # out of the box. But the user needs to be able to change these options.
-        # So we must only set the values the first time CMake is run, or we
-        # will overwrite any changes the user sets.
-        # FORCE is used because the options are not reflected in the UI otherwise.
-        # Seems like a good place to add version specific compiler flags too.
-        IF(NOT OSG_CONFIG_HAS_BEEN_RUN_BEFORE)
-            # This is really fragile, but CMake doesn't provide the OS system
-            # version information we need. (Darwin versions can be changed
-            # independently of OS X versions.)
-            # It does look like CMake handles the CMAKE_OSX_SYSROOT automatically.
-            IF(EXISTS /Developer/SDKs/MacOSX10.5.sdk)
-                # 64-bit compiles are not supported with Carbon. We should enable 
-                # 64-bit compilation by default once osgviewer has been 
-                # rewritten with Cocoa.
-                #SET(CMAKE_OSX_ARCHITECTURES "ppc;i386;ppc64;x86_64" CACHE STRING "Build architectures for OSX" FORCE)
-                SET(CMAKE_OSX_ARCHITECTURES "ppc;i386" CACHE STRING "Build architectures for OSX" FORCE)
-                SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.5 -ftree-vectorize -fvisibility-inlines-hidden" CACHE STRING "Flags used by the compiler during all build types." FORCE)
-            ELSEIF(EXISTS /Developer/SDKs/MacOSX10.4u.sdk)
-                SET(CMAKE_OSX_ARCHITECTURES "ppc;i386" CACHE STRING "Build architectures for OSX" FORCE)
-                SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.4 -ftree-vectorize -fvisibility-inlines-hidden" CACHE STRING "Flags used by the compiler during all build types." FORCE)
-            ELSE()
-                # No Universal Binary support
-                # Should break down further to set the -mmacosx-version-min,
-                # but the SDK detection is too unreliable here.
-            ENDIF()
-        ENDIF(NOT OSG_CONFIG_HAS_BEEN_RUN_BEFORE)
-
-        OPTION(OSG_BUILD_APPLICATION_BUNDLES "Enable the building of applications and examples as OSX Bundles" OFF)
 
     ENDIF()
 
