http://www.synfig.org/issues/thebuggenie/synfig/issues/504#comment_2259
--- configure.orig
+++ configure
@@ -22449,13 +22449,13 @@ cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
 
-		#include <tr1/unordered_map>
+		#include <unordered_map>
 
 int
 main ()
 {
 
-		std::tr1::unordered_map<int,int>::const_iterator iter;
+		std::unordered_map<int,int>::const_iterator iter;
 
   ;
   return 0;
@@ -22469,6 +22469,48 @@ $as_echo "yes" >&6; }
 $as_echo "#define HASH_MAP_CLASS HASH_MAP_NAMESPACE::unordered_map" >>confdefs.h
 
 
+$as_echo "#define HASH_MAP_H <unordered_map>" >>confdefs.h
+
+
+$as_echo "#define HASH_MAP_NAMESPACE std" >>confdefs.h
+
+
+$as_echo "#define FUNCTIONAL_H <functional>" >>confdefs.h
+
+
+$as_echo "#define FUNCTIONAL_HASH_ON_STRING 1" >>confdefs.h
+
+
+else
+
+	{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for tr1/unordered_map<int,int>::const_iterator" >&5
+$as_echo_n "checking for tr1/unordered_map<int,int>::const_iterator... " >&6; }
+	cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+
+			#include <tr1/unordered_map>
+
+int
+main ()
+{
+
+			std::tr1::unordered_map<int,int>::const_iterator iter;
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+
+$as_echo "#define HASH_MAP_CLASS HASH_MAP_NAMESPACE::unordered_map" >>confdefs.h
+
+
 $as_echo "#define HASH_MAP_H <tr1/unordered_map>" >>confdefs.h
 
 
@@ -22483,9 +22525,9 @@ $as_echo "#define FUNCTIONAL_HASH_ON_STRING 1" >>confdefs.h
 
 else
 
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
 $as_echo "no" >&6; }
-	for ac_header in ext/hash_map
+		for ac_header in ext/hash_map
 do :
   ac_fn_cxx_check_header_mongrel "$LINENO" "ext/hash_map" "ac_cv_header_ext_hash_map" "$ac_includes_default"
 if test "x$ac_cv_header_ext_hash_map" = xyes; then :
@@ -22508,7 +22550,7 @@ $as_echo "#define FUNCTIONAL_H <ext/functional>" >>confdefs.h
 
 else
 
-		as_fn_error $? "C++ compiler does not seem to support unordered containers" "$LINENO" 5
+			as_fn_error $? "C++ compiler does not seem to support unordered containers" "$LINENO" 5
 
 fi
 
@@ -22518,6 +22560,9 @@ done
 fi
 rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
 
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
 # Check for unordered_set or hash_set headers
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for unordered_set<int,int>::const_iterator" >&5
 $as_echo_n "checking for unordered_set<int,int>::const_iterator... " >&6; }
@@ -22525,13 +22570,13 @@ cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
 
-		#include <tr1/unordered_set>
+		#include <unordered_set>
 
 int
 main ()
 {
 
-		std::tr1::unordered_set<int,int>::const_iterator iter;
+		std::unordered_set<int,int>::const_iterator iter;
 
   ;
   return 0;
@@ -22545,6 +22590,42 @@ $as_echo "yes" >&6; }
 $as_echo "#define HASH_SET_CLASS HASH_SET_NAMESPACE::unordered_set" >>confdefs.h
 
 
+$as_echo "#define HASH_SET_H <unordered_set>" >>confdefs.h
+
+
+$as_echo "#define HASH_SET_NAMESPACE std" >>confdefs.h
+
+
+else
+
+	{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for tr1/unordered_set<int,int>::const_iterator" >&5
+$as_echo_n "checking for tr1/unordered_set<int,int>::const_iterator... " >&6; }
+	cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+
+			#include <tr1/unordered_set>
+
+int
+main ()
+{
+
+			std::tr1::unordered_set<int,int>::const_iterator iter;
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_cxx_try_compile "$LINENO"; then :
+
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+
+$as_echo "#define HASH_SET_CLASS HASH_SET_NAMESPACE::unordered_set" >>confdefs.h
+
+
 $as_echo "#define HASH_SET_H <tr1/unordered_set>" >>confdefs.h
 
 
@@ -22553,9 +22634,9 @@ $as_echo "#define HASH_SET_NAMESPACE std::tr1" >>confdefs.h
 
 else
 
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+		{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
 $as_echo "no" >&6; }
-	for ac_header in ext/hash_set
+		for ac_header in ext/hash_set
 do :
   ac_fn_cxx_check_header_mongrel "$LINENO" "ext/hash_set" "ac_cv_header_ext_hash_set" "$ac_includes_default"
 if test "x$ac_cv_header_ext_hash_set" = xyes; then :
@@ -22575,7 +22656,7 @@ $as_echo "#define HASH_SET_NAMESPACE __gnu_cxx" >>confdefs.h
 
 else
 
-		as_fn_error $? "C++ compiler does not seem to support unordered containers" "$LINENO" 5
+			as_fn_error $? "C++ compiler does not seem to support unordered containers" "$LINENO" 5
 
 fi
 
@@ -22585,6 +22666,9 @@ done
 fi
 rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
 
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
 
 
 
--- configure.ac.orig
+++ configure.ac
@@ -514,25 +514,41 @@ AC_SUBST(SYNFIGLIB_DIR)
 AC_MSG_CHECKING([for unordered_map<int,int>::const_iterator])
 AC_COMPILE_IFELSE([
 	AC_LANG_PROGRAM([
-		[#include <tr1/unordered_map>]
+		[#include <unordered_map>]
 	],[
-		[std::tr1::unordered_map<int,int>::const_iterator iter;]
+		[std::unordered_map<int,int>::const_iterator iter;]
 	])],[
 	AC_MSG_RESULT([yes])
 	AC_DEFINE([HASH_MAP_CLASS],[HASH_MAP_NAMESPACE::unordered_map],[The template name for unordered maps.])
-	AC_DEFINE([HASH_MAP_H],[<tr1/unordered_map>],[The header file to include for unordered maps.])
-	AC_DEFINE([HASH_MAP_NAMESPACE],[std::tr1],[The namespace for unordered maps.])
-	AC_DEFINE([FUNCTIONAL_H],[<tr1/functional>],[The header file for hash<T>.])
+	AC_DEFINE([HASH_MAP_H],[<unordered_map>],[The header file to include for unordered maps.])
+	AC_DEFINE([HASH_MAP_NAMESPACE],[std],[The namespace for unordered maps.])
+	AC_DEFINE([FUNCTIONAL_H],[<functional>],[The header file for hash<T>.])
 	AC_DEFINE([FUNCTIONAL_HASH_ON_STRING],[1],[Define to 1 if hash<T> needs to use T=String rather than T=char* to hash strings.])
 ],[
 	AC_MSG_RESULT([no])
-	AC_CHECK_HEADERS([ext/hash_map],[
-		AC_DEFINE([HASH_MAP_CLASS],[HASH_MAP_NAMESPACE::hash_map],[The template name for unordered maps.])
-		AC_DEFINE([HASH_MAP_H],[<ext/hash_map>],[The header file to include for unordered maps.])
-		AC_DEFINE([HASH_MAP_NAMESPACE],[__gnu_cxx],[The namespace for unordered maps.])
-		AC_DEFINE([FUNCTIONAL_H],[<ext/functional>],[The header file for hash<T>.])
+	AC_MSG_CHECKING([for tr1/unordered_map<int,int>::const_iterator])
+	AC_COMPILE_IFELSE([
+		AC_LANG_PROGRAM([
+			[#include <tr1/unordered_map>]
+		],[
+			[std::tr1::unordered_map<int,int>::const_iterator iter;]
+		])],[
+		AC_MSG_RESULT([yes])
+		AC_DEFINE([HASH_MAP_CLASS],[HASH_MAP_NAMESPACE::unordered_map],[The template name for unordered maps.])
+		AC_DEFINE([HASH_MAP_H],[<tr1/unordered_map>],[The header file to include for unordered maps.])
+		AC_DEFINE([HASH_MAP_NAMESPACE],[std::tr1],[The namespace for unordered maps.])
+		AC_DEFINE([FUNCTIONAL_H],[<tr1/functional>],[The header file for hash<T>.])
+		AC_DEFINE([FUNCTIONAL_HASH_ON_STRING],[1],[Define to 1 if hash<T> needs to use T=String rather than T=char* to hash strings.])
 	],[
-		AC_MSG_ERROR([C++ compiler does not seem to support unordered containers])
+		AC_MSG_RESULT([no])
+		AC_CHECK_HEADERS([ext/hash_map],[
+			AC_DEFINE([HASH_MAP_CLASS],[HASH_MAP_NAMESPACE::hash_map],[The template name for unordered maps.])
+			AC_DEFINE([HASH_MAP_H],[<ext/hash_map>],[The header file to include for unordered maps.])
+			AC_DEFINE([HASH_MAP_NAMESPACE],[__gnu_cxx],[The namespace for unordered maps.])
+			AC_DEFINE([FUNCTIONAL_H],[<ext/functional>],[The header file for hash<T>.])
+		],[
+			AC_MSG_ERROR([C++ compiler does not seem to support unordered containers])
+		])
 	])
 ])
 
@@ -540,22 +556,36 @@ AC_COMPILE_IFELSE([
 AC_MSG_CHECKING([for unordered_set<int,int>::const_iterator])
 AC_COMPILE_IFELSE([
 	AC_LANG_PROGRAM([
-		[#include <tr1/unordered_set>]
+		[#include <unordered_set>]
 	],[
-		[std::tr1::unordered_set<int,int>::const_iterator iter;]
+		[std::unordered_set<int,int>::const_iterator iter;]
 	])],[
 	AC_MSG_RESULT([yes])
 	AC_DEFINE([HASH_SET_CLASS],[HASH_SET_NAMESPACE::unordered_set],[The template name for unordered sets.])
-	AC_DEFINE([HASH_SET_H],[<tr1/unordered_set>],[The header file to include for unordered sets.])
-	AC_DEFINE([HASH_SET_NAMESPACE],[std::tr1],[The namespace for unordered sets.])
+	AC_DEFINE([HASH_SET_H],[<unordered_set>],[The header file to include for unordered sets.])
+	AC_DEFINE([HASH_SET_NAMESPACE],[std],[The namespace for unordered sets.])
 ],[
 	AC_MSG_RESULT([no])
-	AC_CHECK_HEADERS([ext/hash_set],[
-		AC_DEFINE([HASH_SET_CLASS],[HASH_SET_NAMESPACE::hash_set],[The template name for unordered sets.])
-		AC_DEFINE([HASH_SET_H],[<ext/hash_set>],[The header file to include for unordered sets.])
-		AC_DEFINE([HASH_SET_NAMESPACE],[__gnu_cxx],[The namespace for unordered sets.])
+	AC_MSG_CHECKING([for tr1/unordered_set<int,int>::const_iterator])
+	AC_COMPILE_IFELSE([
+		AC_LANG_PROGRAM([
+			[#include <tr1/unordered_set>]
+		],[
+			[std::tr1::unordered_set<int,int>::const_iterator iter;]
+		])],[
+		AC_MSG_RESULT([yes])
+		AC_DEFINE([HASH_SET_CLASS],[HASH_SET_NAMESPACE::unordered_set],[The template name for unordered sets.])
+		AC_DEFINE([HASH_SET_H],[<tr1/unordered_set>],[The header file to include for unordered sets.])
+		AC_DEFINE([HASH_SET_NAMESPACE],[std::tr1],[The namespace for unordered sets.])
 	],[
-		AC_MSG_ERROR([C++ compiler does not seem to support unordered containers])
+		AC_MSG_RESULT([no])
+		AC_CHECK_HEADERS([ext/hash_set],[
+			AC_DEFINE([HASH_SET_CLASS],[HASH_SET_NAMESPACE::hash_set],[The template name for unordered sets.])
+			AC_DEFINE([HASH_SET_H],[<ext/hash_set>],[The header file to include for unordered sets.])
+			AC_DEFINE([HASH_SET_NAMESPACE],[__gnu_cxx],[The namespace for unordered sets.])
+		],[
+			AC_MSG_ERROR([C++ compiler does not seem to support unordered containers])
+		])
 	])
 ])
 
--- src/synfig/exception.h.orig
+++ src/synfig/exception.h
@@ -28,7 +28,7 @@
 /* === H E A D E R S ======================================================= */
 
 #include <stdexcept>
-#include "string_decl.h"
+#include "string.h"
 
 /* === M A C R O S ========================================================= */
 
--- src/synfig/layer.h.orig
+++ src/synfig/layer.h
@@ -29,7 +29,6 @@
 
 /* === H E A D E R S ======================================================= */
 
-#include "string_decl.h"
 #include <map>
 #include <ETL/handle>
 #include "real.h"
--- src/synfig/target.h.orig
+++ src/synfig/target.h
@@ -30,7 +30,7 @@
 /* === H E A D E R S ======================================================= */
 
 #include <sigc++/signal.h>
-#include "string_decl.h"
+#include "string.h"
 #include <utility>
 #include <map>
 #include <ETL/handle>
--- src/synfig/time.h.orig
+++ src/synfig/time.h
@@ -28,7 +28,7 @@
 
 /* === H E A D E R S ======================================================= */
 
-#include "string_decl.h"
+#include "string.h"
 
 /* === M A C R O S ========================================================= */
 
