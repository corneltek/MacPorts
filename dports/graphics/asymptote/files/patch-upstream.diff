https://sourceforge.net/p/asymptote/code/5651
--- genv.cc.orig
+++ genv.cc
@@ -15,7 +15,7 @@
 
 #include <sstream>
 #include <unistd.h>
-#include <bits/stl_algo.h>
+#include <algorithm>
 
 #include "genv.h"
 #include "env.h"
https://sourceforge.net/p/asymptote/code/5652
--- configure.orig
+++ configure
@@ -5737,7 +5737,7 @@
 ac_fn_cxx_check_header_mongrel "$LINENO" "unordered_map" "ac_cv_header_unordered_map" "$ac_includes_default"
 if test "x$ac_cv_header_unordered_map" = xyes; then :
 
-$as_echo "#define HAVE_UNORDERDED_MAP 1" >>confdefs.h
+$as_echo "#define HAVE_UNORDERED_MAP 1" >>confdefs.h
 
 else
   ac_fn_cxx_check_header_mongrel "$LINENO" "tr1/unordered_map" "ac_cv_header_tr1_unordered_map" "$ac_includes_default"
--- config.h.in.orig
+++ config.h.in
@@ -160,7 +160,7 @@
 #undef HAVE_UNISTD_H
 
 /* Define to 1 if you have unordered_map */
-#undef HAVE_UNORDERDED_MAP
+#undef HAVE_UNORDERED_MAP
 
 /* Define to 1 if you have the `vfork' function. */
 #undef HAVE_VFORK
https://sourceforge.net/p/asymptote/code/5653/
--- gsl.cc.orig
+++ gsl.cc
@@ -850,7 +850,7 @@ void GSLrng_dir2d(stack *s)
 {
   string method = pop<string>(s,string("neumann"));
   checkGSLrng();
-  double x,y;
+  double x=0, y=0;
   if(method == "neumann") gsl_ran_dir_2d(GSLrng,&x,&y);
   else if(method == "trig") gsl_ran_dir_2d_trig_method(GSLrng,&x,&y);
   else error(GSLinvalid);
--- runfile.in.orig
+++ runfile.in
@@ -43,7 +43,7 @@ file* :nullFile()
 file* input(string name=emptystring, bool check=true,
             string comment=commentchar, string mode=emptystring)
 {
-  file *f;
+  file *f=NULL;
   if(mode == "binary") {
     f=new ibfile(name,check);
   } else if(mode == "xdr") {
@@ -71,7 +71,7 @@ file* input(string name=emptystring, bool check=true,
 file* output(string name=emptystring, bool update=false,
              string comment=commentchar, string mode=emptystring)
 {
-  file *f;
+  file *f=NULL;
   if(mode == "pipe") {
     f=new opipe(name);
   } else if(mode == "binary") {
https://sourceforge.net/p/asymptote/code/5654/
--- drawlabel.cc.orig
+++ drawlabel.cc
@@ -75,11 +75,15 @@
   bool Latex=latex(texengine);
   
   if(Latex) {
-    if(setlatexfont(tex,pentype,drawElement::lastpen))
-      tex.wait("\n*");
+    if(setlatexfont(tex,pentype,drawElement::lastpen)) {
+      tex << "\n";
+      tex.wait(texready.c_str());
+    }
   }
-  if(settexfont(tex,pentype,drawElement::lastpen,Latex))
-    tex.wait("\n*");
+  if(settexfont(tex,pentype,drawElement::lastpen,Latex)) {
+    tex << "\n";
+    tex.wait(texready.c_str());
+  }
   
   drawElement::lastpen=pentype;
 }

--- Makefile.in.orig
+++ Makefile.in
@@ -58,9 +58,9 @@ CONTEXTFILES = colo-asy.tex
 ASY = ./asy -dir base -config "" -render=0
 
 DEFS = @DEFS@ @OPTIONS@ @PTHREAD_CFLAGS@ -DFFTWPP_SINGLE_THREAD
-CFLAGS = @CPPFLAGS@ @CFLAGS@
-OPTS = $(DEFS) $(CFLAGS) 
-INCL = -I . @INCL@
+CFLAGS = @CFLAGS@
+OPTS = $(DEFS) @CPPFLAGS@ @CXXFLAGS@ $(CFLAGS)
+INCL = -I. @INCL@
 
 # Options for compiling the object files for the shared library.
 # gc has to be configured with the option --disable-threads in order to make a
--- runlabel.in.orig
+++ runlabel.in
@@ -121,7 +121,10 @@ array *readpath(const string& psname, bool keep,
       string out;
       gs >> out;
       if(out.empty() && !gs.running()) break;
-      buf << out;
+      for (string::iterator i = out.begin(); i != out.end(); ++i) {
+        if (isalpha(*i)) { buf << " "; }
+        buf << (*i);
+      }
       if(out[out.size()-1] == '\n') {
         gs << newl;
         break;
