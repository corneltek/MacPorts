--- src/extension/internal/pdfinput/pdf-parser.cpp.orig	2011-07-08 11:25:09.000000000 -0700
+++ src/extension/internal/pdfinput/pdf-parser.cpp	2012-07-20 18:03:59.000000000 -0700
@@ -38,7 +38,7 @@
 #include "goo/GooHash.h"
 #include "GlobalParams.h"
 #include "CharTypes.h"
-#include "Object.h"
+#include "/opt/local/include/poppler/Object.h"
 #include "Array.h"
 #include "Dict.h"
 #include "Stream.h"
@@ -367,15 +367,23 @@
     for (i = 0; i < obj->arrayGetLength(); ++i) {
       obj->arrayGet(i, &obj2);
       if (!obj2.isStream()) {
+#ifdef POPPLER_NEW_ERRORAPI
+	error(errInternal, -1, "Weird page contents");
+#else
 	error(-1, const_cast<char*>("Weird page contents"));
+#endif
 	obj2.free();
 	return;
       }
       obj2.free();
     }
   } else if (!obj->isStream()) {
-    error(-1, const_cast<char*>("Weird page contents"));
-    return;
+#ifdef POPPLER_NEW_ERRORAPI
+	error(errInternal, -1, "Weird page contents");
+#else
+	error(-1, const_cast<char*>("Weird page contents"));
+#endif
+    	return;
   }
   parser = new Parser(xref, new Lexer(xref, obj), gFalse);
   go(topLevel);
@@ -419,7 +427,11 @@
 
     // too many arguments - something is wrong
     } else {
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Too many args in content stream");
+#else
       error(getPos(), const_cast<char*>("Too many args in content stream"));
+#endif
       if (printCommands) {
 	printf("throwing away arg: ");
 	obj.print(stdout);
@@ -436,7 +448,11 @@
 
   // args at end with no command
   if (numArgs > 0) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Leftover args in content stream");
+#else
     error(getPos(), const_cast<char*>("Leftover args in content stream"));
+#endif
     if (printCommands) {
       printf("%d leftovers:", numArgs);
       for (i = 0; i < numArgs; ++i) {
@@ -502,7 +518,11 @@
   name = cmd->getCmd();
   if (!(op = findOp(name))) {
     if (ignoreUndef == 0)
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Unknown operator '{0:s}'", name);
+#else
       error(getPos(), const_cast<char*>("Unknown operator '%s'"), name);
+#endif
     return;
   }
 
@@ -510,26 +530,42 @@
   argPtr = args;
   if (op->numArgs >= 0) {
     if (numArgs < op->numArgs) {
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Too few ({0:d}) args to '{1:d}' operator", numArgs, name);
+#else
       error(getPos(), const_cast<char*>("Too few (%d) args to '%s' operator"), numArgs, name);
+#endif
       return;
     }
     if (numArgs > op->numArgs) {
 #if 0
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Too many ({0:d}) args to '{1:s}' operator", numArgs, name);
+#else
       error(getPos(), "Too many (%d) args to '%s' operator", numArgs, name);
 #endif
+#endif
       argPtr += numArgs - op->numArgs;
       numArgs = op->numArgs;
     }
   } else {
     if (numArgs > -op->numArgs) {
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Too many ({0:d}) args to '{1:s}' operator",
+#else
       error(getPos(), const_cast<char*>("Too many (%d) args to '%s' operator"),
+#endif
 	    numArgs, name);
       return;
     }
   }
   for (i = 0; i < numArgs; ++i) {
     if (!checkArg(&argPtr[i], op->tchk[i])) {
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Arg #{0:d} to '{1:s}' operator is wrong type ({2:s})",
+#else
       error(getPos(), const_cast<char*>("Arg #%d to '%s' operator is wrong type (%s)"),
+#endif
 	    i, name, argPtr[i].getTypeName());
       return;
     }
@@ -690,7 +726,11 @@
     return;
   }
   if (!obj1.isDict()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "ExtGState '{0:s}' is wrong type"), args[0].getName();
+#else
     error(getPos(), const_cast<char*>("ExtGState '%s' is wrong type"), args[0].getName());
+#endif
     obj1.free();
     return;
   }
@@ -705,7 +745,11 @@
     if (state->parseBlendMode(&obj2, &mode)) {
       state->setBlendMode(mode);
     } else {
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Invalid blend mode in ExtGState");
+#else
       error(getPos(), const_cast<char*>("Invalid blend mode in ExtGState"));
+#endif
     }
   }
   obj2.free();
@@ -764,7 +808,11 @@
       state->setTransfer(funcs);
     }
   } else if (!obj2.isNull()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Invalid transfer function in ExtGState");
+#else
     error(getPos(), const_cast<char*>("Invalid transfer function in ExtGState"));
+#endif
   }
   obj2.free();
 
@@ -784,8 +832,11 @@
 	funcs[0] = Function::parse(&obj3);
 	if (funcs[0]->getInputSize() != 1 ||
 	    funcs[0]->getOutputSize() != 1) {
-	  error(getPos(),
-		const_cast<char*>("Invalid transfer function in soft mask in ExtGState"));
+#ifdef POPPLER_NEW_ERRORAPI
+	  error(errSyntaxError, getPos(), "Invalid transfer function in soft mask in ExtGState");
+#else
+	  error(getPos(), const_cast<char*>("Invalid transfer function in soft mask in ExtGState"));
+#endif
 	  delete funcs[0];
 	  funcs[0] = NULL;
 	}
@@ -809,7 +860,7 @@
 	  blendingColorSpace = NULL;
 	  isolated = knockout = gFalse;
 	  if (!obj4.dictLookup(const_cast<char*>("CS"), &obj5)->isNull()) {
-#ifdef POPPLER_NEW_COLOR_SPACE_API
+#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
 	    blendingColorSpace = GfxColorSpace::parse(&obj5, NULL);
 #else
 	    blendingColorSpace = GfxColorSpace::parse(&obj5);
@@ -840,15 +891,27 @@
 	    delete funcs[0];
 	  }
 	} else {
+#ifdef POPPLER_NEW_ERRORAPI
+	  error(errSyntaxError, getPos(), "Invalid soft mask in ExtGState - missing group");
+#else
 	  error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
+#endif
 	}
 	obj4.free();
       } else {
+#ifdef POPPLER_NEW_ERRORAPI
+	error(errSyntaxError, getPos(), "Invalid soft mask in ExtGState - missing group");
+#else
 	error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
+#endif
       }
       obj3.free();
     } else if (!obj2.isNull()) {
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Invalid soft mask in ExtGState");
+#else
       error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState"));
+#endif
     }
   }
   obj2.free();
@@ -876,7 +939,11 @@
   // check form type
   dict->lookup(const_cast<char*>("FormType"), &obj1);
   if (!(obj1.isNull() || (obj1.isInt() && obj1.getInt() == 1))) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Unknown form type");
+#else
     error(getPos(), const_cast<char*>("Unknown form type"));
+#endif
   }
   obj1.free();
 
@@ -884,7 +951,11 @@
   dict->lookup(const_cast<char*>("BBox"), &obj1);
   if (!obj1.isArray()) {
     obj1.free();
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Bad form bounding box");
+#else
     error(getPos(), const_cast<char*>("Bad form bounding box"));
+#endif
     return;
   }
   for (i = 0; i < 4; ++i) {
@@ -1012,7 +1083,7 @@
 
   state->setFillPattern(NULL);
   res->lookupColorSpace(args[0].getName(), &obj);
-#ifdef POPPLER_NEW_COLOR_SPACE_API
+#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
   if (obj.isNull()) {
     colorSpace = GfxColorSpace::parse(&args[0], NULL);
   } else {
@@ -1032,7 +1103,11 @@
     state->setFillColor(&color);
     builder->updateStyle(state);
   } else {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Bad color space (fill)");
+#else
     error(getPos(), const_cast<char*>("Bad color space (fill)"));
+#endif
   }
 }
 
@@ -1043,7 +1118,7 @@
 
   state->setStrokePattern(NULL);
   res->lookupColorSpace(args[0].getName(), &obj);
-#ifdef POPPLER_NEW_COLOR_SPACE_API
+#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
   if (obj.isNull()) {
     colorSpace = GfxColorSpace::parse(&args[0], NULL);
   } else {
@@ -1063,7 +1138,11 @@
     state->setStrokeColor(&color);
     builder->updateStyle(state);
   } else {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Bad color space (stroke)");
+#else
     error(getPos(), const_cast<char*>("Bad color space (stroke)"));
+#endif
   }
 }
 
@@ -1072,7 +1151,11 @@
   int i;
 
   if (numArgs != state->getFillColorSpace()->getNComps()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Incorrect number of arguments in 'sc' command");
+#else
     error(getPos(), const_cast<char*>("Incorrect number of arguments in 'sc' command"));
+#endif
     return;
   }
   state->setFillPattern(NULL);
@@ -1088,7 +1171,11 @@
   int i;
 
   if (numArgs != state->getStrokeColorSpace()->getNComps()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Incorrect number of arguments in 'SC' command");
+#else
     error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SC' command"));
+#endif
     return;
   }
   state->setStrokePattern(NULL);
@@ -1109,7 +1196,11 @@
       if (!((GfxPatternColorSpace *)state->getFillColorSpace())->getUnder() ||
 	  numArgs - 1 != ((GfxPatternColorSpace *)state->getFillColorSpace())
 	                     ->getUnder()->getNComps()) {
+#ifdef POPPLER_NEW_ERRORAPI
+	error(errSyntaxError, getPos(), "Incorrect number of arguments in 'scn' command");
+#else
 	error(getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
+#endif
 	return;
       }
       for (i = 0; i < numArgs - 1 && i < gfxColorMaxComps; ++i) {
@@ -1120,7 +1211,7 @@
       state->setFillColor(&color);
       builder->updateStyle(state);
     }
-#ifdef POPPLER_NEW_COLOR_SPACE_API
+#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
     if (args[numArgs-1].isName() &&
 	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
       state->setFillPattern(pattern);
@@ -1136,7 +1227,11 @@
 
   } else {
     if (numArgs != state->getFillColorSpace()->getNComps()) {
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Incorrect number of arguments in 'scn' command");
+#else
       error(getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
+#endif
       return;
     }
     state->setFillPattern(NULL);
@@ -1161,7 +1256,11 @@
 	       ->getUnder() ||
 	  numArgs - 1 != ((GfxPatternColorSpace *)state->getStrokeColorSpace())
 	                     ->getUnder()->getNComps()) {
+#ifdef POPPLER_NEW_ERRORAPI
+	error(errSyntaxError, getPos(), "Incorrect number of arguments in 'SCN' command");
+#else
 	error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
+#endif
 	return;
       }
       for (i = 0; i < numArgs - 1 && i < gfxColorMaxComps; ++i) {
@@ -1172,7 +1271,7 @@
       state->setStrokeColor(&color);
       builder->updateStyle(state);
     }
-#ifdef POPPLER_NEW_COLOR_SPACE_API
+#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
     if (args[numArgs-1].isName() &&
 	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
       state->setStrokePattern(pattern);
@@ -1188,7 +1287,11 @@
 
   } else {
     if (numArgs != state->getStrokeColorSpace()->getNComps()) {
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Incorrect number of arguments in 'SCN' command");
+#else
       error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
+#endif
       return;
     }
     state->setStrokePattern(NULL);
@@ -1212,7 +1315,11 @@
 
 void PdfParser::opLineTo(Object args[], int numArgs) {
   if (!state->isCurPt()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "No current point in lineto");
+#else
     error(getPos(), const_cast<char*>("No current point in lineto"));
+#endif
     return;
   }
   state->lineTo(args[0].getNum(), args[1].getNum());
@@ -1222,7 +1329,11 @@
   double x1, y1, x2, y2, x3, y3;
 
   if (!state->isCurPt()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "No current point in curveto");
+#else
     error(getPos(), const_cast<char*>("No current point in curveto"));
+#endif
     return;
   }
   x1 = args[0].getNum();
@@ -1238,7 +1349,11 @@
   double x1, y1, x2, y2, x3, y3;
 
   if (!state->isCurPt()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "No current point in curveto1");
+#else
     error(getPos(), const_cast<char*>("No current point in curveto1"));
+#endif
     return;
   }
   x1 = state->getCurX();
@@ -1254,7 +1369,11 @@
   double x1, y1, x2, y2, x3, y3;
 
   if (!state->isCurPt()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "No current point in curveto2");
+#else
     error(getPos(), const_cast<char*>("No current point in curveto2"));
+#endif
     return;
   }
   x1 = args[0].getNum();
@@ -1282,7 +1401,11 @@
 
 void PdfParser::opClosePath(Object args[], int numArgs) {
   if (!state->isCurPt()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "No current point in closepath");
+#else
     error(getPos(), const_cast<char*>("No current point in closepath"));
+#endif
     return;
   }
   state->closePath();
@@ -1440,7 +1563,11 @@
     doShadingPatternFillFallback((GfxShadingPattern *)pattern, gFalse, eoFill);
     break;
   default:
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errUnimplemented, getPos(), "Unimplemented pattern type (%d) in fill",
+#else
     error(getPos(), const_cast<char*>("Unimplemented pattern type (%d) in fill"),
+#endif
 	  pattern->getType());
     break;
   }
@@ -1459,7 +1586,11 @@
     doShadingPatternFillFallback((GfxShadingPattern *)pattern, gTrue, gFalse);
     break;
   default:
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errUnimplemented, getPos(), "Unimplemented pattern type ({0:d}) in stroke",
+#else
     error(getPos(), const_cast<char*>("Unimplemented pattern type (%d) in stroke"),
+#endif
 	  pattern->getType());
     break;
   }
@@ -1579,7 +1710,7 @@
   double *matrix = NULL;
   GBool savedState = gFalse;
 
-#ifdef POPPLER_NEW_COLOR_SPACE_API
+#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
   if (!(shading = res->lookupShading(args[0].getName(), NULL))) {
     return;
   }
@@ -2156,7 +2287,11 @@
 
 void PdfParser::opShowText(Object args[], int numArgs) {
   if (!state->getFont()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "No font in show");
+#else
     error(getPos(), const_cast<char*>("No font in show"));
+#endif
     return;
   }
   if (fontChanged) {
@@ -2170,7 +2305,11 @@
   double tx, ty;
 
   if (!state->getFont()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "No font in move/show");
+#else
     error(getPos(), const_cast<char*>("No font in move/show"));
+#endif
     return;
   }
   if (fontChanged) {
@@ -2188,7 +2327,11 @@
   double tx, ty;
 
   if (!state->getFont()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "No font in move/set/show");
+#else
     error(getPos(), const_cast<char*>("No font in move/set/show"));
+#endif
     return;
   }
   if (fontChanged) {
@@ -2211,7 +2354,11 @@
   int i;
 
   if (!state->getFont()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "No font in show/space");
+#else
     error(getPos(), const_cast<char*>("No font in show/space"));
+#endif
     return;
   }
   if (fontChanged) {
@@ -2236,7 +2383,11 @@
     } else if (obj.isString()) {
       doShowText(obj.getString());
     } else {
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Element of show/space array must be number or string");
+#else
       error(getPos(), const_cast<char*>("Element of show/space array must be number or string"));
+#endif
     }
     obj.free();
   }
@@ -2334,7 +2485,11 @@
 	if (charProc.isStream()) {
 	  //parse(&charProc, gFalse); // TODO: parse into SVG font
 	} else {
+#ifdef POPPLER_NEW_ERRORAPI
+	  error(errSyntaxError, getPos(), "Missing or bad Type3 CharProc entry");
+#else
 	  error(getPos(), const_cast<char*>("Missing or bad Type3 CharProc entry"));
+#endif
 	}
 	//out->endType3Char(state);
 	if (resDict) {
@@ -2410,7 +2565,11 @@
     return;
   }
   if (!obj1.isStream()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "XObject '{0:s}' is wrong type", name);
+#else
     error(getPos(), const_cast<char*>("XObject '%s' is wrong type"), name);
+#endif
     obj1.free();
     return;
   }
@@ -2426,9 +2585,17 @@
 /*    out->psXObject(obj1.getStream(),
     		   obj3.isStream() ? obj3.getStream() : (Stream *)NULL);*/
   } else if (obj2.isName()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Unknown XObject subtype '{0:s}'", obj2.getName());
+#else
     error(getPos(), const_cast<char*>("Unknown XObject subtype '%s'"), obj2.getName());
+#endif
   } else {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "XObject subtype is missing or wrong type");
+#else
     error(getPos(), const_cast<char*>("XObject subtype is missing or wrong type"));
+#endif
   }
   obj2.free();
   obj1.free();
@@ -2559,7 +2726,7 @@
       }
     }
     if (!obj1.isNull()) {
-#ifdef POPPLER_NEW_COLOR_SPACE_API
+#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
       colorSpace = GfxColorSpace::parse(&obj1, NULL);
 #else
       colorSpace = GfxColorSpace::parse(&obj1);
@@ -2648,7 +2815,7 @@
 	  obj2.free();
 	}
       }
-#ifdef POPPLER_NEW_COLOR_SPACE_API
+#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
       maskColorSpace = GfxColorSpace::parse(&obj1, NULL);
 #else
       maskColorSpace = GfxColorSpace::parse(&obj1);
@@ -2758,7 +2925,11 @@
  err2:
   obj1.free();
  err1:
+#ifdef POPPLER_NEW_ERRORAPI
+  error(errSyntaxError, getPos(), "Bad image parameters");
+#else
   error(getPos(), const_cast<char*>("Bad image parameters"));
+#endif
 }
 
 void PdfParser::doForm(Object *str) {
@@ -2783,7 +2954,11 @@
   // check form type
   dict->lookup(const_cast<char*>("FormType"), &obj1);
   if (!(obj1.isNull() || (obj1.isInt() && obj1.getInt() == 1))) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Unknown form type");
+#else
     error(getPos(), const_cast<char*>("Unknown form type"));
+#endif
   }
   obj1.free();
 
@@ -2791,7 +2966,11 @@
   dict->lookup(const_cast<char*>("BBox"), &bboxObj);
   if (!bboxObj.isArray()) {
     bboxObj.free();
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "Bad form bounding box");
+#else
     error(getPos(), const_cast<char*>("Bad form bounding box"));
+#endif
     return;
   }
   for (i = 0; i < 4; ++i) {
@@ -2827,7 +3006,7 @@
     if (obj1.dictLookup(const_cast<char*>("S"), &obj2)->isName(const_cast<char*>("Transparency"))) {
       transpGroup = gTrue;
       if (!obj1.dictLookup(const_cast<char*>("CS"), &obj3)->isNull()) {
-#ifdef POPPLER_NEW_COLOR_SPACE_API
+#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
 	blendingColorSpace = GfxColorSpace::parse(&obj3, NULL);
 #else
 	blendingColorSpace = GfxColorSpace::parse(&obj3);
@@ -2990,7 +3169,11 @@
   parser->getObj(&obj);
   while (!obj.isCmd(const_cast<char*>("ID")) && !obj.isEOF()) {
     if (!obj.isName()) {
+#ifdef POPPLER_NEW_ERRORAPI
+      error(errSyntaxError, getPos(), "Inline image dictionary key must be a name object");
+#else
       error(getPos(), const_cast<char*>("Inline image dictionary key must be a name object"));
+#endif
       obj.free();
     } else {
       key = copyString(obj.getName());
@@ -3005,7 +3188,11 @@
     parser->getObj(&obj);
   }
   if (obj.isEOF()) {
+#ifdef POPPLER_NEW_ERRORAPI
+    error(errSyntaxError, getPos(), "End of file in inline image");
+#else
     error(getPos(), const_cast<char*>("End of file in inline image"));
+#endif
     obj.free();
     dict.free();
     return NULL;
@@ -3020,11 +3207,19 @@
 }
 
 void PdfParser::opImageData(Object args[], int numArgs) {
+#ifdef POPPLER_NEW_ERRORAPI
+  error(errSyntaxError, getPos(), "Internal: got 'ID' operator");
+#else
   error(getPos(), const_cast<char*>("Internal: got 'ID' operator"));
+#endif
 }
 
 void PdfParser::opEndImage(Object args[], int numArgs) {
+#ifdef POPPLER_NEW_ERRORAPI
+  error(errSyntaxError, getPos(), "Internal: got 'EI' operator");
+#else
   error(getPos(), const_cast<char*>("Internal: got 'EI' operator"));
+#endif
 }
 
 //------------------------------------------------------------------------
