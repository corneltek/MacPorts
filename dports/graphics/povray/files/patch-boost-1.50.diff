--- source/backend/scene/view.cpp.orig	2012-06-10 06:53:44.000000000 -0500
+++ source/backend/scene/view.cpp	2012-09-05 05:07:51.000000000 -0500
@@ -1550,7 +1550,7 @@
 	}
 
 	boost::xtime t;
-	boost::xtime_get (&t, boost::TIME_UTC);
+	boost::xtime_get (&t, boost::TIME_UTC_);
 	t.sec += 3;
 
 	// this will cause us to wait until the other threads are done.
--- source/base/timer.cpp.orig	2012-02-05 14:54:15.000000000 -0600
+++ source/base/timer.cpp	2012-09-05 05:07:51.000000000 -0500
@@ -117,7 +117,7 @@
 POV_LONG TimerDefault::ElapsedRealTime() const
 {
 	boost::xtime t;
-	boost::xtime_get(&t, boost::TIME_UTC);
+	boost::xtime_get(&t, boost::TIME_UTC_);
 	POV_LONG tt = (POV_LONG)(t.sec) * (POV_LONG)(1000000000) + (POV_LONG)(t.nsec);
 	POV_LONG st = (POV_LONG)(realTimeStart.sec) * (POV_LONG)(1000000000) + (POV_LONG)(realTimeStart.nsec);
 	return ((tt - st) / (POV_LONG)(1000000));
@@ -126,7 +126,7 @@
 POV_LONG TimerDefault::ElapsedCPUTime() const
 {
 	boost::xtime t;
-	boost::xtime_get(&t, boost::TIME_UTC);
+	boost::xtime_get(&t, boost::TIME_UTC_);
 	POV_LONG tt = (POV_LONG)(t.sec) * (POV_LONG)(1000000000) + (POV_LONG)(t.nsec);
 	POV_LONG st = (POV_LONG)(cpuTimeStart.sec) * (POV_LONG)(1000000000) + (POV_LONG)(cpuTimeStart.nsec);
 	return ((tt - st) / (POV_LONG)(1000000));
@@ -139,8 +139,8 @@
 
 void TimerDefault::Reset()
 {
-	boost::xtime_get(&realTimeStart, boost::TIME_UTC);
-	boost::xtime_get(&cpuTimeStart, boost::TIME_UTC);
+	boost::xtime_get(&realTimeStart, boost::TIME_UTC_);
+	boost::xtime_get(&cpuTimeStart, boost::TIME_UTC_);
 }
 
 }
@@ -155,7 +155,7 @@
 void Delay(unsigned int msec)
 {
 	boost::xtime t;
-	boost::xtime_get(&t, boost::TIME_UTC);
+	boost::xtime_get(&t, boost::TIME_UTC_);
 	POV_ULONG ns = (POV_ULONG)(t.sec) * (POV_ULONG)(1000000000) + (POV_ULONG)(t.nsec) + (POV_ULONG)(msec) * (POV_ULONG)(1000000);
 	t.sec = (boost::xtime::xtime_sec_t)(ns / (POV_ULONG)(1000000000));
 	t.nsec = (boost::xtime::xtime_nsec_t)(ns % (POV_ULONG)(1000000000));
--- vfe/unix/platformbase.cpp.orig	2012-06-19 11:29:38.000000000 -0500
+++ vfe/unix/platformbase.cpp	2012-09-05 05:07:51.000000000 -0500
@@ -126,7 +126,7 @@
 #else
 		// taken from source/base/timer.cpp
 		boost::xtime t;
-		boost::xtime_get(&t, boost::TIME_UTC);
+		boost::xtime_get(&t, boost::TIME_UTC_);
 		POV_ULONG ns = (POV_ULONG)(t.sec) * (POV_ULONG)(1000000000) + (POV_ULONG)(t.nsec) + (POV_ULONG)(msec) * (POV_ULONG)(1000000);
 		t.sec = (boost::xtime::xtime_sec_t)(ns / (POV_ULONG)(1000000000));
 		t.nsec = (boost::xtime::xtime_nsec_t)(ns % (POV_ULONG)(1000000000));
--- vfe/vfepovms.cpp.orig	2012-06-19 11:29:40.000000000 -0500
+++ vfe/vfepovms.cpp	2012-09-05 05:07:51.000000000 -0500
@@ -247,7 +247,7 @@
 
     // TODO: have a shorter wait but loop, and check for system shutdown
     boost::xtime t;
-    boost::xtime_get (&t, boost::TIME_UTC);
+    boost::xtime_get (&t, boost::TIME_UTC_);
     t.nsec += 50000000 ;
     m_Event.timed_wait (lock, t);
 
--- vfe/vfesession.cpp.orig	2012-06-19 11:29:40.000000000 -0500
+++ vfe/vfesession.cpp	2012-09-05 05:07:51.000000000 -0500
@@ -967,7 +967,7 @@
   if (WaitTime > 0)
   {
     boost::xtime t;
-    boost::xtime_get (&t, boost::TIME_UTC);
+    boost::xtime_get (&t, boost::TIME_UTC_);
     t.sec += WaitTime / 1000 ;
     t.nsec += (WaitTime % 1000) * 1000000 ;
     m_SessionEvent.timed_wait (lock, t);
@@ -1034,7 +1034,7 @@
   // we can't call pause directly since it will result in a thread context
   // error. pause must be called from the context of the worker thread.
   boost::xtime t;
-  boost::xtime_get (&t, boost::TIME_UTC);
+  boost::xtime_get (&t, boost::TIME_UTC_);
   t.sec += 3 ;
   m_RequestFlag = rqPauseRequest;
   if (m_RequestEvent.timed_wait(lock, t) == false)
@@ -1057,7 +1057,7 @@
   // we can't call resume directly since it will result in a thread context
   // error. it must be called from the context of the worker thread.
   boost::xtime t;
-  boost::xtime_get (&t, boost::TIME_UTC);
+  boost::xtime_get (&t, boost::TIME_UTC_);
   t.sec += 3 ;
   m_RequestFlag = rqResumeRequest;
   if (m_RequestEvent.timed_wait(lock, t) == false)
@@ -1123,7 +1123,7 @@
   m_LastError = vfeNoError;
 
   boost::xtime t;
-  boost::xtime_get (&t, boost::TIME_UTC);
+  boost::xtime_get (&t, boost::TIME_UTC_);
   t.sec += 3 ;
 #ifdef _DEBUG
   t.sec += 120;
