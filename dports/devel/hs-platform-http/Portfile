# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem              1.0
PortGroup               haskellplatform 1.0

haskellplatform.setup   HTTP 4000.2.3
checksums               rmd160  70bb2e353a63eeb896664dadf1b3313a0867439b \
                        sha256  00f59f751a53a0cd766d59cffb3a97fc001189797861ce4aa28d4bea672efafc

license                 BSD
maintainers             cal openmaintainer
platforms               darwin

depends_lib-append      port:hs-platform-network \
                        port:hs-platform-mtl \
                        port:hs-platform-parsec

description             \
    The HTTP package supports client-side web programming in Haskell. It lets \
    you set up HTTP connections, transmitting requests and processing the \
    responses coming back, all from within the comforts of Haskell. It's \
    dependent on the network package to operate, but other than that, the \
    implementation is all written in Haskell.
long_description        ${description} \
    A basic API for issuing single HTTP requests + receiving responses is \
    provided. On top of that, a session-level abstraction is also on offer (the \
    BrowserAction monad): it taking care of handling the management of \
    persistent connections, proxies, state (cookies) and authentication \
    credentials required to handle multi-step interactions with a web server. \
    \
    The representation of the bytes flowing across is extensible via the use of \
    a type class, letting you pick the representation of requests and responses \
    that best fits your use. Some pre-packaged, common instances are provided \
    for you (ByteString, String.)
