# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0

# Disable the full universal support since ACE already does most of this
# and the extra stuff in muniversal (including making two build trees
# and using libtool to merge libraries) does not work for this case.
# PortGroup           muniversal 1.0

name                ace
set name_package    ACE
version             6.1.2
revision            1
distname            ${name_package}-${version}
categories          devel
maintainers         fourpalms.org:lockhart openmaintainer
platforms           darwin
license             BSD
description         ACE is an object-oriented framework that implements many core patterns for \
                    concurrent communication software.
long_description    The ADAPTIVE Communication Environment (ACE) is a freely available, \
                    open-source object-oriented (OO) framework that implements many core \
                    patterns for concurrent communication software. ACE provides a rich set \
                    of reusable C++ wrapper facades and framework components that perform \
                    common communication software tasks across a range of OS platforms. The \
                    communication software tasks provided by ACE include event \
                    demultiplexing and event handler dispatching, signal handling, service \
                    initialization, interprocess communication, shared memory management, \
                    message routing, dynamic (re)configuration of distributed services, \
                    concurrent execution and synchronization.

conflicts           tao

homepage            http://www.cs.wustl.edu/~schmidt/ACE.html
master_sites        http://download.dre.vanderbilt.edu/previous_versions

universal_variant   yes

variant ssl description {Enable SSL} {
        depends_lib port:openssl
}

use_bzip2           yes

worksrcdir          ACE_wrappers

patch.pre_args      -p1
patchfiles          patch-ace-config.h.diff \
                    patch-include-makeinclude-platform_macros.GNU.diff

checksums           rmd160  441640bb9d4ee4516d79b80f43748bc20bd266ce \
                    sha256  6e2af99acdbb1b769bed1e5a6d2e21a0165597097739aed77a4382de0f9257e8

set os.name "lion"
array set os.names {
     7  panther
     8  tiger
     9  leopard
    10  snowleopard
    11  lion
    12  mountainlion
}
if {"darwin" == ${os.platform}} {
    foreach {key value} [array get os.names]  {
        if {${key} == ${os.major}} {
            set os.name ${value}
        }
    }
}
set libenv          DYLD_LIBRARY_PATH=${worksrcpath}/lib
set aceenv          ACE_ROOT=${worksrcpath}
set makearg         INSTALL_PREFIX=${prefix}
set subdirs         { . }

post-patch {
    reinplace "s|@MACOSX@|${os.name}|g" \
        ${worksrcpath}/ace/config.h \
        ${worksrcpath}/include/makeinclude/platform_macros.GNU
    # disable the assignment for compilers in lion and use our environment instead
    reinplace "s|^\\(CXX:=.*\\)|# \\1|g" \
        ${worksrcpath}/include/makeinclude/platform_macosx_lion.GNU
    reinplace "s|^\\(CC:=.*\\)|# \\1|g" \
        ${worksrcpath}/include/makeinclude/platform_macosx_lion.GNU

    if {[variant_exists universal] && [variant_isset universal]} {
        ui_debug "Enabling a universal build"
        reinplace "s|buildbits=64|buildbits=universal|g" \
            ${worksrcpath}/include/makeinclude/platform_macros.GNU
        # do not set universal=1 which tries i386 and PPC but fails
        reinplace "s|universal=0|universal=0|g" \
            ${worksrcpath}/include/makeinclude/platform_macros.GNU
    }

    if {[variant_exists ssl] && [variant_isset ssl]} {
        ui_debug "Enabling SSL"
        reinplace "s|ssl=0|ssl=1|g" \
            ${worksrcpath}/include/makeinclude/platform_macros.GNU
    }
}

depends_lib         path:bin/perl:perl5

use_configure       no

use_parallel_build  no

build.env           "${libenv} ${aceenv}"
build.args-append   CC=${configure.cc} \
                    CXX=${configure.cxx} \
                    CPP=${configure.cpp}
build.pre_args      ${makearg} all
build {
    foreach {subdir} $subdirs {
        build.dir ${worksrcpath}/${subdir}
        command_exec build
    }
}

destroot.env        "${libenv} ${aceenv}"
destroot.pre_args   ${makearg} install
destroot {
    foreach {subdir} $subdirs {
        destroot.dir ${worksrcpath}/${subdir}
        command_exec destroot
    }
}

livecheck.url       ${master_sites}
livecheck.regex     ${name_package}-(\\d+\[0-9a-z.\]*)${extract.suffix}
