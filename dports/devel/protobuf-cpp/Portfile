# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem 1.0

name            protobuf-cpp
version         2.5.0
categories      devel
maintainers     blair
license         BSD
description     Encode data in an efficient yet extensible format.

long_description \
                Google Protocol Buffers are a flexible, efficient, \
                automated mechanism for serializing structured data -- \
                think XML, but smaller, faster, and simpler.  You \
                define how you want your data to be structured once, \
                then you can use special generated source code to \
                easily write and read your structured data to and from \
                a variety of data streams and using a variety of \
                languages.  You can even update your data structure \
                without breaking deployed programs that are compiled \
                against the "old" format.  You specify how you want \
                the information you're serializing to be structured by \
                defining protocol buffer message types in .proto \
                files.  Each protocol buffer message is a small \
                logical record of information, containing a series of \
                name-value pairs.

homepage        http://code.google.com/p/protobuf/
master_sites    googlecode:protobuf

distname        protobuf-${version}
use_bzip2       yes
checksums       sha1   62c10dcdac4b69cc8c6bb19f73db40c264cb2726 \
                sha256 13bfc5ae543cf3aa180ac2485c0bc89495e3ae711fc6fab4f8ffe90dfb4bb677

platforms       darwin

depends_lib     port:zlib

configure.cflags-append         -g
configure.cppflags-append       -g

post-destroot {
        set docdir ${destroot}${prefix}/share/doc/${name}

        xinstall -d -m 755 ${docdir}

        foreach f {CHANGES.txt CONTRIBUTORS.txt COPYING.txt INSTALL.txt README.txt examples} {
                file copy ${worksrcpath}/${f} ${docdir}
        }
}

test.run        yes
test.cmd        "ulimit -c 0; make"
test.target     check
