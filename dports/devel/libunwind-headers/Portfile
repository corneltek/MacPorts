# $Id$

PortSystem              1.0

name                    libunwind-headers
version                 35.1
categories              devel
maintainers             mfeiri openmaintainer
homepage                http://opensource.apple.com/source/libunwind/
master_sites            http://opensource.apple.com/tarballs/libunwind/
license                 APSL-2
supported_archs         noarch
description             A portable way to unwind the call-chain of a program
long_description        Apple's implementation of the libunwind library \
                        provides a source compatible implementation of the \
                        http://www.nongnu.org/libunwind/man/libunwind(3).html \
                        API to unwind a call-chain. Headers only, because the \
                        library is included in the base operating system.

distname                libunwind-${version}
checksums               sha1    86908428aaa0ae6cec5038dc6eeb8b64dbb6cd63 \
                        rmd160  6debb7f1a69d53ecb4512d5c9fa374ef34c4db0e \
                        sha256  d88ecd5c37f0c0c4d18feb9be52e7b2363ef2709cd2eb36e2e205f3226110de1

post-patch { 
    reinplace "s|/usr/local|${prefix}|g" \
            ${worksrcpath}/libunwind.xcodeproj/project.pbxproj
    reinplace "s|/usr|${prefix}|g" \
            ${worksrcpath}/libunwind.xcodeproj/project.pbxproj

    foreach header [glob ${worksrcpath}/*/{,*/}*.h{,pp}] {
        if {${os.major} < 12} {
            reinplace "s|__MAC_10_8|__MAC_NA|g" ${header}
            reinplace "s|AVAILABLE_MAC_OS_X_VERSION_10_\\(.\\)_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8|AVAILABLE_MAC_OS_X_VERSION_10_\\1_AND_LATER|" ${header}
            reinplace "s|AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER|__attribute__((unavailable))|g" ${header}
        }
        if {${os.major} < 11} {
            reinplace "s|__MAC_10_7|__MAC_NA|g" ${header}
            reinplace "s|AVAILABLE_MAC_OS_X_VERSION_10_\\(.\\)_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7|AVAILABLE_MAC_OS_X_VERSION_10_\\1_AND_LATER|" ${header}
            reinplace "s|AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER|__attribute__((unavailable))|g" ${header}
        }
        if {${os.major} < 10} {
            reinplace "s|__MAC_10_6|__MAC_NA|g" ${header}
            reinplace "s|AVAILABLE_MAC_OS_X_VERSION_10_\\(.\\)_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6|AVAILABLE_MAC_OS_X_VERSION_10_\\1_AND_LATER|" ${header}
            reinplace "s|AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER|__attribute__((unavailable))|g" ${header}
        }
        if {${os.major} < 9} {
            reinplace "s|__MAC_10_5|__MAC_NA|g" ${header}
            reinplace "s|AVAILABLE_MAC_OS_X_VERSION_10_\\(.\\)_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5|AVAILABLE_MAC_OS_X_VERSION_10_\\1_AND_LATER|" ${header}
            reinplace "s|AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER|__attribute__((unavailable))|g" ${header}

            reinplace "s|Availability.h|AvailabilityMacros.h|g" ${header}
            reinplace "s|__OSX_AVAILABLE_STARTING(__MAC_NA,.*)|__attribute__((unavailable))|g" ${header}
            reinplace "s|__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_NA,.*)|__attribute__((unavailable))|g" ${header}
            reinplace "s|__OSX_AVAILABLE_STARTING(__MAC_10_\\(\[^,\]*\\),.*)|AVAILABLE_MAC_OS_X_VERSION_10_\\1_AND_LATER|g" ${header}
            reinplace "s|__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_\\(\[^,\]*\\),__MAC_NA,.*)|AVAILABLE_MAC_OS_X_VERSION_10_\\1_AND_LATER|g" ${header}
            reinplace "s|__OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_\\(\[^,\]*\\),__MAC_10_\\(\[^,\]*\\),.*)|AVAILABLE_MAC_OS_X_VERSION_10_\\1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_\\2|g" ${header}
        }
    }

    if {${os.major} < 9} {
        foreach reg {cr ctr eax ebp ebx ecx edi edx eip esi esp lr mq r0 r1 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r2 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r3 r30 r31 r4 r5 r6 r7 r8 r9 rax rbp rbx rcx rdi rdx rip rsi rsp srr0 srr1 vrsave xer} {
            reinplace "s|__${reg}|${reg}|g" ${worksrcpath}/src/Registers.hpp
        }
    }
}

use_configure no
build {}

destroot {
    system "ditto ${worksrcpath}/include ${destroot}${prefix}/include"
    xinstall -d ${destroot}${prefix}/include/libunwind
    eval xinstall [glob ${worksrcpath}/src/*.h{,pp}] ${destroot}${prefix}/include/libunwind

    file delete ${destroot}${prefix}/include/libunwind/libunwind_priv.h
}

livecheck.type          regex
livecheck.regex         "libunwind-(\[\\d.\]+)"
