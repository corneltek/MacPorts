--- contrib/gel/mrc/vpgl/vpgl_affine_camera.txx.orig	2012-06-14 23:55:53.000000000 +0200
+++ contrib/gel/mrc/vpgl/vpgl_affine_camera.txx	2012-06-15 00:01:44.000000000 +0200
@@ -14,7 +14,7 @@
 {
   vnl_matrix_fixed<T,3,4> C( (T)0 );
   C(0,0) = C(1,1) = C(2,3) = (T)1;
-  set_matrix( C );
+  this->set_matrix( C );
 }
 
 
@@ -35,7 +35,7 @@
   vnl_matrix_fixed<T,3,4> C( camera_matrix );
   C = C/C(2,3);
   C(2,0) = (T)0; C(2,1) = (T)0; C(2,2) = (T)0;
-  set_matrix( C );
+  this->set_matrix( C );
 }
 
 
@@ -51,7 +51,7 @@
     C(1,i) = row2(i);
   }
   C(2,3) = (T)1;
-  set_matrix( C );
+  this->set_matrix( C );
  }
 
 // Code for easy instantiation.
--- contrib/gel/mrc/vpgl/vpgl_affine_fundamental_matrix.txx.orig	2012-06-14 23:55:53.000000000 +0200
+++ contrib/gel/mrc/vpgl/vpgl_affine_fundamental_matrix.txx	2012-06-15 00:01:47.000000000 +0200
@@ -16,7 +16,7 @@
   vnl_matrix_fixed<T,3,3> default_matrix( (T)0 );
   default_matrix(0,1) = default_matrix(0,2) = (T)1;
   default_matrix(1,0) = default_matrix(2,0) = -(T)1;
-  set_matrix( default_matrix );
+  this->set_matrix( default_matrix );
 }
 
 
@@ -40,7 +40,7 @@
   fm.put( 2, 2, c );
   fm.put( 1, 2, d );
   fm.put( 0, 2, e );
-  set_matrix( fm );
+  this->set_matrix( fm );
 };
 
 
--- contrib/gel/mrc/vpgl/vpgl_essential_matrix.txx.orig	2012-06-14 23:55:53.000000000 +0200
+++ contrib/gel/mrc/vpgl/vpgl_essential_matrix.txx	2012-06-15 00:02:01.000000000 +0200
@@ -66,7 +66,7 @@
 const vpgl_essential_matrix<T>&
 vpgl_essential_matrix<T>::operator=( const vpgl_essential_matrix<T>& fm )
 {
-  set_matrix( fm.F_ );
+  this->set_matrix( fm.F_ );
   return *this;
 }
 
--- contrib/gel/mrc/vpgl/vpgl_fundamental_matrix.txx.orig	2012-06-14 23:55:53.000000000 +0200
+++ contrib/gel/mrc/vpgl/vpgl_fundamental_matrix.txx	2012-06-15 00:02:09.000000000 +0200
@@ -27,7 +27,7 @@
 {
   vnl_matrix_fixed<T,3,3> default_matrix( (T)0 );
   default_matrix(0,0) = default_matrix(1,1) = (T)1;
-  set_matrix( default_matrix );
+  this->set_matrix( default_matrix );
 }
 
 //---------------------------------
@@ -37,7 +37,7 @@
   const vpgl_fundamental_matrix<T>& other)
   : cached_svd_(NULL)
 {
-  set_matrix( other.F_ );
+  this->set_matrix( other.F_ );
 }
 
 
@@ -46,7 +46,7 @@
 const vpgl_fundamental_matrix<T>&
 vpgl_fundamental_matrix<T>::operator=( const vpgl_fundamental_matrix<T>& fm )
 {
-  set_matrix( fm.F_ );
+  this->set_matrix( fm.F_ );
   return *this;
 }
 
@@ -206,7 +206,7 @@
                                              const vpgl_proj_camera<T>& cl )
 {
   vnl_cross_product_matrix e2x( cl.get_matrix() * cr.svd()->nullvector() );
-  set_matrix( e2x * cl.get_matrix() * cr.svd()->inverse() );
+  this->set_matrix( e2x * cl.get_matrix() * cr.svd()->inverse() );
 }
 
 
--- contrib/gel/mrc/vpgl/vpgl_local_rational_camera.txx.orig	2012-06-14 23:55:53.000000000 +0200
+++ contrib/gel/mrc/vpgl/vpgl_local_rational_camera.txx	2012-06-15 00:04:58.000000000 +0200
@@ -126,16 +126,16 @@
            << "SpecId = \"RPC00B\";\n"
            << "BEGIN_GROUP = IMAGE\n"
            << "\n\n"  // skip errBias and errRand fields
-           << "  lineOffset = " << offset(vpgl_rational_camera<T>::V_INDX) << '\n'
-           << "  sampOffset = " << offset(vpgl_rational_camera<T>::U_INDX) << '\n'
-           << "  latOffset = " << offset(vpgl_rational_camera<T>::Y_INDX) << '\n'
-           << "  longOffset = " << offset(vpgl_rational_camera<T>::X_INDX) << '\n'
-           << "  heightOffset = " << offset(vpgl_rational_camera<T>::Z_INDX) << '\n'
-           << "  lineScale = " << scale(vpgl_rational_camera<T>::V_INDX) << '\n'
-           << "  sampScale = " << scale(vpgl_rational_camera<T>::U_INDX) << '\n'
-           << "  latScale = " << scale(vpgl_rational_camera<T>::Y_INDX) << '\n'
-           << "  longScale = " << scale(vpgl_rational_camera<T>::X_INDX) << '\n'
-           << "  heightScale = " << scale(vpgl_rational_camera<T>::Z_INDX) << '\n';
+           << "  lineOffset = " << this->offset(vpgl_rational_camera<T>::V_INDX) << '\n'
+           << "  sampOffset = " << this->offset(vpgl_rational_camera<T>::U_INDX) << '\n'
+           << "  latOffset = " << this->offset(vpgl_rational_camera<T>::Y_INDX) << '\n'
+           << "  longOffset = " << this->offset(vpgl_rational_camera<T>::X_INDX) << '\n'
+           << "  heightOffset = " << this->offset(vpgl_rational_camera<T>::Z_INDX) << '\n'
+           << "  lineScale = " << this->scale(vpgl_rational_camera<T>::V_INDX) << '\n'
+           << "  sampScale = " << this->scale(vpgl_rational_camera<T>::U_INDX) << '\n'
+           << "  latScale = " << this->scale(vpgl_rational_camera<T>::Y_INDX) << '\n'
+           << "  longScale = " << this->scale(vpgl_rational_camera<T>::X_INDX) << '\n'
+           << "  heightScale = " << this->scale(vpgl_rational_camera<T>::Z_INDX) << '\n';
   vnl_matrix_fixed<double,4,20> coeffs = this->coefficient_matrix();
   file_out << "  lineNumCoef = (";
   for (int i=0; i<20; i++) {
--- contrib/gel/mrc/vpgl/vpgl_proj_camera.txx.orig	2012-06-14 23:55:53.000000000 +0200
+++ contrib/gel/mrc/vpgl/vpgl_proj_camera.txx	2012-06-15 00:02:47.000000000 +0200
@@ -230,7 +230,7 @@
   {
    case 1:
      vsl_b_read(is, Pnew);
-     set_matrix(Pnew);
+     this->set_matrix(Pnew);
     break;
    default:
     vcl_cerr << "I/O ERROR: vpgl_proj_camera::b_read(vsl_b_istream&)\n"
--- contrib/gel/mrc/vpgl/vpgl_rational_camera.txx.orig	2012-06-14 23:55:53.000000000 +0200
+++ contrib/gel/mrc/vpgl/vpgl_rational_camera.txx	2012-06-15 00:05:07.000000000 +0200
@@ -378,16 +378,16 @@
            << "SpecId = \"RPC00B\";\n"
            << "BEGIN_GROUP = IMAGE\n"
            << "\n\n"  // skip errBias and errRand fields
-           << "  lineOffset = " << offset(V_INDX) << '\n'
-           << "  sampOffset = " << offset(U_INDX) << '\n'
-           << "  latOffset = " << offset(Y_INDX) << '\n'
-           << "  longOffset = " << offset(X_INDX) << '\n'
-           << "  heightOffset = " << offset(Z_INDX) << '\n'
-           << "  lineScale = " << scale(V_INDX) << '\n'
-           << "  sampScale = " << scale(U_INDX) << '\n'
-           << "  latScale = " << scale(Y_INDX) << '\n'
-           << "  longScale = " << scale(X_INDX) << '\n'
-           << "  heightScale = " << scale(Z_INDX) << '\n';
+           << "  lineOffset = " << this->offset(V_INDX) << '\n'
+           << "  sampOffset = " << this->offset(U_INDX) << '\n'
+           << "  latOffset = " << this->offset(Y_INDX) << '\n'
+           << "  longOffset = " << this->offset(X_INDX) << '\n'
+           << "  heightOffset = " << this->offset(Z_INDX) << '\n'
+           << "  lineScale = " << this->scale(V_INDX) << '\n'
+           << "  sampScale = " << this->scale(U_INDX) << '\n'
+           << "  latScale = " << this->scale(Y_INDX) << '\n'
+           << "  longScale = " << this->scale(X_INDX) << '\n'
+           << "  heightScale = " << this->scale(Z_INDX) << '\n';
   vnl_matrix_fixed<double,4,20> coeffs = this->coefficient_matrix();
   file_out << "  lineNumCoef = (";
   for (int i=0; i<20; i++) {
--- contrib/gel/mrc/vpgl/vpgl_reg_fundamental_matrix.txx.orig	2012-06-14 23:55:53.000000000 +0200
+++ contrib/gel/mrc/vpgl/vpgl_reg_fundamental_matrix.txx	2012-06-15 00:03:02.000000000 +0200
@@ -16,7 +16,7 @@
   vnl_matrix_fixed<T,3,3> default_matrix( (T)0 );
   default_matrix(0,1) = default_matrix(0,2) = (T)1;
   default_matrix(1,0) = default_matrix(2,0) = -(T)1;
-  set_matrix( default_matrix );
+  this->set_matrix( default_matrix );
 }
 
 
@@ -53,7 +53,7 @@
   fm.put( 1, 2, -ex );
   fm.put( 2, 0, -ey );
   fm.put( 2, 1, ex );
-  set_matrix( fm );
+  this->set_matrix( fm );
   return true;
 }
 
@@ -67,7 +67,7 @@
   fm.put( 1, 2, -b );
   fm.put( 2, 0, -a );
   fm.put( 2, 1, b );
-  set_matrix( fm );
+  this->set_matrix( fm );
 };
 
 
