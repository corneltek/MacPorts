# $Id$

PortSystem              1.0
PortGroup               compiler_blacklist_versions 1.0

name                    libunwind
version                 3.5.0
revision                2
epoch                   1
categories              devel
platforms               darwin
license                 MIT NCSA
maintainers             jeremyhu openmaintainer
description             A version of Apple's libunwind library that is included in libSystem
long_description        Apple's libunwind library (part of libSystem) was released as OSS and is \
                        now stewarded by the LLVM Project.  This version installs headers outside \
                        of the normal filesystem hierarchy in order to not accidentally conflict \
                        with the host implementation that other ports may expect.

homepage                http://blog.llvm.org/2013/10/new-libunwind-implementation-in-libcabi.html

master_sites            http://www.llvm.org/releases/${version}/
dist_subdir             llvm
 
use_xz                  yes
distname                libcxxabi-${version}.src

checksums               rmd160  e4db7c7b07580304c5ae9cf03895d7b6470ecd0b \
                        sha256  53c6be6a2dd2371f6d92c968cb8a59fbe13c6153583025433df067f706bfacd9

use_configure           no

# 3.5 and 3.6 are blacklisted to prevent dependency cycles
compiler.blacklist *gcc* {clang < 100} macports-clang-3.5 macports-clang-3.6

post-extract {
    file copy ${filespath}/Makefile ${build.dir}/Makefile
}

patchfiles \
    libunwind-available.patch \
    libunwind-fallback-x86_64.patch

post-patch {
    if {${os.major} < 9} {
        foreach reg {cr ctr eax ebp ebx ecx edi edx eip esi esp lr mq r0 r1 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r2 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r3 r30 r31 r4 r5 r6 r7 r8 r9 rax rbp rbx rcx rdi rdx rip rsi rsp srr0 srr1 vrsave xer} {
            reinplace "s|__${reg}|${reg}|g" ${build.dir}/Registers.hpp
        }
    }
}

set cxx_stdlibflags {}
if {[string match *clang* ${configure.cxx}]} {
    set cxx_stdlibflags -stdlib=${configure.cxx_stdlib}
}

build.dir       ${worksrcpath}/src/Unwind
destroot.dir    ${build.dir}

subport libunwind-headers {
    supported_archs noarch

    build {}

    destroot.target installhdrs
    destroot.args \
        PREFIX="${prefix}/Developer/SDKs/Darwin${os.major}.sdk/usr"
}

if {${subport} == "${name}"} {
    # Technically not needed, but subports will expect depending on libunwind to pull in the headers
    depends_lib-append port:libunwind-headers

    supported_archs     i386 x86_64
    variant universal   {}

    if {${os.major} < 10} {
        # Leopard's libSystem's libmacho does not contain getsectiondata()

        depends_build-append port:libmacho
        configure.cppflags-append -DUSE_MACPORTS_LIBUNWIND
        configure.ldflags-append -lmacho
    }

    build.args \
        PREFIX="${prefix}" \
        CC="${configure.cc}" \
        CXX="${configure.cxx}" \
        CPPFLAGS="${configure.cppflags} -DNDEBUG" \
        CFLAGS="${configure.cflags} [get_canonical_archflags cc]" \
        CXXFLAGS="${configure.cxxflags} ${cxx_stdlibflags} [get_canonical_archflags cxx]" \
        LDFLAGS="${configure.ldflags} ${cxx_stdlibflags} [get_canonical_archflags ld]" \
        LIBUNWIND_CURRENT_VERSION=${version}

    destroot.target installlibs
    destroot.args \
        PREFIX="${prefix}" \
        STRIP_ON_INSTALL="NO"
}

livecheck.type          none
