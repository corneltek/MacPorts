# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem              1.0
PortGroup               haskellplatform 1.0

haskellplatform.setup   split 0.2.1.1
checksums               rmd160  9a8fc68b99d5db069aa0974445c0a650c0b5e944 \
                        sha256  bf36c149a6613fc6be78ec170ae98a696aae887b82434a1439da10e47823f7ff

license                 BSD
maintainers             cal openmaintainer
platforms               darwin

description             \
    A collection of various methods for splitting lists into parts, akin to the \
    "split" function found in several mainstream languages.
long_description        ${description} \
   Here is its tale:\n\
   Once upon a time the standard Data.List module held no function for splitting \
   a list into parts according to a delimiter. Many a brave lambda-knight strove \
   to add such a function, but their striving was in vain, for Lo, the SupremeÂ \
   Council fell to bickering amongst themselves what was to be the essential \
   nature of the One True Function which could cleave a list in twain (or \
   thrain, or any required number of parts).\n\
   And thus came to pass the split package, comprising divers functions for \
   splitting a list asunder, each according to its nature. And the Supreme \
   Council had no longer any grounds for argument, for the favored method of \
   each was contained therein.\n\
   To get started, see the Data.List.Split module.
