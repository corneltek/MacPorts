# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=portfile:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           active_variants 1.1
PortGroup           compiler_blacklist_versions 1.0

name                rust
version             0.11.0
categories          lang devel
platforms           darwin
supported_archs     i386 x86_64
# https://github.com/mozilla/rust/issues/2024
universal_variant   no
license             {MIT Apache-2} BSD zlib NCSA Permissive
maintainers         g5pw larryv

description         A safe, concurrent, practical language
long_description    Rust is a curly-brace, block-structured expression \
                    language. It visually resembles the C language \
                    family, but differs significantly in syntactic and \
                    semantic details. Its design is oriented toward \
                    concerns of “programming in the large”, that is, of \
                    creating and maintaining boundaries — both abstract \
                    and operational — that preserve large-system \
                    integrity, availability and concurrency.
homepage            http://www.rust-lang.org/

pre-fetch {
    if {${os.platform} eq "darwin" && ${os.major} < 10} {
        ui_error "${name} is only supported on OS X 10.6 Snow Leopard or later."
        return -code error "unsupported platform version"
    }
}

master_sites        http://static.rust-lang.org/dist:dist
distfiles           ${distname}${extract.suffix}:dist
checksums           ${distname}${extract.suffix} \
                        rmd160  09f2fd0f5da3a7851b1984602d2acd0304764618 \
                        sha256  d1b3e36448bf12b8c9289024df416de10774b6d3235d7b1d22b248ef634411ba

# Select the snapshot compiler; see src/snapshots.txt in distribution.
set stage0(distdir)             rust-stage0
set stage0(date)                2014-06-21
set stage0(rev)                 db9af1d
set stage0(platform)        macos-${configure.build_arch}
set stage0(hash)        [expr {${configure.build_arch} eq "i386" ?
                                "3f25b2680efbab16ad074477a19d49dcce475977" :
                                "4a8c2e1b7634d73406bac32a1a97893ec3ed818d"}]
set stage0(distfile)        [join "rust stage0 ${stage0(date)}
                                               ${stage0(rev)}
                                               ${stage0(platform)}
                                               ${stage0(hash)}" -].tar.bz2

master_sites-append         http://static.rust-lang.org/stage0-snapshots:stage0
distfiles-append            ${stage0(distfile)}:stage0
switch ${configure.build_arch} {
    i386 {
        set stage0(rmd160)  7c344247d62a417d703de720ac01881bcbf4fc25
        set stage0(sha256)  42cef980dee52ad2cbd07795df07d3a3e96d013e08ea5a83cd54c266eecab698
    }
    default {
        set stage0(rmd160)  6c7da644b90a567c615d83ff4af99b411a81a419
        set stage0(sha256)  2c63e45ae276812f4429389584cf1eb0a9c0ef182f6f9e15a2731d3e30c03ea8
    }
}
checksums-append            ${stage0(distfile)} \
                                rmd160  ${stage0(rmd160)} \
                                sha256  ${stage0(sha256)}

depends_extract             bin:bzip2:bzip2
extract.only-delete         ${stage0(distfile)}
post-extract {
    set expand "bzip2 -dc ${distpath}/${stage0(distfile)}"
    set untar "${portutil::autoconf::tar_command} -xf -"
    system -W ${workpath} "${expand} | ${untar}"
}

# Only use compilers supported by upstream
# (https://github.com/rust-lang/rust#building-from-source).
compiler.blacklist  {clang < 211} \
                    *dragonegg* \
                    gcc-3.3 {*gcc-4.[0-6]} \
                    macports-clang-2.9

patchfiles          src_etc_local_stage0.sh.diff

post-patch {
    # TODO: Use patches for these when the build system stops changing
    # so much between releases.

    # Pre-release software builds with a ton of warnings.
    reinplace {s/ -Werror//} ${worksrcpath}/mk/platform.mk
}

# Building the bundled LLVM requires Python 2.4-2.7. All supported
# OS X releases have 2.6. (Using MacPorts' LLVM ports fails either
# during build or during testing.)
depends_build           bin:perl:perl5 \
                        bin:python2:python27
depends_skip_archcheck  python27

# The libs for both targets link to libgcc and libstdc++.
if {[regexp {^macports-gcc-(\d+)\.(\d+)$} ${configure.compiler} \
                                            -> major minor]} {
    depends_lib-append      {path:lib/libstdc\\+\\+\\.6\\.dylib:libstdcxx}
    require_active_variants gcc${major}${minor} universal
    require_active_variants {path:lib/libstdc\\+\\+\\.6\\.dylib:libstdcxx} \
                                universal
}

# TODO: Test whether i386 machines can cross-compile for x86_64.
set tgts {i686-apple-darwin x86_64-apple-darwin}

# TODO: Trying to build a cross-compiler breaks Intel 64 builds as
# of 0.11.0. Worth fixing?
#
#configure.pre_args-append       --target=[join $tgts ,]

if {${configure.build_arch} eq "i386"} {
    configure.pre_args-append   --build=[lindex $tgts 0]
} else {
    configure.pre_args-append   --build=[lindex $tgts 1]
}
# TODO: Build docs also, probably in a subport.
configure.args              --disable-docs \
                            --enable-local-rust \
                            --local-rust-root=${workpath}/${stage0(distdir)}

build.type          gnu
build.args          VERBOSE=1 \
                    CC=${configure.cc} \
                    CXX=${configure.cxx} \
                    CPP="${configure.cc} -E"

# TODO: Add path-style dependency on python, whenever test dependencies
# are implemented (#38208). Not critical, since all supported versions
# of OS X come with Python 2.6.
test.run            yes
test.target         check
test.env            VERBOSE=1

destroot.args       VERBOSE=1
post-destroot {
    # Install vim files
    foreach dir {after/syntax ftdetect indent syntax} {
        xinstall -d ${destroot}${prefix}/share/vim/vimfiles/${dir}
        xinstall -m 644 ${worksrcpath}/src/etc/vim/${dir}/rust.vim \
            ${destroot}${prefix}/share/vim/vimfiles/${dir}
    }
    xinstall -d ${destroot}${prefix}/share/${name}
    xinstall -m 644 ${worksrcpath}/src/etc/ctags.rust \
        ${destroot}${prefix}/share/${name}
}

livecheck.type      regex
livecheck.url       ${homepage}/install.html
livecheck.regex     {dist/rust-(\d\.\d)}
