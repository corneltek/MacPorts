# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=portfile:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           active_variants 1.1
PortGroup           compiler_blacklist_versions 1.0
PortGroup           github 1.0

github.setup        rust-lang rust 3f5d0b5b6cd4994c719d57a778697124348a4c1c
version             0.12.0-pre-20140819-3f5d0b5
categories          lang devel
platforms           darwin
supported_archs     i386 x86_64
# https://github.com/mozilla/rust/issues/2024
universal_variant   no
license             {MIT Apache-2} BSD zlib NCSA Permissive
maintainers         g5pw larryv

description         A safe, concurrent, practical language
long_description    Rust is a curly-brace, block-structured expression \
                    language. It visually resembles the C language \
                    family, but differs significantly in syntactic and \
                    semantic details. Its design is oriented toward \
                    concerns of “programming in the large”, that is, of \
                    creating and maintaining boundaries — both abstract \
                    and operational — that preserve large-system \
                    integrity, availability and concurrency.
homepage            http://www.rust-lang.org/

pre-fetch {
    if {${os.platform} eq "darwin" && ${os.major} < 11} {
        ui_error "${name} is only supported on OS X 10.7 Lion or later."
        return -code error "unsupported platform version"
    }
}

worksrcdir              ${github.project}

# To take advantage of distfile mirroring and checksumming for the
# snapshot compiler, we let base treat it as the distfile and deal with
# the actual Rust source "manually".

depends_fetch-append    bin:git:git
pre-fetch {
    # Clone repository.
    set opts "--quiet --no-checkout --single-branch"
    set cmdstring "${git.cmd} clone ${opts} ${git.url} \"${worksrcpath}\" 2>&1"
    ui_debug "Executing ${cmdstring}"
    if {[catch {system ${cmdstring}} -]} {
        return -code error [msgcat::mc "Git clone failed"]
    }
    # Check out branch.
    set cmdstring "${git.cmd} checkout --quiet ${git.branch} 2>&1"
    ui_debug "Executing $cmdstring"
    if {[catch {system -W ${worksrcpath} ${cmdstring}} -]} {
        return -code error [msgcat::mc "Git checkout failed"]
    }
    # Update submodules.
    set cmdstring "${git.cmd} submodule update --init 2>&1"
    ui_debug "Executing $cmdstring"
    if {[catch {system -W ${worksrcpath} ${cmdstring}} -]} {
        return -code error [msgcat::mc "Git submodule update failed"]
    }
}

# Download the snapshot compiler; see src/snapshots.txt in the Rust
# distribution.
master_sites            http://static.rust-lang.org/stage0-snapshots
set stage0(distdir)     rust-stage0
set stage0(date)        2014-08-17
set stage0(rev)         a86d9ad
set stage0(platform)    macos-${configure.build_arch}
set stage0(hash)        [expr {${configure.build_arch} eq "i386" ?
                                "2f1e849bab50ce2b92f5eb0ef5a63954904cac97" :
                                "977a8e496dd4ccf79c86a93a1794e65213d76f96"}]
use_bzip2               yes
distname                [join "rust stage0 ${stage0(date)}
                                           ${stage0(rev)}
                                           ${stage0(platform)}
                                           ${stage0(hash)}" -]
switch ${configure.build_arch} {
    i386    {checksums  rmd160  c2502d14c2e3103c235469bcc15edee8b34ff60a \
                        sha256  8dd1364d455b8e833909abcb71e2d428c860bd951347d198f79da1db17aba282}
    default {checksums  rmd160  c2eac09b43eacb8eae7e6bfcea7cdc50d3893978 \
                        sha256  bdece4f9c73c0d66604b1253da879acdfb5bb2b081a45adfc51d6b386731e603}
}

# Only use compilers supported by upstream
# (https://github.com/rust-lang/rust#building-from-source).
compiler.blacklist  {clang < 211} \
                    *dragonegg* \
                    gcc-3.3 {*gcc-4.[0-6]} \
                    macports-clang-2.9

post-patch {
    # Stop build from treating compiler warnings as errors.
    reinplace {s/ -Werror//g} mk/platform.mk
}

# Building the bundled LLVM requires Python 2.4-2.7. All supported
# OS X releases have 2.6. (Using MacPorts' LLVM ports fails either
# during build or during testing.)
depends_build           bin:perl:perl5 \
                        bin:python2.6:python27
depends_skip_archcheck  python27

# The libs for both targets link to libgcc and libstdc++.
if {[regexp {^macports-gcc-(\d+)\.(\d+)$} ${configure.compiler} \
                                            -> major minor]} {
    depends_lib-append      {path:lib/libstdc\\+\\+\\.6\\.dylib:libstdcxx}
    require_active_variants gcc${major}${minor} universal
    require_active_variants {path:lib/libstdc\\+\\+\\.6\\.dylib:libstdcxx} \
                                universal
}

# TODO: Test whether i386 machines can cross-compile for x86_64.
set tgts {i686-apple-darwin x86_64-apple-darwin}

# TODO: Trying to build a cross-compiler breaks Intel 64 builds as
# of 0.11.0. Worth fixing?
#
#configure.pre_args-append       --target=[join $tgts ,]

if {${configure.build_arch} eq "i386"} {
    configure.pre_args-append   --build=[lindex $tgts 0]
} else {
    configure.pre_args-append   --build=[lindex $tgts 1]
}
# We need to use "--enable-rpath" as of a0546de, otherwise the build
# produces improperly linked binaries.
# (https://github.com/rust-lang/rust/issues/11747)
# TODO: Build docs also, probably in a subport.
configure.args      --disable-docs \
                    --enable-local-rust \
                    --enable-rpath \
                    --local-rust-root=${workpath}/${stage0(distdir)}

build.type          gnu
build.args          VERBOSE=1 \
                    CC=${configure.cc} \
                    CXX=${configure.cxx} \
                    CPP="${configure.cc} -E"

# TODO: Add path-style dependency on python, whenever test dependencies
# are implemented (#38208). Not critical, since all supported versions
# of OS X come with Python 2.6.
test.run            yes
test.target         check
test.env            VERBOSE=1

destroot.args       VERBOSE=1
post-destroot {
    # Install vim files
    foreach dir {after/syntax ftdetect indent syntax} {
        xinstall -d ${destroot}${prefix}/share/vim/vimfiles/${dir}
        xinstall -m 644 ${worksrcpath}/src/etc/vim/${dir}/rust.vim \
            ${destroot}${prefix}/share/vim/vimfiles/${dir}
    }
    xinstall -d ${destroot}${prefix}/share/${name}
    xinstall -m 644 ${worksrcpath}/src/etc/ctags.rust \
        ${destroot}${prefix}/share/${name}
}

livecheck.type      regex
livecheck.url       ${homepage}/install.html
livecheck.regex     {dist/rust-(\d\.\d)}
