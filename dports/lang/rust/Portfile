# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=portfile:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           compiler_blacklist_versions 1.0

name                rust
version             0.5
revision            4
categories          lang devel
platforms           darwin
supported_archs     i386 x86_64
# https://github.com/mozilla/rust/issues/2024
universal_variant   no
license             {MIT Apache-2} BSD zlib NCSA Permissive
maintainers         g5pw larryv

description         A safe, concurrent, practical language
long_description    Rust is a curly-brace, block-structured expression \
                    language. It visually resembles the C language \
                    family, but differs significantly in syntactic and \
                    semantic details. Its design is oriented toward \
                    concerns of “programming in the large”, that is, of \
                    creating and maintaining boundaries — both abstract \
                    and operational — that preserve large-system \
                    integrity, availability and concurrency.
homepage            http://www.rust-lang.org/

pre-fetch {
    if {${os.platform} == "darwin" && ${os.major} < 10} {
        ui_error "${name} is only supported on OS X 10.6 Snow Leopard or later."
        return -code error "unsupported platform version"
    }
}

master_sites        http://dl.rust-lang.org/dist:dist
distfiles           ${distname}${extract.suffix}:dist
checksums           ${distname}${extract.suffix} \
                        rmd160  b4988da7be984aa1337f4076e96e6d0c72e3170d \
                        sha256  d326d22707f0562d669c11efbc33ae812ddbf76ab78f07087fc5beb095a8928a


# Select the snapshot compiler; see src/snapshots.txt in distribution.
set stage0(distdir)             rust-stage0
set stage0(date)                2012-12-19
set stage0(rev)                 8554d5e
platform darwin i386 {
    set stage0(platform)        macos-${configure.build_arch}
    switch ${configure.build_arch} {
        x86_64 {
            set stage0(hash)    e4564933f11b17f7dbd25b61032233693da21dc5
            set stage0(rmd160)  3d966bd2d17e3f2c74ed78f3674439c89d5a16ee
            set stage0(sha256)  a2e287a683128e2e213e11c5b9f92e5e628eb63163591d61523549deb2e21f7d
        }
        i386 {
            set stage0(hash)    151ff211c01f0b7a1895b93ff0bc021bf1472346
            set stage0(rmd160)  300b17458073a8704817821bd5406189a264f765
            set stage0(sha256)  5e598d4c45ee2dd8b7f2b69d92f60d16e57991e796d76ca255a612357a5e48e0
        }
    }
    set stage0(distfile)        [join "rust stage0 ${stage0(date)}
                                                   ${stage0(rev)}
                                                   ${stage0(platform)}
                                                   ${stage0(hash)}" -].tar.bz2

    master_sites-append         http://static.rust-lang.org/stage0-snapshots:stage0
    distfiles-append            ${stage0(distfile)}:stage0
    checksums-append            ${stage0(distfile)} \
                                    rmd160  ${stage0(rmd160)} \
                                    sha256  ${stage0(sha256)}

    depends_extract             bin:bzip2:bzip2
    extract.only-delete         ${stage0(distfile)}
    post-extract {
        set expand "bzip2 -dc ${distpath}/${stage0(distfile)}"
        set untar "${portutil::autoconf::tar_command} -xf -"
        system -W ${workpath} "${expand} | ${untar}"
    }
}


# Upstream only supports gcc 4.4 and newer and clang based on LLVM
# 3.0svn and newer. The clang restriction could probably be tighter;
# clang-77 is Apple Clang 1.7 (LLVM 2.9svn) from Xcode 3.2.6.
compiler.blacklist  gcc-3.3 gcc-4.0 gcc-4.2 \
                    apple-gcc-4.0 apple-gcc-4.2 \
                    llvm-gcc-4.2 macports-llvm-gcc-4.2 \
                    macports-gcc-4.2 macports-gcc-4.3 \
                    {clang <= 77} macports-clang-2.9
# TODO: Remove when base fallback lists are updated (2.2?).
compiler.fallback-append    macports-clang-3.2

patch.pre_args          -p1
patchfiles              patch-configure.diff \
                        patch-src-etc-local_stage0.sh.diff \
                        patch-src-librusti-rusti.rc.diff \
                        patch-src-rustllvm-RustWrapper.cpp.diff
# Non-Apple GCC - and, by extension, DragonEgg - accepts neither
# -Wnewline-eof (https://github.com/mozilla/rust/issues/4783)
# nor -arch (until 4.7).
if {[string first clang ${configure.compiler}] == -1} {
    patchfiles-append   patch-non_apple_gcc.diff
}

# Using MacPorts' LLVM currently results in a stage2 compiler that
# segfaults during the build; until we fix this, we need Python. The
# weird dependency is to accommodate older systems that only have Python
# 2.6; if we have to provide our own, we'd rather install 2.7. The build
# itself will detect either.
depends_build           bin:perl:perl5 \
                        bin:python2.6:python27
depends_skip_archcheck  python27

# TODO: Remove when automatic compiler dependencies are released (2.2?).
if {[info exists portconfigure::compiler_name_map(${configure.compiler})]} {
    set compiler $portconfigure::compiler_name_map(${configure.compiler})
    if {[string first macports-gcc- ${configure.compiler}] == 0} {
        depends_lib-append              port:${compiler}
    } else {
        depends_build-append            port:${compiler}
    }
    if {[portconfigure::arch_flag_supported ${configure.compiler}]} {
        depends_skip_archcheck-append   ${compiler}
    }
}

platform darwin i386 {
    set cpu [string map {i386 i686} ${configure.build_arch}]
    configure.pre_args-append --host-triple=${cpu}-apple-darwin${os.major}
}
configure.args      --disable-docs \
                    --enable-local-rust \
                    --local-rust-root=${workpath}/${stage0(distdir)}
if {[string first clang ${configure.compiler}] != -1} {
    configure.args-append   --enable-clang
}

build.type          gnu
build.args          VERBOSE=1 \
                    CC=${configure.cc} \
                    CXX=${configure.cxx} \
                    CPP="${configure.cc} -E"

test.run            yes
test.target         check
test.env            VERBOSE=1

destroot.args       VERBOSE=1
post-destroot {
    foreach dir {after/syntax ftdetect indent syntax} {
        xinstall -d ${destroot}${prefix}/share/vim/vimfiles/${dir}
        xinstall -m 644 ${worksrcpath}/src/etc/vim/${dir}/rust.vim \
            ${destroot}${prefix}/share/vim/vimfiles/${dir}
    }
    xinstall -d ${destroot}${prefix}/share/${name}
    xinstall -m 644 ${worksrcpath}/src/etc/ctags.rust \
        ${destroot}${prefix}/share/${name}

    # Remove zero-byte libraries until
    # https://github.com/mozilla/rust/issues/4468 is resolved.
    delete ${destroot}${prefix}/lib/libcargo.dylib \
        ${destroot}${prefix}/lib/librustc.dylib \
        ${destroot}${prefix}/lib/librustdoc.dylib \
        ${destroot}${prefix}/lib/librusti.dylib
}

livecheck.type      regex
livecheck.url       ${homepage}
livecheck.regex     {/release-(\d\.\d)/}
