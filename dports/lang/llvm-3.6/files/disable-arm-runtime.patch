Index: llvm-3.6svn/projects/compiler-rt/make/platform/clang_darwin.mk
===================================================================
--- llvm-3.6svn.orig/projects/compiler-rt/make/platform/clang_darwin.mk
+++ llvm-3.6svn/projects/compiler-rt/make/platform/clang_darwin.mk
@@ -101,7 +101,6 @@ UniversalArchs.cc_kext += $(call CheckAr
 # Configuration for use with kernel/kexts for iOS 5.0 and earlier (which used 
 # a different code generation strategy). Note: the x86_64 slice is unused but
 # it avoids build problems (see pr14013).
-Configs += cc_kext_ios5
 UniversalArchs.cc_kext_ios5 := $(call CheckArches,x86_64,cc_kext_ios5,$(IOSSIM_SDK))
 UniversalArchs.cc_kext_ios5 += $(call CheckArches,armv7,cc_kext_ios5,$(IOS_SDK))
 
@@ -133,6 +132,8 @@ UniversalArchs.ubsan_osx := $(call Check
 #UniversalArchs.profile_ios := $(filter-out armv7, $(UniversalArchs.profile_ios))
 #endif
 
+RC_SUPPORTED_ARCHS := ppc i386 x86_64 x86_64h
+
 # If RC_SUPPORTED_ARCHS is defined, treat it as a list of the architectures we
 # are intended to support and limit what we try to build to that.
 ifneq ($(RC_SUPPORTED_ARCHS),)
Index: llvm-3.6svn/tools/clang/runtime/compiler-rt/Makefile
===================================================================
--- llvm-3.6svn.orig/tools/clang/runtime/compiler-rt/Makefile
+++ llvm-3.6svn/tools/clang/runtime/compiler-rt/Makefile
@@ -99,10 +99,6 @@ ifneq ($(IOS_SDK)$(IOSSIM_SDK),)
 RuntimeLibrary.darwin.Configs += ios.a profile_ios.a
 endif
 
-ifneq ($(IOS_SDK),)
-RuntimeLibrary.darwin.Configs += cc_kext_ios5.a
-endif
-
 ifneq ($(IOSSIM_SDK),)
 RuntimeLibrary.darwin.Configs += asan_iossim_dynamic.dylib
 endif
