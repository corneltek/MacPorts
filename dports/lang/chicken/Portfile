# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem              1.0

name                    chicken
version                 4.8.0.2
categories              lang scheme
license                 BSD public-domain
maintainers             gmail.com:arto.bendiken gmail.com:ivan.g.raikov
description             Compiler for the Scheme programming language
long_description        Chicken produces portable, efficient C, supports \
                        almost all of the current Scheme language standard, \
                        the Revised5 Report on the Algorithmic Language \
                        Scheme (R5RS), and includes many enhancements and \
                        extensions.
homepage                http://www.call-with-current-continuation.org/
platforms               darwin

set branch [join [lrange [split ${version} .] 0 2] .]
master_sites            http://code.call-cc.org/releases/${branch}

checksums               rmd160  7d92c10315f3f9c14003d6789a6ebdc4c0f78b25 \
                        sha256  bf933f8cc4586b8b468c9abb8ec079a9f109ea20b5f12a1af2776f694e14791d

patchfiles              patch-Makefile.macosx.diff \
                        patch-rules.make.diff

use_configure           no

# Upstream explicitly requires GNU make.
build.type              gnu
build.args              C_COMPILER=${configure.cc} \
                        CXX_COMPILER=${configure.cxx} \
                        PLATFORM=macosx \
                        PREFIX=${prefix}
# Upstream does not support parallel builds.
use_parallel_build      no

# Restrict universal variant to Tiger and Leopard because upstream only
# supports i386/ppc universal binaries.
if {${os.platform} == "darwin" && ${os.major} < 10} {
    variant universal {}
}

# Force build system to respect build_arch and arch/SDK flags.
if {[variant_isset universal]} {
    if {${os.major} == 9} {
        macosx_deployment_target    10.4
    }
    set sdk_ccflags "-isysroot ${configure.sdkroot}"
    set sdk_ldflags "-Wl,-syslibroot,${configure.sdkroot}"
    build.args-append   ARCH=universal \
                        CFLAGS="[get_canonical_archflags cc] ${sdk_ccflags}" \
                        LDFLAGS="[get_canonical_archflags ld] ${sdk_ldflags}"
} else {
    switch -glob ${configure.build_arch} {
        i386    { build.args-append ARCH=x86 }
        x86_64  { build.args-append ARCH=x86-64 }
        ppc* {
            if {${os.platform} == "darwin"} {
                build.args-append   ARCH=ppc.darwin
            } else {
                build.args-append   ARCH=ppc.sysv
            }
        }
    }
    build.args-append   CFLAGS="[get_canonical_archflags cc]" \
                        LDFLAGS="[get_canonical_archflags ld]"
}

destroot.args           ${build.args}

livecheck.type          regex
livecheck.url           http://code.call-cc.org/releases/current/
livecheck.regex         {chicken-([0-9.]+)\.tar\.gz}
