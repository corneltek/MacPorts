--- setupext.py	2012-08-08 22:08:49.000000000 -0500
+++ setupext.py	2012-08-08 22:26:48.000000000 -0500
@@ -58,15 +58,7 @@
     'linux3' : ['/usr/local', '/usr'],
     'linux'  : ['/usr/local', '/usr',],
     'cygwin' : ['/usr/local', '/usr',],
-    '_darwin' : ['/sw/lib/freetype2', '/sw/lib/freetype219', '/usr/local',
-                '/usr', '/sw'],
-    # it appears builds with darwin are broken because of all the
-    # different flags the deps can be compile with, so I am pushing
-    # people to :
-    #   make -f make.osx fetch deps mpl_build mpl_install
-
-    'darwin' : [],
-
+    'darwin' : ['@@MPORTS_PREFIX@@'],
     'freebsd4' : ['/usr/local', '/usr'],
     'freebsd5' : ['/usr/local', '/usr'],
     'freebsd6' : ['/usr/local', '/usr'],
@@ -371,6 +363,7 @@
                      [os.path.join(p, 'lib64')     for p in basedirlist ] )
 
     module.include_dirs.extend(incdirs)
+    module.include_dirs.extend(['@@MPORTS_PREFIX@@/include/python@@PYTHON_BRANCH@@'])
     module.include_dirs.append('.')
     module.library_dirs.extend(libdirs)
 
@@ -389,33 +382,43 @@
     return '.'.join(temp)
 
 def check_for_qt():
-    try:
-        import pyqtconfig
-    except ImportError:
+    MP_QT=False
+    if MP_QT:
+        try:
+            import pyqtconfig
+        except ImportError:
+            print_status("Qt", "no")
+            return False
+        else:
+            try:
+                qt_version = pyqtconfig.Configuration().qt_version
+                qt_version = convert_qt_version(qt_version)
+            except AttributeError:
+                qt_version = "<unknown>"
+            print_status("Qt", "Qt: %s, PyQt: %s" %
+                         (qt_version,
+                          pyqtconfig.Configuration().pyqt_version_str))
+            return True
+    else:
         print_status("Qt", "no")
         return False
-    else:
-        try:
-            qt_version = pyqtconfig.Configuration().qt_version
-            qt_version = convert_qt_version(qt_version)
-        except AttributeError:
-            qt_version = "<unknown>"
-        print_status("Qt", "Qt: %s, PyQt: %s" %
-                     (qt_version,
-                      pyqtconfig.Configuration().pyqt_version_str))
-        return True
 
 def check_for_qt4():
-    try:
-        from PyQt4 import pyqtconfig
-    except ImportError:
+    MP_QT4=False
+    if MP_QT4:
+        try:
+            from PyQt4 import pyqtconfig
+        except ImportError:
+            print_status("Qt4", "no")
+            return False
+        else:
+            print_status("Qt4", "Qt: %s, PyQt4: %s" %
+                         (convert_qt_version(pyqtconfig.Configuration().qt_version),
+                          pyqtconfig.Configuration().pyqt_version_str))
+            return True
+    else:
         print_status("Qt4", "no")
         return False
-    else:
-        print_status("Qt4", "Qt: %s, PyQt4: %s" %
-                     (convert_qt_version(pyqtconfig.Configuration().qt_version),
-                      pyqtconfig.Configuration().pyqt_version_str))
-        return True
 
 def check_for_pyside():
     try:
@@ -430,14 +433,19 @@
         return True
 
 def check_for_cairo():
-    try:
-        import cairo
-    except ImportError:
+    MP_Cairo=False
+    if MP_Cairo:
+        try:
+            import cairo
+        except ImportError:
+            print_status("Cairo", "no")
+            return False
+        else:
+            print_status("Cairo", cairo.version)
+            return True
+    else:
         print_status("Cairo", "no")
         return False
-    else:
-        print_status("Cairo", cairo.version)
-        return True
 
 def check_for_datetime():
     try:
@@ -496,36 +504,51 @@
             return False
 
 def check_for_dvipng():
-    try:
-        stdin, stdout = run_child_process('dvipng -version')
-        print_status("dvipng", stdout.readlines()[1].decode().split()[-1])
-        return True
-    except (IndexError, ValueError):
+    MP_LaTeX=False
+    if MP_LaTeX:
+        try:
+            stdin, stdout = run_child_process('dvipng -version')
+            print_status("dvipng", stdout.readlines()[1].decode().split()[-1])
+            return True
+        except (IndexError, ValueError):
+            print_status("dvipng", "no")
+            return False
+    else:
         print_status("dvipng", "no")
         return False
 
 def check_for_ghostscript():
-    try:
-        if sys.platform == 'win32':
-            command = 'gswin32c --version'
-        else:
-            command = 'gs --version'
-        stdin, stdout = run_child_process(command)
-        print_status("ghostscript", stdout.read().decode()[:-1])
-        return True
-    except (IndexError, ValueError):
+    MP_GhostScript=False
+    if MP_GhostScript:
+        try:
+            if sys.platform == 'win32':
+                command = 'gswin32c --version'
+            else:
+                command = 'gs --version'
+            stdin, stdout = run_child_process(command)
+            print_status("ghostscript", stdout.read().decode()[:-1])
+            return True
+        except (IndexError, ValueError):
+            print_status("ghostscript", "no")
+            return False
+    else:
         print_status("ghostscript", "no")
         return False
 
 def check_for_latex():
-    try:
-        stdin, stdout = run_child_process('latex -version')
-        line = stdout.readlines()[0].decode()
-        pattern = '(3\.1\d+)|(MiKTeX \d+.\d+)'
-        match = re.search(pattern, line)
-        print_status("latex", match.group(0))
-        return True
-    except (IndexError, ValueError, AttributeError):
+    MP_LaTeX=False
+    if MP_LaTeX:
+        try:
+            stdin, stdout = run_child_process('latex -version')
+            line = stdout.readlines()[0].decode()
+            pattern = '(3\.1\d+)|(MiKTeX \d+.\d+)'
+            match = re.search(pattern, line)
+            print_status("latex", match.group(0))
+            return True
+        except (IndexError, ValueError, AttributeError):
+            print_status("latex", "no")
+            return False
+    else:
         print_status("latex", "no")
         return False
 
@@ -926,10 +949,10 @@
     return tcl_lib, tcl_inc, 'tcl' + tk_ver, tk_lib, tk_inc, 'tk' + tk_ver
 
 def hardcoded_tcl_config():
-    tcl_inc = "/usr/local/include"
-    tk_inc = "/usr/local/include"
-    tcl_lib = "/usr/local/lib"
-    tk_lib = "/usr/local/lib"
+    tcl_inc = "@@MPORTS_PREFIX@@/include"
+    tk_inc = "@@MPORTS_PREFIX@@/include"
+    tcl_lib = "@@MPORTS_PREFIX@@/lib"
+    tk_lib = "@@MPORTS_PREFIX@@/lib"
     return tcl_lib, tcl_inc, 'tcl', tk_lib, tk_inc, 'tk'
 
 def add_tk_flags(module):
@@ -950,52 +973,6 @@
             raise RuntimeError('No tk/win32 support for this python version yet')
         module.library_dirs.extend([os.path.join(sys.prefix, 'dlls')])
 
-    elif sys.platform == 'darwin':
-        # this config section lifted directly from Imaging - thanks to
-        # the effbot!
-
-        # First test for a MacOSX/darwin framework install
-        from os.path import join, exists
-        framework_dirs = [
-            join(os.getenv('HOME'), '/Library/Frameworks'),
-            '/Library/Frameworks',
-            '/System/Library/Frameworks/',
-        ]
-
-        # Find the directory that contains the Tcl.framework and Tk.framework
-        # bundles.
-        # XXX distutils should support -F!
-        tk_framework_found = 0
-        for F in framework_dirs:
-            # both Tcl.framework and Tk.framework should be present
-            for fw in 'Tcl', 'Tk':
-                if not exists(join(F, fw + '.framework')):
-                    break
-            else:
-                # ok, F is now directory with both frameworks. Continure
-                # building
-                tk_framework_found = 1
-                break
-        if tk_framework_found:
-            # For 8.4a2, we must add -I options that point inside the Tcl and Tk
-            # frameworks. In later release we should hopefully be able to pass
-            # the -F option to gcc, which specifies a framework lookup path.
-            #
-            tk_include_dirs = [
-                join(F, fw + '.framework', H)
-                for fw in ('Tcl', 'Tk')
-                for H in ('Headers', 'Versions/Current/PrivateHeaders')
-            ]
-
-            # For 8.4a2, the X11 headers are not included. Rather than include a
-            # complicated search, this is a hard-coded path. It could bail out
-            # if X11 libs are not found...
-            # tk_include_dirs.append('/usr/X11R6/include')
-            frameworks = ['-framework', 'Tcl', '-framework', 'Tk']
-            module.include_dirs.extend(tk_include_dirs)
-            module.extra_link_args.extend(frameworks)
-            module.extra_compile_args.extend(frameworks)
-
     # you're still here? ok we'll try it this way...
     else:
         success = False
