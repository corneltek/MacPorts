--- config_darwin.py	Sat Oct 18 07:36:51 2003
+++ config_darwin.py.new	Fri Jan 16 14:08:29 2004
@@ -1,57 +1,97 @@
-"""Config on Darwin w/ frameworks"""
+"""Config on Unix"""
 
 import os, sys, string
 from glob import glob
 from distutils.sysconfig import get_python_inc
 
+configcommand = os.environ.get('SDL_CONFIG', 'sdl-config',)
+configcommand = configcommand + ' --version --cflags --libs'
+localbase = os.environ.get('LOCALBASE', '') #do we still need this?
+localbase = '/opt/local'
+
+
+
+def confirm(message):
+    "ask a yes/no question, return result"
+    reply = raw_input('\n' + message + ' [Y/n]:')
+    if reply and string.lower(reply[0]) == 'n':
+        return 0
+    return 1
+
+
+
+
+class DependencyProg:
+    def __init__(self, name, envname, exename, minver, defaultlib):
+        self.name = name
+        command = os.environ.get(envname, exename)
+        self.lib_dir = ''
+        self.inc_dir = ''
+        self.lib = ''
+        self.cflags = ''
+        try:
+            config = os.popen(command + ' --version --cflags --libs').readlines()
+            flags = string.split(string.join(config[1:], ' '))
+            self.ver = string.strip(config[0])
+            if minver and self.ver < minver:
+                err= 'WARNING: requires %s version %s (%s found)' % (self.name, self.ver, minver)
+                raise ValueError, err
+            self.found = 1
+            self.cflags = ''
+            for f in flags:
+                #if f[:2] == '-L':
+                #    self.lib_dir += f[2:] + ' '
+                #elif f[:2] == 'I':
+                #    self.inc_dir += f[2:] + ' '
+                if f[:2] in ('-l', '-D', '-I', '-L'):
+                    self.cflags += f + ' '
+                elif f[:3] == '-Wl':
+                    self.cflags += '-Xlinker ' + f + ' '
+        except:
+            print 'WARNING: "%s" failed!' % command    
+            self.found = 0
+            self.ver = '0'
+            self.lib = defaultlib
+
+    def configure(self, incdirs, libdir):
+        if self.found:
+            print self.name + '        '[len(self.name):] + ': found ' + self.ver
+            self.found = 1
+        else:
+            print self.name + '        '[len(self.name):] + ': not found'
+
+                    
 class Dependency:
-    libext = '.dylib'
     def __init__(self, name, checkhead, checklib, lib):
         self.name = name
         self.inc_dir = None
         self.lib_dir = None
         self.lib = lib
         self.found = 0
-        self.checklib = checklib+self.libext
+        self.checklib = checklib
         self.checkhead = checkhead
         self.cflags = ''
-
+    
     def configure(self, incdirs, libdirs):
         incname = self.checkhead
         libnames = self.checklib, string.lower(self.name)
+        
         for dir in incdirs:
             path = os.path.join(dir, incname)
             if os.path.isfile(path):
                 self.inc_dir = dir
-                break
         for dir in libdirs:
             for name in libnames:
                 path = os.path.join(dir, name)
                 if os.path.isfile(path):
                     self.lib_dir = dir
-                    break
+                
         if self.lib_dir and self.inc_dir:
             print self.name + '        '[len(self.name):] + ': found'
             self.found = 1
         else:
             print self.name + '        '[len(self.name):] + ': not found'
 
-class FrameworkDependency(Dependency):
-    def configure(self, incdirs, libdirs):
-      for n in '/Library/Frameworks/','$HOME/Library/Frameworks/','/System/Library/Frameworks/':
-        n = os.path.expandvars(n)
-        if os.path.isfile(n+self.lib+'.framework/Versions/Current/'+self.lib):
-          print 'Framework '+self.lib+' found'
-          self.found = 1
-          self.inc_dir = n+self.lib+'.framework/Versions/Current/Headers'
-          self.cflags = '-Xlinker "-framework" -Xlinker "'+self.lib+'"'
-          self.cflags += ' -Xlinker "-F'+n+'"'
-          self.origlib = self.lib
-          self.lib = ''
-          return
-      print 'Framework '+self.lib+' not found'
-
-
 class DependencyPython:
     def __init__(self, name, module, header):
         self.name = name
@@ -63,7 +103,7 @@
         self.ver = '0'
         self.module = module
         self.header = header
-
+ 
     def configure(self, incdirs, libdirs):
         self.found = 1
         if self.module:
@@ -82,30 +122,52 @@
         else:
             print self.name + '        '[len(self.name):] + ': not found'
 
-DEPS = [
-    FrameworkDependency('SDL', 'SDL.h', 'libSDL', 'SDL'),
-    FrameworkDependency('FONT', 'SDL_ttf.h', 'libSDL_ttf', 'SDL_ttf'),
-    FrameworkDependency('IMAGE', 'SDL_image.h', 'libSDL_image', 'SDL_image'),
-    FrameworkDependency('MIXER', 'SDL_mixer.h', 'libSDL_mixer', 'SDL_mixer'),
-    FrameworkDependency('SMPEG', 'smpeg.h', 'libsmpeg', 'smpeg'),
-    DependencyPython('NUMERIC', 'Numeric', 'Numeric/arrayobject.h')
-]
 
 
-from distutils.util import split_quoted
-def main():
-    global DEPS
+sdl_lib_name = 'SDL'
+if sys.platform.find('bsd') != -1:
+    sdl_lib_name = 'SDL-1.2'
+
 
-    print 'Hunting dependencies...'
-    incdirs = []
-    libdirs = []
-    newconfig = []
+def main():
+    print '\nHunting dependencies...'
+    DEPS = [
+        DependencyProg('SDL', 'SDL_CONFIG', 'sdl-config', '1.2', 'sdl'),
+        Dependency('FONT', 'SDL_ttf.h', 'libSDL_ttf.dylib', 'SDL_ttf'),
+        Dependency('IMAGE', 'SDL_image.h', 'libSDL_image.dylib', 'SDL_image'),
+        Dependency('MIXER', 'SDL_mixer.h', 'libSDL_mixer.dylib', 'SDL_mixer'),
+        DependencyProg('SMPEG', 'SMPEG_CONFIG', 'smpeg-config', '0.4.4', 'smpeg'),
+        DependencyPython('NUMERIC', 'Numeric', 'Numeric/arrayobject.h')
+    ]
+
+    if not DEPS[0].found:
+        print 'Unable to run "sdl-config". Please make sure a development version of SDL is installed.'
+        raise SystemExit
+		
+
+    if localbase: #unneeded?
+        incdirs = [localbase + '/include/SDL']
+        libdirs = [localbase + '/lib']
+    else:
+        incdirs = []
+        libdirs = []
+        for arg in string.split(DEPS[0].cflags):
+            if arg[:2] == '-I':
+                incdirs.append(arg[2:])
+            elif arg[:2] == '-L':
+                libdirs.append(arg[2:])
     for d in DEPS:
-      d.configure(incdirs, libdirs)
-    DEPS[0].cflags = '-Ddarwin '+ DEPS[0].cflags
-    return DEPS
+        d.configure(incdirs, libdirs)
 
 
+    for d in DEPS[1:]:
+	if not d.found:
+		break
+
+    return DEPS
+
+    
 if __name__ == '__main__':
-    print """This is the configuration subscript for OSX Darwin.
-             Please run "config.py" for full configuration."""
+    print """This is the configuration subscript for Unix.
+Please run "config.py" for full configuration."""
+
