# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           python 1.0
PortGroup           bitbucket 1.0

bitbucket.setup     birkenfeld sphinx-contrib 21e3b2dc70a4
name                py-sphinx-contrib
version             0.0.20160725
categories-append   textproc devel
license             BSD
maintainers         sean openmaintainer
description         Sphinx extensions
long_description \
    This is a collection of Sphinx extensions maintained by their respective authors. \
    It is not an official part of Sphinx.

platforms           darwin
supported_archs     noarch

checksums           rmd160  b3ad4e0df61801a1c729848b5327feb3ae718ffd \
                    sha256  9accfe82afe65878363475d7a5b5a9f882fccdc9074b2e601a49e1b0706dda68

python.versions     27

if {$subport ne $name} {
    depends_lib     port:py${python.version}-sphinx

    livecheck.type  none

    post-patch {
        reinplace -W ${worksrcpath}/ansi "s,README,README.rst," setup.py
        reinplace -W ${worksrcpath}/cheeseshop "s,README,README.rst," setup.py
        reinplace -W ${worksrcpath}/clearquest "s,README,README.rst," setup.py
        reinplace -W ${worksrcpath}/email "s,README,README.rst," setup.py
        reinplace -W ${worksrcpath}/hyphenator "s,README,README.rst," setup.py
    }

    build {
        foreach d [glob -type d -directory ${worksrcpath} *] {
            if {[file exists $d/setup.py] && ![string match "*cmakedomain" $d]
                && ![string match "*_template*" $d]
            } {
                system -W $d "${build.cmd} ${build.target}"
            }
        }
    }

    destroot {
        foreach d [glob -type d -directory ${worksrcpath} *] {
            if {[file exists $d/setup.py] && ![string match "*cmakedomain" $d]
                && ![string match "*_template*" $d]
            } {
                system -W $d "${destroot.cmd} ${destroot.target} ${destroot.destdir}"
            }
        }
    }
}
