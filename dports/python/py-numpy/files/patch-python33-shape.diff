--- numpy/core/tests/test_multiarray.py
+++ numpy/core/tests/test_multiarray.py
@@ -11,10 +11,19 @@
 
 from numpy.compat import asbytes, getexception, strchar
 
 from test_print import in_foreign_locale
 
+if sys.version_info[:2] > (3, 2):
+    # In Python 3.3 the representation of empty shape, strides and suboffsets
+    # is an empty tuple instead of None.
+    # http://docs.python.org/dev/whatsnew/3.3.html#api-changes
+    EMPTY = ()
+else:    
+    EMPTY = None
+
+
 class TestFlags(TestCase):
     def setUp(self):
         self.a = arange(10)
 
     def test_writeable(self):
@@ -2160,31 +2169,31 @@
             y = memoryview(x)
             assert_equal(y.format, 'i')
             assert_equal(y.shape, (5,))
             assert_equal(y.ndim, 1)
             assert_equal(y.strides, (4,))
-            assert_equal(y.suboffsets, None)
+            assert_equal(y.suboffsets, EMPTY)
             assert_equal(y.itemsize, 4)
 
         def test_export_simple_nd(self):
             x = np.array([[1,2],[3,4]], dtype=np.float64)
             y = memoryview(x)
             assert_equal(y.format, 'd')
             assert_equal(y.shape, (2, 2))
             assert_equal(y.ndim, 2)
             assert_equal(y.strides, (16, 8))
-            assert_equal(y.suboffsets, None)
+            assert_equal(y.suboffsets, EMPTY)
             assert_equal(y.itemsize, 8)
 
         def test_export_discontiguous(self):
             x = np.zeros((3,3,3), dtype=np.float32)[:,0,:]
             y = memoryview(x)
             assert_equal(y.format, 'f')
             assert_equal(y.shape, (3, 3))
             assert_equal(y.ndim, 2)
             assert_equal(y.strides, (36, 4))
-            assert_equal(y.suboffsets, None)
+            assert_equal(y.suboffsets, EMPTY)
             assert_equal(y.itemsize, 4)
 
         def test_export_record(self):
             dt = [('a', 'b'),
                   ('b', 'h'),
@@ -2212,11 +2221,11 @@
                            asbytes('aaaa'), 'bbbb', asbytes('   '), True, 1.0)],
                          dtype=dt)
             y = memoryview(x)
             assert_equal(y.shape, (1,))
             assert_equal(y.ndim, 1)
-            assert_equal(y.suboffsets, None)
+            assert_equal(y.suboffsets, EMPTY)
 
             sz = sum([dtype(b).itemsize for a, b in dt])
             if dtype('l').itemsize == 4:
                 assert_equal(y.format, 'T{b:a:=h:b:i:c:l:d:^q:dx:B:e:@H:f:=I:g:L:h:^Q:hx:=f:i:d:j:^g:k:=Zf:ix:Zd:jx:^Zg:kx:4s:l:=4w:m:3x:n:?:o:@e:p:}')
             else:
@@ -2226,14 +2235,14 @@
 
         def test_export_subarray(self):
             x = np.array(([[1,2],[3,4]],), dtype=[('a', ('i', (2,2)))])
             y = memoryview(x)
             assert_equal(y.format, 'T{(2,2)i:a:}')
-            assert_equal(y.shape, None)
+            assert_equal(y.shape, EMPTY)
             assert_equal(y.ndim, 0)
-            assert_equal(y.strides, None)
-            assert_equal(y.suboffsets, None)
+            assert_equal(y.strides, EMPTY)
+            assert_equal(y.suboffsets, EMPTY)
             assert_equal(y.itemsize, 16)
 
         def test_export_endian(self):
             x = np.array([1,2,3], dtype='>i')
             y = memoryview(x)
