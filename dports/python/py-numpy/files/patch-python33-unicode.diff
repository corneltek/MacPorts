--- numpy/core/src/multiarray/scalarapi.c
+++ numpy/core/src/multiarray/scalarapi.c
@@ -650,10 +650,39 @@
              * so round up to nearest multiple
              */
             itemsize = (((itemsize - 1) >> 2) + 1) << 2;
         }
     }
+#if PY_VERSION_HEX >= 0x03030000
+    if (type_num == NPY_UNICODE) {
+        PyObject *u, *args;
+        int byteorder;
+
+#if NPY_BYTE_ORDER == NPY_LITTLE_ENDIAN
+        byteorder = -1;
+#elif NPY_BYTE_ORDER == NPY_BIG_ENDIAN
+        byteorder = +1;
+#else
+        #error Endianness undefined ?
+#endif
+        if (swap) byteorder *= -1;
+
+        u = PyUnicode_DecodeUTF32(data, itemsize, NULL, &byteorder);
+        if (u == NULL) {
+            return NULL;
+        }
+        args = Py_BuildValue("(O)", u);
+        if (args == NULL) {
+            Py_DECREF(u);
+            return NULL;
+        }
+        obj = type->tp_new(type, args, NULL);
+        Py_DECREF(u);
+        Py_DECREF(args);
+        return obj;
+    }
+#endif
     if (type->tp_itemsize != 0) {
         /* String type */
         obj = type->tp_alloc(type, itemsize);
     }
     else {
@@ -686,10 +715,11 @@
             ((PyStringObject *)obj)->ob_sstate = SSTATE_NOT_INTERNED;
 #endif
             memcpy(destptr, data, itemsize);
             return obj;
         }
+#if PY_VERSION_HEX < 0x03030000
         else if (type_num == PyArray_UNICODE) {
             /* tp_alloc inherited from Python PyBaseObject_Type */
             PyUnicodeObject *uni = (PyUnicodeObject*)obj;
             size_t length = itemsize >> 2;
             Py_UNICODE *dst;
@@ -757,10 +787,11 @@
             uni->str[length] = 0;
             uni->length = length;
 #endif
             return obj;
         }
+#endif /* PY_VERSION_HEX < 0x03030000 */
         else {
             PyVoidScalarObject *vobj = (PyVoidScalarObject *)obj;
             vobj->base = NULL;
             vobj->descr = descr;
             Py_INCREF(descr);
--- numpy/core/src/multiarray/scalartypes.c.src
+++ numpy/core/src/multiarray/scalartypes.c.src
@@ -2321,11 +2321,15 @@
     Py_DECREF(typecode);
 #if @default@ == 0
     *((npy_@name@ *)dest) = *((npy_@name@ *)src);
 #elif @default@ == 1 /* unicode and strings */
     if (itemsize == 0) { /* unicode */
+#if PY_VERSION_HEX >= 0x03030000
+        itemsize = PyUnicode_GetLength(robj) * PyUnicode_KIND(robj);
+#else
         itemsize = ((PyUnicodeObject *)robj)->length * sizeof(Py_UNICODE);
+#endif
     }
     memcpy(dest, src, itemsize);
     /* @default@ == 2 won't get here */
 #endif
     Py_DECREF(robj);
--- numpy/core/tests/test_unicode.py
+++ numpy/core/tests/test_unicode.py
@@ -24,14 +24,16 @@
     def buffer_length(arr):
         if isinstance(arr, ndarray):
             return len(arr.data)
         return len(buffer(arr))
 
+# In both cases below we need to make sure that the byte swapped value (as
+# UCS4) is still a valid unicode:
 # Value that can be represented in UCS2 interpreters
-ucs2_value = u'\uFFFF'
+ucs2_value = u'\u0900'
 # Value that cannot be represented in UCS2 interpreters (but can in UCS4)
-ucs4_value = u'\U0010FFFF'
+ucs4_value = u'\U00100900'
 
 
 ############################################################
 #    Creation tests
 ############################################################
