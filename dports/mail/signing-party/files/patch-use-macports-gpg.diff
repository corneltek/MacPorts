--- ./caff/caff.orig	2015-01-29 21:39:55.000000000 +0100
+++ ./caff/caff	2015-01-29 21:44:31.000000000 +0100
@@ -169,7 +169,7 @@
 
 =item B<gpg> [string]
 
-Path to the GnuPG binary.  Default: B<gpg>.
+Path to the GnuPG binary.  Default: B<@GPG_PATH@>.
 
 =item B<gpg-sign> [string]
 
@@ -456,7 +456,7 @@
 		$gecos =~ s/,.*//;
 
 		my $gpg = GnuPG::Interface->new();
-		$gpg->call( 'gpg' );
+		$gpg->call( '@GPG_PATH@' );
 		$gpg->options->hash_init(
 			'meta_interactive' => 0,
 			'always_trust' => 1,
@@ -566,7 +566,7 @@
 	};
 	@{$CONFIG{'keyid'}} = map { s/^0x//; uc (substr y/ //dr, -16) } @{$CONFIG{'keyid'}};
 	$CONFIG{'export-sig-age'} //= 24*60*60;
-	$CONFIG{'gpg'} //= 'gpg';
+	$CONFIG{'gpg'} //= '@GPG_PATH@';
 	$CONFIG{'gpg-sign'} //= $CONFIG{'gpg'};
 	$CONFIG{'gpg-delsig'} //= $CONFIG{'gpg'};
 	check_executable($_, $CONFIG{$_}) for qw/gpg gpg-sign gpg-delsig/;
--- ./caff/pgp-clean.orig	2015-01-29 21:40:04.000000000 +0100
+++ ./caff/pgp-clean	2015-01-29 21:45:59.000000000 +0100
@@ -237,6 +237,7 @@
 	my ($gnupghome, $keyid) = @_;
 
 	my $gpg = GnuPG::Interface->new();
+	$gpg->call( '@GPG_PATH@' );
 	my %confighash = ( armor => 1 );
 	$confighash{'homedir'}=$gnupghome if (defined $gnupghome);
 	$gpg->options->hash_init( %confighash );
@@ -317,6 +318,7 @@
 	# get key listing
 	#################
 	my $gpg = GnuPG::Interface->new();
+	$gpg->call( '@GPG_PATH@' );
 	$gpg->options->meta_interactive( 0 );
 	my ($inputfd, $stdoutfd, $stderrfd, $statusfd, $handles) = make_gpg_fds();
 	$gpg->options->hash_init( 'extra_args' => [ '--with-colons', '--fixed-list-mode' ] );
@@ -354,6 +356,7 @@
 	###############################
 	my $tempdir = tempdir( "caff-$keyid-XXXXX", DIR => '/tmp/', CLEANUP => 1);
 	$gpg = GnuPG::Interface->new();
+	$gpg->call( '@GPG_PATH@' );
 	$gpg->options->hash_init( 'homedir' => $tempdir );
 	$gpg->options->meta_interactive( 0 );
 	($inputfd, $stdoutfd, $stderrfd, $statusfd, $handles) = make_gpg_fds();
@@ -369,6 +372,7 @@
 	# prune it
 	##########
 	$gpg = GnuPG::Interface->new();
+	$gpg->call( '@GPG_PATH@' );
 	$gpg->options->hash_init(
 		'homedir' => $tempdir,
 		'extra_args' => [ '--with-colons', '--fixed-list-mode', '--command-fd=0', '--no-tty' ] );
--- ./caff/pgp-fixkey.orig	2015-01-29 21:40:12.000000000 +0100
+++ ./caff/pgp-fixkey	2015-01-29 21:46:36.000000000 +0100
@@ -245,6 +245,7 @@
 # find a list of all interesting keys.
 if (scalar @KEYIDS == 0) {
 	my $gpg = GnuPG::Interface->new();
+	$gpg->call( '@GPG_PATH@' );
 	$gpg->options->meta_interactive( 0 );
 	my ($inputfd, $stdoutfd, $stderrfd, $statusfd, $handles) = make_gpg_fds();
 	$gpg->options->hash_init( 'extra_args' => [ '--with-colons', '--fast-list-mode', '--fixed-list-mode' ] );
@@ -279,6 +280,7 @@
 	# get key listing
 	#################
 	my $gpg = GnuPG::Interface->new();
+	$gpg->call( '@GPG_PATH@' );
 	$gpg->options->meta_interactive( 0 );
 	my ($inputfd, $stdoutfd, $stderrfd, $statusfd, $handles) = make_gpg_fds();
 	$gpg->options->hash_init( 'extra_args' => [ '--with-colons', '--fixed-list-mode' ] );
@@ -311,6 +313,7 @@
 	# prune it
 	##########
 	$gpg = GnuPG::Interface->new();
+	$gpg->call( '@GPG_PATH@' );
 	$gpg->options->hash_init(
 		'extra_args' => [ '--with-colons', '--fixed-list-mode', '--command-fd=0', '--no-tty' ] );
 	($inputfd, $stdoutfd, $stderrfd, $statusfd, $handles) = make_gpg_fds();
--- ./gpg-key2latex/gpg-key2latex.orig	2015-01-29 21:47:12.000000000 +0100
+++ ./gpg-key2latex/gpg-key2latex	2015-01-29 21:47:52.000000000 +0100
@@ -51,6 +51,7 @@
 # Get the list of all matching keys.
 {
     my $gpg = GnuPG::Interface::->new();
+	$gpg->call( '@GPG_PATH@' );
     $gpg->options->hash_init( 'extra_args' => [ qw/--fingerprint
                                                    --fixed-list-mode
                                                    --no-auto-check-trustdb --with-colons/ ]
@@ -69,6 +70,7 @@
 foreach my $keyid (@KEYIDS) {
     my $photos = $options{'show-photo'} ? File::Temp::->new(TMPDIR => 1) : '/dev/null';
     my $gpg = GnuPG::Interface::->new();
+	$gpg->call( '@GPG_PATH@' );
     # we need --attribute-{fd,file} and --status-{fd,file} to get the
     # correct attribute size
     $gpg->options->hash_init( 'extra_args' => [ '--attribute-file', $photos,
--- ./gpg-key2ps/gpg-key2ps.orig	2015-01-29 21:48:04.000000000 +0100
+++ ./gpg-key2ps/gpg-key2ps	2015-01-29 21:48:29.000000000 +0100
@@ -102,7 +102,7 @@
 
 # open a gpg process we'll be reading from below
 # --list-key due to #382794
-open GPG, '-|', qw/gpg --list-key --with-fingerprint --with-colons/, @ARGV;
+open GPG, '-|', qw/@GPG_PATH@ --list-key --with-fingerprint --with-colons/, @ARGV;
 
 sub start_postscript {
 # start the PostScript output
--- ./gpg-mailkeys/gpg-mailkeys.orig	2015-01-29 21:48:50.000000000 +0100
+++ ./gpg-mailkeys/gpg-mailkeys	2015-01-29 21:49:16.000000000 +0100
@@ -73,7 +73,7 @@
 while [ -n "$1" ]; do
 	printf "[$1] "
 	TEMPFILE=`mktemp -t gpg2mail.XXXXXX`
-	ADDR=`gpg --with-colons --fixed-list-mode --list-key $1 | sed -e 's/^uid:[^rei:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:<]*<[^:>]*>\):.*/@@uid@@ \1/' -e '/^@@uid@@ /!d' -e 's/([^)]*)//g' -e 's/  */ /g' -e 's/^@@uid@@ //' | head -1`
+	ADDR=`@GPG_PATH@ --with-colons --fixed-list-mode --list-key $1 | sed -e 's/^uid:[^rei:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:<]*<[^:>]*>\):.*/@@uid@@ \1/' -e '/^@@uid@@ /!d' -e 's/([^)]*)//g' -e 's/  */ /g' -e 's/^@@uid@@ //' | head -1`
 	if [ -z "$ADDR" ]; then
 		printf "(no usable user ids)\n"
 		FAILKEYS="$FAILKEYS:$1"
@@ -117,7 +117,7 @@
 Content-Type: application/pgp-keys
 Content-Disposition: attachment; filename="$1.asc"
 
-`gpg --armor --export $1`
+`@GPG_PATH@ --armor --export $1`
 
 --$BOUNDARY--
 EOM
--- ./gpgdir/gpgdir.orig	2015-01-29 21:49:49.000000000 +0100
+++ ./gpgdir/gpgdir	2015-01-29 21:52:37.000000000 +0100
@@ -411,6 +411,7 @@
     my ($in_file, $out_file, $del_flag) = @_;
 
     my $gpg = GnuPG::Interface->new();
+	$gpg->call('@GPG_PATH@');
     $gpg->options->hash_init(%options);
 
     die "[*] Could not create new gpg object with ",
@@ -513,6 +514,7 @@
     my $handles   = '';
 
     my $gpg = GnuPG::Interface->new();
+	$gpg->call('@GPG_PATH@');
     $gpg->options->hash_init(%options);
 
     die "[*] Could not create new gpg object with ",
--- ./gpglist/gpglist.orig	2015-01-29 21:52:48.000000000 +0100
+++ ./gpglist/gpglist	2015-01-29 21:53:16.000000000 +0100
@@ -86,7 +86,7 @@
 	die "Usage: $PROGRAM_NAME <keyid>\n";
 }
 
-open SIGS, '-|', qw/gpg --no-auto-check-trustdb --list-options show-sig-subpackets --fixed-list-mode --with-colons --list-sigs/, $key
+open SIGS, '-|', qw/@GPG_PATH@ --no-auto-check-trustdb --list-options show-sig-subpackets --fixed-list-mode --with-colons --list-sigs/, $key
 	or die "can't get gpg listing";
 
 my ($uid, $id) = ('', '');
--- ./gpgparticipants/gpgparticipants.orig	2015-01-29 21:56:07.000000000 +0100
+++ ./gpgparticipants/gpgparticipants	2015-01-29 21:56:47.000000000 +0100
@@ -52,7 +52,7 @@
 algos=$(echo "$algos" | tr ',' ' ')
 for algo in $algos; do
 	# Ensure this is a valid algo
-	gpg --print-md "$algo" /dev/null >/dev/null || exit $?
+	@GPG_PATH@ --print-md "$algo" /dev/null >/dev/null || exit $?
 done
 
 input="$1"
@@ -83,7 +83,7 @@
 
 EOF
 for algo in $algos; do
-	printf "      gpg --print-md %s %s\n" "$algo" "$output"
+	printf "      @GPG_PATH@ --print-md %s %s\n" "$algo" "$output"
 done
 cat <<EOF
 
@@ -149,7 +149,7 @@
 while read i; do
     k=$(($k+1));
     printf "\n%03d  [ ] Fingerprint OK        [ ] ID OK\n" $k;
-	LANGUAGE=en gpg $options --display-charset utf-8 --fingerprint --list-keys -- $i \
+	LANGUAGE=en @GPG_PATH@ $options --display-charset utf-8 --fingerprint --list-keys -- $i \
 		| grep -ve "^sub" -e '^uid *\[jpeg image of size ';
 	echo "_______________________________________________________________________________"
 done
--- ./gpgsigs/gpgsigs.orig	2015-01-29 21:57:34.000000000 +0100
+++ ./gpgsigs/gpgsigs	2015-01-29 21:58:19.000000000 +0100
@@ -119,7 +119,7 @@
 # get all known signatures
 if ($recv_keys) {
 	print STDERR "Requesting keys from keyserver\n";
-	system qw/gpg --recv-keys/, @keys;
+	system qw/@GPG_PATH@ --recv-keys/, @keys;
 }
 
 my $now = time;
@@ -127,7 +127,7 @@
 
 my $photos = $latex ? File::Temp::->new(TMPDIR => 1) : '/dev/null';
 my $gpg = GnuPG::Interface::->new();
-$gpg->call( 'gpg' );
+$gpg->call( '@GPG_PATH@' );
 # we need --attribute-{fd,file} and --status-{fd,file} to get the
 # correct attribute size
 $gpg->options->hash_init( 'extra_args' => [ '--attribute-file', $photos,
@@ -330,7 +330,7 @@
 
 sub getChecksum ($$) {
 	my ($algo, $infile) = @_;
-	open MD, '-|', qw/gpg --with-colons --print-md/, $algo, $infile or warn "Can't get gpg $algo digest\n";
+	open MD, '-|', qw/@GPG_PATH@ --with-colons --print-md/, $algo, $infile or warn "Can't get gpg $algo digest\n";
 	my $digest = <MD>;
 	close MD;
 	return $1 if $digest and $digest =~ /:([0-9A-F]+):[^:]*$/;
--- ./keyart/keyart.orig	2015-01-29 22:12:25.000000000 +0100
+++ ./keyart/keyart	2015-01-29 22:14:18.000000000 +0100
@@ -28,10 +28,8 @@
 def test_env():
     """Test if and where GPG is installed."""
     try:
-        if os.access('/usr/bin/gpg', os.X_OK):
-            gnupg = '/usr/bin/gpg'
-        else:
-            gnupg = '/usr/bin/gpg2'
+        if os.access('@GPG_PATH@', os.X_OK):
+            gnupg = '@GPG_PATH@'
         return gnupg
     except OSError:
         print("Please install GnuPG before using this script.")
--- ./keylookup/keylookup.orig	2015-01-29 22:20:24.000000000 +0100
+++ ./keylookup/keylookup	2015-01-29 22:20:48.000000000 +0100
@@ -80,7 +80,7 @@
 		open (STDIN, "/dev/null") || die ("Cannot open /dev/null as stdin: $!\n");
 
 		# child
-		my @ops = ('gpg');
+		my @ops = ('@GPG_PATH@');
 		if ($options->{'keyserver'}) {
 			push @ops, '--keyserver='.$options->{'keyserver'};
 		};
@@ -289,7 +289,7 @@
 	my $keyids = shift;
 	my $options = shift;
 
-	my @args = ('gpg');
+	my @args = ('@GPG_PATH@');
 	if ($options->{'keyserver'}) {
 		push @args, '--keyserver='.$options->{'keyserver'};
 	};
