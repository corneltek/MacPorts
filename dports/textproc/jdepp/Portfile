# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0

name                jdepp
version             2012-10-06
categories          textproc japanese
maintainers         hum openmaintainer

description         C++ implementation of Japanese Dependency Parsers

long_description    J.DepP is a C++ implementation of Japanese dependency \
                    parsing algorithms. The parser takes a raw sentence as input \
                    and performs word segmentation, POS tagging (thanks to MeCab), \
                    bunsetsu chunking and dependency parsing. J.DepP is meant \
                    for those who want to parse massive texts (e.g., entire blog \
                    feeds) efficiently with state-of-the-art parsing accuracy.

homepage            http://www.tkl.iis.u-tokyo.ac.jp/~ynaga/jdepp/
platforms           darwin
license             {GPL-2 LGPL-2.1}

master_sites        ${homepage}
checksums           rmd160  2b5ac0967a097a8056bfd14da111d17f41d6c6bd \
                    sha256  794cd7202cf3e0b667a6726ecdaecb0d1b4bb6bb7f5451b41b4f8700b9d32a67

patchfiles          patch-configure.diff

depends_lib         port:mecab-base \
                    port:mecab-jumandic-utf8

configure.args      --enable-standalone

variant knbc conflicts kyoto description {Train a parser wht KNBC (Kyoto-University and NTT Blog Corpus)} {
    depends_build-append  port:KNBC

    configure.args-append --with-corpus=knbc

    build.target          model
    build.args-append     CORPUS_DIR=${prefix}/share/KNBC
}

# Users must put their Kyoto Corpus 4.0 into the following directory if +kyoto variant is set.
set kyoto_dir       /tmp/KyotoCorpus4.0

variant kyoto conflicts knbc description {Train a parser with Kyoto-University Text Corpus} {
    if {[file exists ${kyoto_dir}]} {
        build.target          model
        build.args-append     CORPUS_DIR=${kyoto_dir}
    } else {
        pre-fetch {
            ui_error "To train a parser with Kyoto Corpus, please put the files in ${kyoto_dir}"
            return -code error "Kyoto Corpus is not available at ${kyoto_dir}"
        }
    }
}

variant ipadic conflicts naistjdic description {Build a parser with auto POSs given by MeCab/ipadic} {
    depends_lib-delete    port:mecab-jumandic-utf8
    depends_lib-append    port:mecab-ipadic-utf8

    configure.args-append --with-mecab-dict=IPA
}

variant naistjdic conflicts ipadic description {Build a parser with auto POSs given by MeCab/NAIST-jdic} {
    depends_lib-delete    port:mecab-jumandic-utf8
    depends_lib-append    port:mecab-naist-jdic-utf8

    configure.args-append --with-mecab-dict=NAIST-J
}

if {![variant_isset kyoto]} {
    default_variants +knbc
}

post-destroot {
    set doc_dir ${destroot}${prefix}/share/doc/${name}
    file mkdir ${doc_dir}
    xinstall -m 644 -W ${worksrcpath} \
        AUTHORS COPYING GPL LGPL README TODO \
        ${doc_dir}
}

livecheck.type      regex
livecheck.regex     ${name}-(\\d+-\\d+-\\d+)\\.
