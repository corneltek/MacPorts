--- video/out/opengl/common.c.orig
+++ video/out/opengl/common.c
@@ -28,6 +28,7 @@
 #include <stdbool.h>
 #include <math.h>
 #include <assert.h>
+#include <AvailabilityMacros.h>
 
 #include "common.h"
 #include "common/common.h"
@@ -399,6 +400,7 @@ void mpgl_load_functions2(GL *gl, void *
     if (shader)
         mp_verbose(log, "GL_SHADING_LANGUAGE_VERSION='%s'\n", shader);
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     if (gl->version >= 300) {
         gl->GetStringi = get_fn(fn_ctx, "glGetStringi");
         gl->GetIntegerv = get_fn(fn_ctx, "glGetIntegerv");
@@ -413,7 +415,9 @@ void mpgl_load_functions2(GL *gl, void *
             gl->extensions = talloc_asprintf_append(gl->extensions, " %s", ext);
         }
 
-    } else {
+    } else
+#endif
+    {
         const char *ext = (char*)gl->GetString(GL_EXTENSIONS);
         gl->extensions = talloc_asprintf_append(gl->extensions, " %s", ext);
     }
--- video/out/opengl/common.h.orig
+++ video/out/opengl/common.h
@@ -34,7 +34,6 @@
 #if HAVE_GL_COCOA
 #define GL_DO_NOT_WARN_IF_MULTI_GL_VERSION_HEADERS_INCLUDED 1
 #include <OpenGL/gl.h>
-#include <OpenGL/gl3.h>
 #include <OpenGL/glext.h>
 #elif HAVE_ANDROID_GL
 #include <GLES3/gl3.h>
--- video/out/opengl/utils.c.orig
+++ video/out/opengl/utils.c
@@ -22,6 +22,7 @@
 #include <string.h>
 #include <stdarg.h>
 #include <assert.h>
+#include <AvailabilityMacros.h>
 
 #include "common/common.h"
 #include "utils.h"
@@ -79,14 +80,20 @@ int glFmt2bpp(GLenum format, GLenum type
         return 2;
     case GL_RGB:
     case GL_BGR:
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     case GL_RGB_INTEGER:
+#endif
         return 3 * component_size;
     case GL_RGBA:
     case GL_BGRA:
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     case GL_RGBA_INTEGER:
+#endif
         return 4 * component_size;
     case GL_RED:
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     case GL_RED_INTEGER:
+#endif
         return component_size;
     case GL_RG:
     case GL_LUMINANCE_ALPHA:
@@ -322,10 +329,12 @@ static const struct gl_format gl_formats
     {GL_RGB,    GL_UNSIGNED_SHORT,              GL_RGB16},
     {GL_RGBA,   GL_UNSIGNED_INT_2_10_10_10_REV, GL_RGB10_A2},
     // not texture filterable in GLES 3.0
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     {GL_RGB,    GL_FLOAT,                       GL_RGB16F},
     {GL_RGBA,   GL_FLOAT,                       GL_RGBA16F},
     {GL_RGB,    GL_FLOAT,                       GL_RGB32F},
     {GL_RGBA,   GL_FLOAT,                       GL_RGBA32F},
+#endif
     // Desktop GL
     {GL_RGB,    GL_UNSIGNED_SHORT,              GL_RGB10},
     {GL_RGBA,   GL_UNSIGNED_SHORT,              GL_RGBA12},
--- video/out/opengl/video.c.orig
+++ video/out/opengl/video.c
@@ -20,6 +20,7 @@
 #include <stdbool.h>
 #include <string.h>
 #include <assert.h>
+#include <AvailabilityMacros.h>
 
 #include <libavutil/common.h>
 #include <libavutil/lfg.h>
@@ -284,6 +285,7 @@ static const struct fmt_entry gl_byte_fo
     {0, 0,           0,         0},                     // 4 x 16
 };
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
 static const struct fmt_entry gl_ui_byte_formats_gles3[] = {
     {0, GL_R8UI,      GL_RED_INTEGER,   GL_UNSIGNED_BYTE},  // 1 x 8
     {0, GL_RG8UI,     GL_RG_INTEGER,    GL_UNSIGNED_BYTE},  // 2 x 8
@@ -294,6 +296,7 @@ static const struct fmt_entry gl_ui_byte
     {0, GL_RGB16UI,   GL_RGB_INTEGER,   GL_UNSIGNED_SHORT}, // 3 x 16
     {0, GL_RGBA16UI,  GL_RGBA_INTEGER,  GL_UNSIGNED_SHORT}, // 4 x 16
 };
+#endif
 
 static const struct fmt_entry gl_byte_formats_gles2[] = {
     {0, GL_LUMINANCE,           GL_LUMINANCE,       GL_UNSIGNED_BYTE}, // 1 x 8
@@ -318,10 +321,10 @@ static const struct fmt_entry gl_byte_fo
 };
 
 static const struct fmt_entry gl_float16_formats[] = {
-    {0, GL_R16F,    GL_RED,     GL_FLOAT},              // 1 x f
-    {0, GL_RG16F,   GL_RG,      GL_FLOAT},              // 2 x f
-    {0, GL_RGB16F,  GL_RGB,     GL_FLOAT},              // 3 x f
-    {0, GL_RGBA16F, GL_RGBA,    GL_FLOAT},              // 4 x f
+    {0, 0,    GL_RED,     GL_FLOAT},              // 1 x f
+    {0, 0,   GL_RG,      GL_FLOAT},              // 2 x f
+    {0, 0,  GL_RGB,     GL_FLOAT},              // 3 x f
+    {0, 0, GL_RGBA,    GL_FLOAT},              // 4 x f
 };
 
 static const struct fmt_entry gl_apple_formats[] = {
@@ -456,12 +459,7 @@ const struct m_sub_options gl_video_conf
                     {"rgb10",  GL_RGB10},
                     {"rgb10_a2", GL_RGB10_A2},
                     {"rgb16",  GL_RGB16},
-                    {"rgb16f", GL_RGB16F},
-                    {"rgb32f", GL_RGB32F},
                     {"rgba12", GL_RGBA12},
-                    {"rgba16", GL_RGBA16},
-                    {"rgba16f", GL_RGBA16F},
-                    {"rgba32f", GL_RGBA32F},
                     {"auto",   0})),
         OPT_CHOICE_OR_INT("dither-depth", dither_depth, 0, -1, 16,
                           ({"no", -1}, {"auto", 0})),
@@ -565,10 +563,14 @@ static bool is_integer_format(const stru
 {
     // Tests only the formats which we actually declare somewhere.
     switch (fmt->format) {
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     case GL_RED_INTEGER:
+#endif
     case GL_RG_INTEGER:
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     case GL_RGB_INTEGER:
     case GL_RGBA_INTEGER:
+#endif
         return true;
     }
     return false;
@@ -1003,7 +1005,7 @@ static void pass_prepare_src_tex(struct 
 static void render_pass_quad(struct gl_video *p, int vp_w, int vp_h,
                              const struct mp_rect *dst)
 {
-    struct vertex va[4] = {0};
+    struct vertex va[4] = {{{0}}};
 
     struct gl_transform t;
     gl_transform_ortho(&t, 0, vp_w, 0, vp_h);
@@ -2636,7 +2638,11 @@ static void check_gl_features(struct gl_
         if (!p->opts.fbo_format) {
             p->opts.fbo_format = GL_RGBA16;
             if (gl->es)
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
                 p->opts.fbo_format = have_float_tex ? GL_RGBA16F : GL_RGB10_A2;
+#else
+                p->opts.fbo_format = GL_RGB10_A2;
+#endif
         }
         have_fbo = test_fbo(p);
     }
@@ -2855,7 +2861,9 @@ static const struct fmt_entry *find_plan
     const struct fmt_entry *e = find_tex_format(gl, bytes_per_comp, n_channels);
     if (e->format || gl->es < 300)
         return e;
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     return &gl_ui_byte_formats_gles3[n_channels - 1 + (bytes_per_comp - 1) * 4];
+#endif
 }
 
 static bool init_format(int fmt, struct gl_video *init)
--- video/out/opengl/context_cocoa.c.orig
+++ video/out/opengl/context_cocoa.c
@@ -56,12 +56,17 @@ static void *cocoa_glgetaddr(const char 
 
 static CGLError test_gl_version(struct vo *vo,
                                 CGLContextObj *ctx,
-                                CGLPixelFormatObj *pix,
-                                CGLOpenGLProfile version)
+                                CGLPixelFormatObj *pix
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
+                                , CGLOpenGLProfile version
+#endif
+                                )
 {
     CGLPixelFormatAttribute attrs[] = {
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
         kCGLPFAOpenGLProfile,
         (CGLPixelFormatAttribute) version,
+#endif
         kCGLPFADoubleBuffer,
         kCGLPFAAccelerated,
         #if MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_8
@@ -99,16 +104,22 @@ static bool create_gl_context(struct MPG
     struct cgl_context *p = ctx->priv;
     CGLError err;
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     CGLOpenGLProfile gl_versions[] = {
         kCGLOGLPVersion_3_2_Core,
         kCGLOGLPVersion_Legacy,
     };
+#endif
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     for (int n = 0; n < MP_ARRAY_SIZE(gl_versions); n++) {
         err = test_gl_version(ctx->vo, &p->ctx, &p->pix, gl_versions[n]);
         if (err == kCGLNoError)
             break;
     }
+#else
+    err = test_gl_version(ctx->vo, &p->ctx, &p->pix);
+#endif
 
     if (err != kCGLNoError) {
         MP_FATAL(ctx->vo, "error creating CGL context: %s (%d)\n",
