--- artsc/artsdsp.c	13 Mar 2003 02:11:05 -0000	1.1.1.3
+++ artsc/artsdsp.c	13 Mar 2003 02:12:42 -0000	1.3
@@ -3,6 +3,8 @@
  *
  * Copyright (C) 1998 Manish Singh <yosh@gimp.org>
  * Copyright (C) 2000 Stefan Westerfeld <stefan@space.twc.de> (aRts port)
+ * Port to Darwin and speedups by Alexander Strange <astrange@ithinksw.com>
+ * based on work by the LibOSS team <liboss-devel@lists.sourceforge.net>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
@@ -26,6 +28,10 @@
 #include <config.h>
 #endif
 
+#ifdef HAVE_SYS_SYSCALL_H
+#include <sys/syscall.h>
+#endif
+
 #ifdef HAVE_SYS_SOUNDCARD_H
 #include <stdlib.h>
 #include <stdio.h>
@@ -90,14 +96,17 @@
 /*
  * original C library functions
  */
-typedef int (*orig_open_ptr)(const char *pathname, int flags, ...);
+#ifndef HAVE_SYS_SYSCALL_H
+typedef int (*orig_open_ptr)(const char *pathname, int flags, int mode);
 typedef int (*orig_close_ptr)(int fd);
 typedef int (*orig_ioctl_ptr)(int fd, ioctl_request_t request, ...);
 typedef ssize_t (*orig_write_ptr)(int fd, const void *buf, size_t count);
 typedef void* (*orig_mmap_ptr)(void *start, size_t length, int prot,
                                  int flags, int fd, off_t offset);
 typedef int (*orig_munmap_ptr)(void *start, size_t length);
+#ifdef HAVE_ARTSDSP_STDIO_EMU
 typedef FILE* (*orig_fopen_ptr)(const char *path, const char *mode);
+#endif
 typedef int (*orig_access_ptr)(const char *pathname, int mode);   
 
 static orig_open_ptr orig_open;
@@ -106,8 +115,23 @@
 static orig_write_ptr orig_write;
 static orig_mmap_ptr orig_mmap;
 static orig_munmap_ptr orig_munmap;
+#ifdef HAVE_ARTSDSP_STDIO_EMU
 static orig_fopen_ptr orig_fopen;
+#endif
 static orig_access_ptr orig_access;
+#else
+static int orig_open(const char *pathname, int flags, int mode) { return syscall(SYS_open,pathname,flags,mode); }
+static int orig_close(int fd) { return syscall(SYS_close,fd); }
+static int orig_ioctl(int fd, ioctl_request_t request, void *ptr) { return syscall(SYS_ioctl,fd,request,ptr); }
+static ssize_t orig_write(int fd,const void *buf,size_t count) { return syscall(SYS_write,fd,buf,count); }
+static void *orig_mmap(void *start,size_t len,int prot,int flags,int fd,off_t off) { return syscall(SYS_mmap,start,len,prot,flags,fd,off); }
+static int orig_munmap(void *start,size_t len) { return syscall(SYS_munmap,start,len); }
+static int orig_access(const char *pathname,int mode) { return syscall(SYS_access,pathname,mode); }
+#ifdef HAVE_ARTSDSP_STDIO_EMU
+typedef FILE* (*orig_fopen_ptr)(const char *path, const char *mode);
+static orig_fopen_ptr orig_fopen;
+#endif
+#endif
 
 static int artsdsp_debug = 0;
 static int artsdsp_init = 0;
@@ -139,14 +163,18 @@
 	mmapemu = env && !strcmp(env,"1");
 
 	/* resolve original symbols */
+#ifndef HAVE_SYS_SYSCALL_H
 	orig_open = (orig_open_ptr)dlsym(RTLD_NEXT,"open");
 	orig_close = (orig_close_ptr)dlsym(RTLD_NEXT,"close");
 	orig_write = (orig_write_ptr)dlsym(RTLD_NEXT,"write");
 	orig_ioctl = (orig_ioctl_ptr)dlsym(RTLD_NEXT,"ioctl");
 	orig_mmap = (orig_mmap_ptr)dlsym(RTLD_NEXT,"mmap");
 	orig_munmap = (orig_munmap_ptr)dlsym(RTLD_NEXT,"munmap");
-	orig_fopen = (orig_fopen_ptr)dlsym(RTLD_NEXT,"fopen");
 	orig_access = (orig_access_ptr)dlsym(RTLD_NEXT,"access");
+#endif
+#ifdef HAVE_ARTSDSP_STDIO_EMU
+        orig_fopen = (orig_fopen_ptr)dlsym(RTLD_NEXT,"fopen");
+#endif
 }
 
 static void artsdspdebug(const char *fmt,...)
