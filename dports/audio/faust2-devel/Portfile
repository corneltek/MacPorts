# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem              1.0

name                    faust2-devel
conflicts               faust faust-devel
version                 2.0-20141002
git.branch              57c17a039422c652f7302541918a07ca955288e0
categories              audio lang
platforms               darwin
maintainers             ryandesign
license                 GPL-2
homepage                http://faust.grame.fr/

description             functional programming language for realtime audio

long_description        Faust is a functional programming language \
                        specifically designed for realtime audio applications \
                        and plugins. This is the Faust2 branch which offers \
                        additional backends for C, Java and LLVM bitcode.

fetch.type              git
git.url                 git://git.code.sf.net/p/faudiostream/code

set llvm_version        3.4
set llvm_prefix         ${prefix}/libexec/llvm-${llvm_version}
build.env               PATH=${llvm_prefix}/bin:$env(PATH)

depends_build           port:pkgconfig

depends_lib             port:clang-${llvm_version} \
                        port:libmicrohttpd \
                        port:libsndfile \
                        port:llvm-${llvm_version} \
                        port:openssl

patchfiles-append       patch-architecture-httpdlib-src-Makefile.diff
patchfiles-append       patch-architecture-osclib-faust-Makefile.diff
patchfiles-append       patch-compiler-Makefile.unix.diff
patchfiles-append       patch-tools-sound2faust-Makefile.diff

post-patch {
    eval reinplace "s|/usr/local|${prefix}|g" \
        ${worksrcpath}/compiler/parser/enrobage.cpp \
        ${worksrcpath}/compiler/tlib/compatibility.cpp \
        ${worksrcpath}/tools/scbuilder/scbuilder \
        [glob ${worksrcpath}/tools/faust2appls/faust2*]
    fs-traverse f ${worksrcpath} {
        switch [file rootname [file tail ${f}]] {
            Makefile {
                reinplace "s|/usr/local|${prefix}|g" ${f}
                reinplace "s|/opt/local|${prefix}|g" ${f}
            }
        }
    }
}

use_configure           no

variant universal {}

build.args-append       ARCHFLAGS="[get_canonical_archflags cxx]" \
                        CXX="${configure.cxx} [get_canonical_archflags cxx]"

post-build {
    foreach extra {dynamic httpd sound2faust} {
        build.target    ${extra}
        portbuild::build_main
    }
}

post-destroot {
    set docdir ${destroot}${prefix}/share/doc/${subport}
    xinstall -d ${docdir}
    xinstall -m 644 -W ${worksrcpath} \
        COPYING \
        README \
        WHATSNEW \
        ${docdir}
}

# fixme
livecheck.type          none
