From 32a9084546add979115a686f9a167e70b8967149 Mon Sep 17 00:00:00 2001
From: Alan Coopersmith <alan.coopersmith@oracle.com>
Date: Sat, 6 Feb 2016 12:26:20 -0800
Subject: [PATCH 2/3] Remove : from @param names in manually written headers

Makes style match the @param names in autogenerated headers and makes
clang -Wdocumentation stop complaining about all of them:

./xcb.h:523:11: warning: parameter 'display:' not found in the function
      declaration [-Wdocumentation]
 * @param display: A pointer to the display number.
          ^~~~~~~~
./xcb.h:523:11: note: did you mean 'display'?
 * @param display: A pointer to the display number.
          ^~~~~~~~
          display

Signed-off-by: Alan Coopersmith <alan.coopersmith@oracle.com>
Signed-off-by: Uli Schlachter <psychon@znc.in>
---
 src/xcb.h    |  64 ++++++++++++++++++-------------------
 src/xcbext.h | 102 +++++++++++++++++++++++++++++------------------------------
 2 files changed, 83 insertions(+), 83 deletions(-)

diff --git a/src/xcb.h b/src/xcb.h
index 86eb1bc..6873e79 100644
--- a/src/xcb.h
+++ b/src/xcb.h
@@ -225,7 +225,7 @@ typedef struct xcb_auth_info_t {
 
 /**
  * @brief Forces any buffered output to be written to the server.
- * @param c: The connection to the X server.
+ * @param c The connection to the X server.
  * @return > @c 0 on success, <= @c 0 otherwise.
  *
  * Forces any buffered output to be written to the server. Blocks
@@ -235,7 +235,7 @@ int xcb_flush(xcb_connection_t *c);
 
 /**
  * @brief Returns the maximum request length that this server accepts.
- * @param c: The connection to the X server.
+ * @param c The connection to the X server.
  * @return The maximum request length field.
  *
  * In the absence of the BIG-REQUESTS extension, returns the
@@ -252,7 +252,7 @@ uint32_t xcb_get_maximum_request_length(xcb_connection_t *c);
 
 /**
  * @brief Prefetch the maximum request length without blocking.
- * @param c: The connection to the X server.
+ * @param c The connection to the X server.
  *
  * Without blocking, does as much work as possible toward computing
  * the maximum request length accepted by the X server.
@@ -274,7 +274,7 @@ void xcb_prefetch_maximum_request_length(xcb_connection_t *c);
 
 /**
  * @brief Returns the next event or error from the server.
- * @param c: The connection to the X server.
+ * @param c The connection to the X server.
  * @return The next event from the server.
  *
  * Returns the next event or error from the server, or returns null in
@@ -285,7 +285,7 @@ xcb_generic_event_t *xcb_wait_for_event(xcb_connection_t *c);
 
 /**
  * @brief Returns the next event or error from the server.
- * @param c: The connection to the X server.
+ * @param c The connection to the X server.
  * @return The next event from the server.
  *
  * Returns the next event or error from the server, if one is
@@ -298,7 +298,7 @@ xcb_generic_event_t *xcb_poll_for_event(xcb_connection_t *c);
 
 /**
  * @brief Returns the next event without reading from the connection.
- * @param c: The connection to the X server.
+ * @param c The connection to the X server.
  * @return The next already queued event from the server.
  *
  * This is a version of xcb_poll_for_event that only examines the
@@ -346,8 +346,8 @@ void xcb_unregister_for_special_event(xcb_connection_t *c,
 
 /**
  * @brief Return the error for a request, or NULL if none can ever arrive.
- * @param c: The connection to the X server.
- * @param cookie: The request cookie.
+ * @param c The connection to the X server.
+ * @param cookie The request cookie.
  * @return The error for the request, or NULL if none can ever arrive.
  *
  * The xcb_void_cookie_t cookie supplied to this function must have resulted
@@ -364,8 +364,8 @@ xcb_generic_error_t *xcb_request_check(xcb_connection_t *c, xcb_void_cookie_t co
 
 /**
  * @brief Discards the reply for a request.
- * @param c: The connection to the X server.
- * @param sequence: The request sequence number from a cookie.
+ * @param c The connection to the X server.
+ * @param sequence The request sequence number from a cookie.
  *
  * Discards the reply for a request. Additionally, any error generated
  * by the request is also discarded (unless it was an _unchecked request
@@ -380,8 +380,8 @@ void xcb_discard_reply(xcb_connection_t *c, unsigned int sequence);
 
 /**
  * @brief Discards the reply for a request, given by a 64bit sequence number
- * @param c: The connection to the X server.
- * @param sequence: 64-bit sequence number as returned by xcb_send_request64().
+ * @param c The connection to the X server.
+ * @param sequence 64-bit sequence number as returned by xcb_send_request64().
  *
  * Discards the reply for a request. Additionally, any error generated
  * by the request is also discarded (unless it was an _unchecked request
@@ -403,8 +403,8 @@ void xcb_discard_reply64(xcb_connection_t *c, uint64_t sequence);
 
 /**
  * @brief Caches reply information from QueryExtension requests.
- * @param c: The connection.
- * @param ext: The extension data.
+ * @param c The connection.
+ * @param ext The extension data.
  * @return A pointer to the xcb_query_extension_reply_t for the extension.
  *
  * This function is the primary interface to the "extension cache",
@@ -421,8 +421,8 @@ const struct xcb_query_extension_reply_t *xcb_get_extension_data(xcb_connection_
 
 /**
  * @brief Prefetch of extension data into the extension cache
- * @param c: The connection.
- * @param ext: The extension data.
+ * @param c The connection.
+ * @param ext The extension data.
  *
  * This function allows a "prefetch" of extension data into the
  * extension cache. Invoking the function may cause a call to
@@ -437,7 +437,7 @@ void xcb_prefetch_extension_data(xcb_connection_t *c, xcb_extension_t *ext);
 
 /**
  * @brief Access the data returned by the server.
- * @param c: The connection.
+ * @param c The connection.
  * @return A pointer to an xcb_setup_t structure.
  *
  * Accessor for the data returned by the server when the xcb_connection_t
@@ -457,7 +457,7 @@ const struct xcb_setup_t *xcb_get_setup(xcb_connection_t *c);
 
 /**
  * @brief Access the file descriptor of the connection.
- * @param c: The connection.
+ * @param c The connection.
  * @return The file descriptor.
  *
  * Accessor for the file descriptor that was passed to the
@@ -467,7 +467,7 @@ int xcb_get_file_descriptor(xcb_connection_t *c);
 
 /**
  * @brief Test whether the connection has shut down due to a fatal error.
- * @param c: The connection.
+ * @param c The connection.
  * @return > 0 if the connection is in an error state; 0 otherwise.
  *
  * Some errors that occur in the context of an xcb_connection_t
@@ -487,8 +487,8 @@ int xcb_connection_has_error(xcb_connection_t *c);
 
 /**
  * @brief Connects to the X server.
- * @param fd: The file descriptor.
- * @param auth_info: Authentication data.
+ * @param fd The file descriptor.
+ * @param auth_info Authentication data.
  * @return A newly allocated xcb_connection_t structure.
  *
  * Connects to an X server, given the open socket @p fd and the
@@ -506,7 +506,7 @@ xcb_connection_t *xcb_connect_to_fd(int fd, xcb_auth_info_t *auth_info);
 
 /**
  * @brief Closes the connection.
- * @param c: The connection.
+ * @param c The connection.
  *
  * Closes the file descriptor and frees all memory associated with the
  * connection @c c. If @p c is @c NULL, nothing is done.
@@ -518,10 +518,10 @@ void xcb_disconnect(xcb_connection_t *c);
 
 /**
  * @brief Parses a display string name in the form documented by X(7x).
- * @param name: The name of the display.
- * @param host: A pointer to a malloc'd copy of the hostname.
- * @param display: A pointer to the display number.
- * @param screen: A pointer to the screen number.
+ * @param name The name of the display.
+ * @param host A pointer to a malloc'd copy of the hostname.
+ * @param display A pointer to the display number.
+ * @param screen A pointer to the screen number.
  * @return 0 on failure, non 0 otherwise.
  *
  * Parses the display string name @p display_name in the form
@@ -537,8 +537,8 @@ int xcb_parse_display(const char *name, char **host, int *display, int *screen);
 
 /**
  * @brief Connects to the X server.
- * @param displayname: The name of the display.
- * @param screenp: A pointer to a preferred screen number.
+ * @param displayname The name of the display.
+ * @param screenp A pointer to a preferred screen number.
  * @return A newly allocated xcb_connection_t structure.
  *
  * Connects to the X server specified by @p displayname. If @p
@@ -556,9 +556,9 @@ xcb_connection_t *xcb_connect(const char *displayname, int *screenp);
 
 /**
  * @brief Connects to the X server, using an authorization information.
- * @param display: The name of the display.
- * @param auth: The authorization information.
- * @param screen: A pointer to a preferred screen number.
+ * @param display The name of the display.
+ * @param auth The authorization information.
+ * @param screen A pointer to a preferred screen number.
  * @return A newly allocated xcb_connection_t structure.
  *
  * Connects to the X server specified by @p displayname, using the
@@ -578,7 +578,7 @@ xcb_connection_t *xcb_connect_to_display_with_auth_info(const char *display, xcb
 
 /**
  * @brief Allocates an XID for a new object.
- * @param c: The connection.
+ * @param c The connection.
  * @return A newly allocated XID.
  *
  * Allocates an XID for a new object. Typically used just prior to
diff --git a/src/xcbext.h b/src/xcbext.h
index 44d789e..bb422f0 100644
--- a/src/xcbext.h
+++ b/src/xcbext.h
@@ -60,10 +60,10 @@ enum xcb_send_request_flags_t {
 
 /**
  * @brief Send a request to the server.
- * @param c: The connection to the X server.
- * @param flags: A combination of flags from the xcb_send_request_flags_t enumeration.
- * @param vector: Data to send; must have two iovecs before start for internal use.
- * @param request: Information about the request to be sent.
+ * @param c The connection to the X server.
+ * @param flags A combination of flags from the xcb_send_request_flags_t enumeration.
+ * @param vector Data to send; must have two iovecs before start for internal use.
+ * @param request Information about the request to be sent.
  * @return The request's sequence number on success, 0 otherwise.
  *
  * This function sends a new request to the X server. The data of the request is
@@ -84,12 +84,12 @@ unsigned int xcb_send_request(xcb_connection_t *c, int flags, struct iovec *vect
 
 /**
  * @brief Send a request to the server.
- * @param c: The connection to the X server.
- * @param flags: A combination of flags from the xcb_send_request_flags_t enumeration.
- * @param vector: Data to send; must have two iovecs before start for internal use.
- * @param request: Information about the request to be sent.
- * @param num_fds: Number of additional file descriptors to send to the server
- * @param fds: Additional file descriptors that should be send to the server.
+ * @param c The connection to the X server.
+ * @param flags A combination of flags from the xcb_send_request_flags_t enumeration.
+ * @param vector Data to send; must have two iovecs before start for internal use.
+ * @param request Information about the request to be sent.
+ * @param num_fds Number of additional file descriptors to send to the server
+ * @param fds Additional file descriptors that should be send to the server.
  * @return The request's sequence number on success, 0 otherwise.
  *
  * This function sends a new request to the X server. The data of the request is
@@ -115,10 +115,10 @@ unsigned int xcb_send_request_with_fds(xcb_connection_t *c, int flags, struct io
 
 /**
  * @brief Send a request to the server, with 64-bit sequence number returned.
- * @param c: The connection to the X server.
- * @param flags: A combination of flags from the xcb_send_request_flags_t enumeration.
- * @param vector: Data to send; must have two iovecs before start for internal use.
- * @param request: Information about the request to be sent.
+ * @param c The connection to the X server.
+ * @param flags A combination of flags from the xcb_send_request_flags_t enumeration.
+ * @param vector Data to send; must have two iovecs before start for internal use.
+ * @param request Information about the request to be sent.
  * @return The request's sequence number on success, 0 otherwise.
  *
  * This function sends a new request to the X server. The data of the request is
@@ -139,12 +139,12 @@ uint64_t xcb_send_request64(xcb_connection_t *c, int flags, struct iovec *vector
 
 /**
  * @brief Send a request to the server, with 64-bit sequence number returned.
- * @param c: The connection to the X server.
- * @param flags: A combination of flags from the xcb_send_request_flags_t enumeration.
- * @param vector: Data to send; must have two iovecs before start for internal use.
- * @param request: Information about the request to be sent.
- * @param num_fds: Number of additional file descriptors to send to the server
- * @param fds: Additional file descriptors that should be send to the server.
+ * @param c The connection to the X server.
+ * @param flags A combination of flags from the xcb_send_request_flags_t enumeration.
+ * @param vector Data to send; must have two iovecs before start for internal use.
+ * @param request Information about the request to be sent.
+ * @param num_fds Number of additional file descriptors to send to the server
+ * @param fds Additional file descriptors that should be send to the server.
  * @return The request's sequence number on success, 0 otherwise.
  *
  * This function sends a new request to the X server. The data of the request is
@@ -171,8 +171,8 @@ uint64_t xcb_send_request_with_fds64(xcb_connection_t *c, int flags, struct iove
 
 /**
  * @brief Send a file descriptor to the server in the next call to xcb_send_request.
- * @param c: The connection to the X server.
- * @param fd: The file descriptor to send.
+ * @param c The connection to the X server.
+ * @param fd The file descriptor to send.
  *
  * After this function returns, the file descriptor given is owned by xcb and
  * will be closed eventually.
@@ -185,12 +185,12 @@ void xcb_send_fd(xcb_connection_t *c, int fd);
 
 /**
  * @brief Take over the write side of the socket
- * @param c: The connection to the X server.
- * @param return_socket: Callback function that will be called when xcb wants
+ * @param c The connection to the X server.
+ * @param return_socket Callback function that will be called when xcb wants
  *                        to use the socket again.
- * @param closure: Argument to the callback function.
- * @param flags: A combination of flags from the xcb_send_request_flags_t enumeration.
- * @param sent: Location to the sequence number of the last sequence request.
+ * @param closure Argument to the callback function.
+ * @param flags A combination of flags from the xcb_send_request_flags_t enumeration.
+ * @param sent Location to the sequence number of the last sequence request.
  *              Must not be NULL.
  * @return 1 on success, else 0.
  *
@@ -214,10 +214,10 @@ int xcb_take_socket(xcb_connection_t *c, void (*return_socket)(void *closure), v
 
 /**
  * @brief Send raw data to the X server.
- * @param c: The connection to the X server.
- * @param vector: Array of data to be sent.
- * @param count: Number of entries in @p vector.
- * @param requests: Number of requests that are being sent.
+ * @param c The connection to the X server.
+ * @param vector Array of data to be sent.
+ * @param count Number of entries in @p vector.
+ * @param requests Number of requests that are being sent.
  * @return 1 on success, else 0.
  *
  * You must own the write-side of the socket (you've called
@@ -238,9 +238,9 @@ int xcb_writev(xcb_connection_t *c, struct iovec *vector, int count, uint64_t re
 
 /**
  * @brief Wait for the reply of a given request.
- * @param c: The connection to the X server.
- * @param request: Sequence number of the request as returned by xcb_send_request().
- * @param e: Location to store errors in, or NULL. Ignored for unchecked requests.
+ * @param c The connection to the X server.
+ * @param request Sequence number of the request as returned by xcb_send_request().
+ * @param e Location to store errors in, or NULL. Ignored for unchecked requests.
  *
  * Returns the reply to the given request or returns null in the event of
  * errors. Blocks until the reply or error for the request arrives, or an I/O
@@ -250,9 +250,9 @@ void *xcb_wait_for_reply(xcb_connection_t *c, unsigned int request, xcb_generic_
 
 /**
  * @brief Wait for the reply of a given request, with 64-bit sequence number
- * @param c: The connection to the X server.
- * @param request: 64-bit sequence number of the request as returned by xcb_send_request64().
- * @param e: Location to store errors in, or NULL. Ignored for unchecked requests.
+ * @param c The connection to the X server.
+ * @param request 64-bit sequence number of the request as returned by xcb_send_request64().
+ * @param e Location to store errors in, or NULL. Ignored for unchecked requests.
  *
  * Returns the reply to the given request or returns null in the event of
  * errors. Blocks until the reply or error for the request arrives, or an I/O
@@ -265,10 +265,10 @@ void *xcb_wait_for_reply64(xcb_connection_t *c, uint64_t request, xcb_generic_er
 
 /**
  * @brief Poll for the reply of a given request.
- * @param c: The connection to the X server.
- * @param request: Sequence number of the request as returned by xcb_send_request().
- * @param reply: Location to store the reply in, must not be NULL.
- * @param e: Location to store errors in, or NULL. Ignored for unchecked requests.
+ * @param c The connection to the X server.
+ * @param request Sequence number of the request as returned by xcb_send_request().
+ * @param reply Location to store the reply in, must not be NULL.
+ * @param e Location to store errors in, or NULL. Ignored for unchecked requests.
  * @return 1 when the reply to the request was returned, else 0.
  *
  * Checks if the reply to the given request already received. Does not block.
@@ -277,10 +277,10 @@ int xcb_poll_for_reply(xcb_connection_t *c, unsigned int request, void **reply,
 
 /**
  * @brief Poll for the reply of a given request, with 64-bit sequence number.
- * @param c: The connection to the X server.
- * @param request: 64-bit sequence number of the request as returned by xcb_send_request().
- * @param reply: Location to store the reply in, must not be NULL.
- * @param e: Location to store errors in, or NULL. Ignored for unchecked requests.
+ * @param c The connection to the X server.
+ * @param request 64-bit sequence number of the request as returned by xcb_send_request().
+ * @param reply Location to store the reply in, must not be NULL.
+ * @param e Location to store errors in, or NULL. Ignored for unchecked requests.
  * @return 1 when the reply to the request was returned, else 0.
  *
  * Checks if the reply to the given request already received. Does not block.
@@ -292,9 +292,9 @@ int xcb_poll_for_reply64(xcb_connection_t *c, uint64_t request, void **reply, xc
 
 /**
  * @brief Don't use this, only needed by the generated code.
- * @param c: The connection to the X server.
- * @param reply: A reply that was received from the server
- * @param replylen: The size of the reply.
+ * @param c The connection to the X server.
+ * @param reply A reply that was received from the server
+ * @param replylen The size of the reply.
  * @return Pointer to the location where received file descriptors are stored.
  */
 int *xcb_get_reply_fds(xcb_connection_t *c, void *reply, size_t replylen);
@@ -303,14 +303,14 @@ int *xcb_get_reply_fds(xcb_connection_t *c, void *reply, size_t replylen);
 /* xcb_util.c */
 
 /**
- * @param mask: The mask to check
+ * @param mask The mask to check
  * @return The number of set bits in the mask
  */
 int xcb_popcount(uint32_t mask);
 
 /**
- * @param list: The base of an array
- * @param len: The length of the array
+ * @param list The base of an array
+ * @param len The length of the array
  * @return The sum of all entries in the array.
  */
 int xcb_sumof(uint8_t *list, int len);
-- 
2.8.3

