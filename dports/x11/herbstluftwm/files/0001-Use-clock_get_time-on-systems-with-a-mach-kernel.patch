From bae6fa9479e079a04af752d3c52446ceebbdc3cd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thorsten=20Wi=C3=9Fmann?= <edu@thorsten-wissmann.de>
Date: Sun, 20 May 2012 15:58:01 +0200
Subject: [PATCH] Use clock_get_time on systems with a mach-kernel

---
 src/rules.c |    9 ++-------
 src/utils.c |   28 ++++++++++++++++++++++++++++
 src/utils.h |    2 ++
 4 Dateien geändert, 34 Zeilen hinzugefügt(+), 7 Zeilen entfernt(-)

diff --git src/rules.c src/rules.c
index 04ccaf2..640c1da 100644
--- src/rules.c
+++ src/rules.c
@@ -11,7 +11,6 @@
 #include "ipc-protocol.h"
 
 #include <glib.h>
-#include <time.h>
 #include <string.h>
 #include <stdio.h>
 #include <sys/types.h>
@@ -220,9 +219,7 @@ void consequence_destroy(HSConsequence* cons) {
 HSRule* rule_create() {
     HSRule* rule = g_new0(HSRule, 1);
     rule->once = false;
-    struct timespec t;
-    clock_gettime(CLOCK_MONOTONIC, &t);
-    rule->birth_time = t.tv_sec;
+    rule->birth_time = get_monotonic_timestamp();
     return rule;
 }
 
@@ -510,9 +507,7 @@ bool condition_pid(HSCondition* rule, HSClient* client) {
 }
 
 bool condition_maxage(HSCondition* rule, HSClient* client) {
-    struct timespec cur;
-    clock_gettime(CLOCK_MONOTONIC, &cur);
-    time_t diff = cur.tv_sec - g_current_rule_birth_time;
+    time_t diff = get_monotonic_timestamp() - g_current_rule_birth_time;
     return (rule->value.integer >= diff);
 }
 
diff --git src/utils.c src/utils.c
index 171bd97..e7c7dee 100644
--- src/utils.c
+++ src/utils.c
@@ -18,6 +18,34 @@
 #include <glib.h>
 
 
+
+#include <time.h>
+#include <sys/time.h>
+
+#ifdef __MACH__
+#include <mach/clock.h>
+#include <mach/mach.h>
+#endif
+
+
+
+
+time_t get_monotonic_timestamp() {
+    struct timespec ts;
+#ifdef __MACH__ // OS X does not have clock_gettime, use clock_get_time
+    clock_serv_t cclock;
+    mach_timespec_t mts;
+    host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock);
+    clock_get_time(cclock, &mts);
+    mach_port_deallocate(mach_task_self(), cclock);
+    ts.tv_sec = mts.tv_sec;
+    ts.tv_nsec = mts.tv_nsec;
+#else
+    clock_gettime(CLOCK_REALTIME, &ts);
+#endif
+    return ts.tv_sec;
+}
+
 /// print a printf-like message to stderr and exit
 // from dwm.c
 void die(const char *errstr, ...) {
diff --git src/utils.h src/utils.h
index f6c19ed..99412dc 100644
--- src/utils.h
+++ src/utils.h
@@ -41,6 +41,8 @@ bool string_to_bool(char* string, bool oldvalue);
 
 char* strlasttoken(char* str, char* delim);
 
+time_t get_monotonic_timestamp();
+
 // duplicates an argument-vector
 char** argv_duplicate(int argc, char** argv);
 // frees all entrys in argument-vector and then the vector itself
-- 
1.7.10.2

