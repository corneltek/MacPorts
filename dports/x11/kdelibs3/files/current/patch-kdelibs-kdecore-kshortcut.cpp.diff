Index: kdecore/kshortcut.cpp
===================================================================
RCS file: /home/kde/kdelibs/kdecore/kshortcut.cpp,v
retrieving revision 1.21
diff -u -b -u -r1.21 kshortcut.cpp
--- kdecore/kshortcut.cpp	17 Apr 2003 16:08:03 -0000	1.21
+++ kdecore/kshortcut.cpp	26 Jun 2003 14:52:54 -0000
@@ -68,6 +68,7 @@
 
 bool KKey::init( int keyQt )
 {
+#ifdef Q_WS_X11
 	//KKeyServer::Sym sym;
 
 	//if( sym.initQt( keyQt )
@@ -79,6 +80,12 @@
 		m_mod = 0;
 		return false;
 	}
+#else
+	// FIXME: Implement on QWS & MAC
+	m_sym = keyQt | Qt::MODIFIER_MASK;
+	m_mod = keyQt & Qt::MODIFIER_MASK;
+#endif
+	return true;
 }
 
 bool KKey::init( const QKeySequence& key )
@@ -105,6 +112,7 @@
 
 bool KKey::init( const QString& sSpec )
 {
+#ifdef Q_WS_X11
 	clear();
 
 	QString sKey = sSpec.stripWhiteSpace();
@@ -140,6 +148,9 @@
 		<< ", m_mod = " << QString::number(m_mod, 16) << endl;
 
 	return m_sym != 0;
+#else
+	return init(QKeySequence(sSpec));
+#endif
 }
 
 bool KKey::isNull() const          { return m_sym == 0; }
@@ -163,12 +174,14 @@
 QString KKey::toString() const
 {
 	QString s;
-
+#ifdef Q_WS_X11
 	s = KKeyServer::modToStringUser( m_mod );
 	if( !s.isEmpty() )
 		s += '+';
 	s += KKeyServer::Sym(m_sym).toString();
-
+#else
+	s += (QString)QKeySequence(m_mod | m_sym);
+#endif
 	return s;
 }
 
@@ -178,11 +191,14 @@
 	//	<< " mod = " << QString::number(m_mod, 16)
 	//	<< " key = " << QString::number(m_sym, 16) << endl;
 	QString s;
-
+#ifdef Q_WS_X11
 	s = KKeyServer::modToStringInternal( m_mod );
 	if( !s.isEmpty() )
 		s += '+';
 	s += KKeyServer::Sym(m_sym).toStringInternal();
+#else
+	s += toString();
+#endif
 	return s;
 }
 
@@ -197,7 +213,12 @@
 
 QString KKey::modFlagLabel( ModFlag modFlag )
 {
+#ifdef Q_WS_X11
 	return KKeyServer::modToStringUser( modFlag );
+#else
+	// FIXME: Implement on QWS & MAC
+	return QString();
+#endif
 }
 
 //---------------------------------------------------------------------
@@ -312,8 +333,9 @@
 {
 	if( iKey <= m_nKeys && iKey < MAX_KEYS ) {
 		m_rgvar[iKey].init( key );
-		if( iKey == m_nKeys )
+		if( iKey == m_nKeys ) {
 			m_nKeys++;
+		}
 		return true;
 	} else
 		return false;
@@ -471,12 +493,13 @@
 
 bool KShortcut::init( const QString& s )
 {
+
 	bool bRet = true;
 	QStringList rgs = QStringList::split( ';', s );
 
-	if( s == "none" || rgs.size() == 0 )
+	if( s == "none" || rgs.size() == 0 ) {
 		clear();
-	else if( rgs.size() <= MAX_SEQUENCES ) {
+	} else if( rgs.size() <= MAX_SEQUENCES ) {
 		m_nSeqs = rgs.size();
 		for( uint i = 0; i < m_nSeqs; i++ ) {
 			QString& sSeq = rgs[i];
@@ -489,21 +512,6 @@
 		clear();
 		bRet = false;
 	}
-
-	if( !s.isEmpty() ) {
-		QString sDebug;
-		QTextStream os( &sDebug, IO_WriteOnly );
-		os << "KShortcut::init( \"" << s << "\" ): ";
-		for( uint i = 0; i < m_nSeqs; i++ ) {
-			os << " m_rgseq[" << i << "]: ";
-			KKeyServer::Variations vars;
-			vars.init( m_rgseq[i].key(0), true );
-			for( uint j = 0; j < vars.count(); j++ )
-				os << QString::number(vars.m_rgkey[j].keyCodeQt(),16) << ',';
-		}
-		kdDebug(125) << sDebug << endl;
-	}
-
 	return bRet;
 }
 
