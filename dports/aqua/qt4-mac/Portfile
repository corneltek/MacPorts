# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0

# use the qt4 group; set 'building_qt4' so that the portgroup
# does not include certain parts
set building_qt4    1
PortGroup           qt4 1.0
PortGroup           xcodeversion 1.0

name                qt4-mac
conflicts           qt3 qt3-mac qt4-mac-devel
version             4.8.3
categories          aqua
platforms           macosx
maintainers         michaelld openmaintainer
license             {LGPL-2.1 GPL-3}

homepage            http://qt.nokia.com/
description         Qt Tool Kit
long_description    Qt Tool Kit: A cross-platform framework \
                    (headers, data, and libraries) for writing \
                    cross-platform GUI-based applications.

master_sites        trolltech
distname            qt-everywhere-opensource-src-${version}

checksums           sha1    bc352a283610e0cd2fe0dbedbc45613844090fcb \
                    rmd160  fe56e5da874503a79d6f84a1e15460eba5a6feae

minimum_xcodeversions   {8 2.5}

depends_lib-append  port:zlib path:bin/dbus-daemon:dbus \
                    port:openssl port:sqlite3 port:tiff \
                    port:libpng port:libmng port:jpeg

###############################################
# Patches are used to both fix compiling on various OS versions, and
# to enhance the functionality of QMake and its build files.  Some of
# these patches are 2-stage: use a file here, and the replace an
# @VARIABLE@ in post-patch.  There are LOTS of patches, because Qt is
# a large, complicated system.

# (0) Fix the testing script to properly handle both +universal as
# well as the native arch for both CXX and CC compiling; also make
# sure it does not create a Mac app bundle.

patchfiles-append   patch-config.tests_unix_compile.test.diff

# (1) Test for Precompiled-headers support (a) requires a C++
# compiler, but configure calls it, by default, with a C compiler;
# thus, enable testing using the C compiler. (b) to work with ccache,
# if used.

patchfiles-append   patch-config.tests_unix_precomp.test.diff

# (2) fix 'configure' script: (a) to allow easy replacement of arch
# type(s). (b) to find the correct QMAKE CXX compiler by removing
# possibilities that include the character "$". (c) to declare, use,
# and set QT_INSTALL_FRAMEWORKS and QMAKE_FRAMEWORKDIR_QT, both here
# and in the resulting .qmake.cache files. (d) to allow easy
# replacement of MACOSX_DEPLOYMENT_TARGET: build for just the user's
# current OS.

patchfiles-append   patch-configure.diff

# (3) Tweak various scripts to allow easy replacement of
# MACOSX_DEPLOYMENT_TARGET: build for just the user's current OS.

patchfiles-append   patch-mkspecs_common_g++-macx.conf.diff

# (4) (a) Allow easy replacement of MACOSX_DEPLOYMENT_TARGET: build
# for just the user's current OS; (b) allow QMake to use 'ccache' via,
# e.g., "qmake && make CCACHE=ccache".

patchfiles-append   patch-mkspecs_common_mac.conf.diff

# (5) Place the -I path for local moc-created headers -before-
# all other -I paths.

patchfiles-append   patch-mkspecs_features_moc.prf.diff

# (6) Remove Qt's LIBDIR and INCDIR from various Qmake internal
# variables, since they are already included in the user-supplied
# LIBS and INCLUDEPATH.

patchfiles-append   patch-mkspecs_features_qt.prf.diff

# (7) (a) Change placement of Qt's LIBDIR and INCDIR, to always be
# after those supplied by the user's QMake (.pro) files.  By the time
# QMake gets to the patched function, it is creating the Makefile
# parts to find Qt's headers and libraries, so moving these paths to
# this location should always work. (b) If the library is QtWebKit,
# and the build is library (no-framework), universal, and debug, then
# the linkage is just -lQtWebKit, not -lQtWebKit_debug because the
# debug library for 32-bit system cannot be created (too large).

patchfiles-append   patch-mkspecs_features_qt_functions.prf.diff

# (8) Add "absolute_library_soname" to the default CONFIG variables,
# so that when a DYLIB is created, if "target.path" is set for it then
# that path is prepended to its "install_name".

patchfiles-append   patch-mkspecs_macx-g++_qmake.conf.diff

# (9) Add QT_INSTALL_FRAMEWORKS and related variables to QMake, to
# provide a default variable for the location of QMake installed
# frameworks.

patchfiles-append   \
    patch-qmake_option.h.diff \
    patch-qmake_property.cpp.diff \
    patch-src_corelib_global_qlibraryinfo.cpp.diff \
    patch-src_corelib_global_qlibraryinfo.h.diff

# (10) In QMake, disable default MKSPECS and FEATURES path
# concatinations if the shell environment variable QMAKE_NO_DEFAULTS
# is set (to anything); we use this variable in this portfile to make
# sure only internal paths (to the build) are searched by QMake.

patchfiles-append   patch-qmake_project.cpp.diff

# (11) Allow easy replacement of MACOSX_DEPLOYMENT_TARGET: build for
# just the user's current OS.

patchfiles-append   \
    patch-qmake_qmake.pri.diff \
    patch-src_tools_bootstrap_bootstrap.pro.diff

# (12) fix compiling of MediaPlayerPrivateQTKit.mm for 10.5; does not
# hurt others

patchfiles-append   patch-src_3rdparty_webkit_Source_WebCore_platform_graphics_mac_MediaPlayerPrivateQTKit.mm.diff

# (13) fix use of CARBON, found on PPC64; does not hurt others

patchfiles-append   \
    patch-src_3rdparty_webkit_Source_WebCore_plugins_PluginView.h.diff \
    patch-src_3rdparty_webkit_Source_WebCore_plugins_mac_PluginViewMac.mm.diff

# (14) fix MKSPECS install location for WebKit; fix WebCore to handle
# 32-bit compiling correctly on x86 and ppc

patchfiles-append   \
    patch-src_3rdparty_webkit_Source_WebKit_qt_QtWebKit.pro.diff

# (15) fix the corewlan qmake file to use non-standard Developer SDK
# location under 10.6 and newer, e.g., for some developers doing both
# iOS and OSX.  This patch does not change behavior for 10.4 or 10.5.
# Also include fix to use the correct SDK.

patchfiles-append   patch-src_plugins_bearer_corewlan_corewlan.pro.diff

# (16) fix the corewlan source to work under 10.7

patchfiles-append   patch-src_plugins_bearer_corewlan_qcorewlanengine.mm.diff

# (17) Use the "target.path" for libdir for core libraries instead of
# the standard QT_INSTALL_LIBS; allows us to set for library or
# framework elsewhere and have the install still work here.

patchfiles-append   patch-src_qbase.pri.diff

# (18) (a) Disable explicit disabling of framework or static install;
# i.e., install as a framework if that mode is selected, and as
# library otherwise. (b) If installing as framework, use the new
# QT_INSTALL_FRAMEWORKS directory; otherwise, use the old
# QT_INSTALL_LIBS; (c) Get PKGCONFIG dependencies correct, hopefully;
# (d) create and install .pc, .la, and .prl library description files,
# including basic path replacement into DESTDIR; we couple this with a
# post-patch to get the correct install location.

patchfiles-append   \
    patch-src_qt_install.pri.diff \
    patch-tools_assistant_lib_fulltextsearch_fulltextsearch.pro.diff \
    patch-tools_assistant_lib_lib.pro.diff \
    patch-tools_designer_src_components_lib_lib.pro.diff \
    patch-tools_designer_src_lib_lib.pro.diff \
    patch-tools_designer_src_uitools_uitools.pro.diff \
    patch-mkspecs_features_uitools.prf.diff

# (19) fix 'macdeployqt' to look for the correct plugins location by
# default.  This is paired with a "reinplace" in post-patch

patchfiles-append   \
    patch-tools_macdeployqt_macdeployqt_main.cpp.diff

# (20) Under 10.4 only: patch QMake build files using just "-lQtHelp"
# to do "-lQtHelp -lQtCLucene -lQtNetwork -lQtWebKit" instead.  For
# some reason 10.5+ "knows" that how to do this correctly.

platform darwin 8 {
    patchfiles-append patch-QtHelp_10.4_only.diff
}

# (21) fix the Mac timer's use of "mach_timebase_info"

patchfiles-append   \
    patch-src_corelib_tools_qelapsedtimer-mac.cpp.diff

# (22) fix WebCore to handle 32-bit compiling correctly on x86 and ppc

patchfiles-append   \
    patch-src_3rdparty_webkit_Source_WebCore_WebCore.pro.diff

# (23) Under 10.8 only: Patch to fix corelib linking

platform darwin 12 {
    patchfiles-append patch-src_corelib_corelib.pro.diff
}

# (24) fix Framework directory in MacDeployQt tool

patchfiles-append   \
    patch-tools_macdeployqt_shared_shared.cpp.diff

###############################################

# disable CCACHE for now (ticket #34856)

configure.ccache no

# create the global for the psql version, if selected

global psql_version
set psql_version ""

# find a way to specify the OS MINOR version.
global MINOR
set MINOR ""

# hopefully the macosx_deployment_target exists and is set by now.  if
# not, last resort (which is not desirable) is to use the os.version.
if {${macosx_deployment_target} != ""} {
    set MINOR [lindex [split ${macosx_deployment_target} "."] 1]
} else {
    set MINOR [expr [lindex [split ${os.version} "."] 0] - 4]
}

# find a way to specify the SDK to use; Qt will use the 10.4u by
# default which won't work on 10.6 since it is not supported.  Allow
# the user to specify the SDK if desired.

global SDK
set SDK ${configure.sdkroot}
if {${SDK} == ""} {
    # set SDK version depending on OS version
    set sdk_version ""
    if {${MINOR} == "4"} {
        # OSX 10.4 requires an additional 'u'
        set sdk_version "10.4u"
    } else {
        set sdk_version "10.${MINOR}"
    }
    if {[vercmp ${xcodeversion} 4.3] < 0} {
        set SDK ${developer_dir}/SDKs/MacOSX${sdk_version}.sdk
    } else {
        set SDK ${developer_dir}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${sdk_version}.sdk
    }
}

post-patch {
    # set ARCHES in configure (per the third patchfile above), for
    # building QMake.  join any 2 or more arch entries with the GCC
    # arch flag (join does not effect a single entry).  first "-arch"
    # is already in place in the 'configure' script (since there has
    # to be at least 1 arch).
    set ARCHES ""
    if {[variant_exists universal] && [variant_isset universal]} {
        set ARCHES [join ${universal_archs} " -arch "]
    } else {
        set ARCHES ${build_arch}
    }
    reinplace "s|@ARCHES@|${ARCHES}|g" ${worksrcpath}/configure

    # set MACOSX_DEPLOYMENT_TARGET version in various places.  These
    # were all patched in (2) above, and can be easily changed or
    # overridden by the user in a project-local qmake .pro script.
    set TARGET "10.${MINOR}"
    foreach fixfile {configure mkspecs/common/g++-macx.conf \
                     mkspecs/common/mac.conf qmake/qmake.pri \
                     src/tools/bootstrap/bootstrap.pro } {
        reinplace "s|@MACOSX_DEPLOYMENT_TARGET@|${TARGET}|g" \
            ${worksrcpath}/${fixfile}
    }

    # Fix OS version on Bearer CoreWLAN QMake file
    reinplace "s|@MACOSX_VERSION_MINOR@|${MINOR}|g" \
        ${worksrcpath}/src/plugins/bearer/corewlan/corewlan.pro

    # Ensure that correct C/C++ compilers are used.

    reinplace "s| g++\$| ${configure.cxx}|" \
        ${worksrcpath}/mkspecs/common/g++-base.conf
    reinplace "s| gcc\$| ${configure.cc}|"  \
        ${worksrcpath}/mkspecs/common/g++-base.conf

    # fix the corewlan .pro file to use the correct developer SDK

    reinplace "s,@DEVELOPER_SDK@,${SDK},g" \
        ${worksrcpath}/src/plugins/bearer/corewlan/corewlan.pro

    # fix 'macdeployqt' to look for the correct plugins location by default.

    reinplace "s,@QT_PLUGINS_DIR@,${qt_plugins_dir},g" \
        ${worksrcpath}/tools/macdeployqt/macdeployqt/main.cpp

    # fix path to "pg_config", if the variant was selected

    if {${psql_version} != ""} {
        reinplace "s,@PATH_TO_PG_CONFIG@,${prefix}/lib/postgresql${psql_version}/bin/,g" ${worksrcpath}/configure
    }

    # if no debug, then do not even build debug code

    if {![variant_isset debug]} {
        foreach fixfile { src/qbase.pri \
                          src/3rdparty/webkit/Source/WebKit.pri \
                          src/imports/qimportbase.pri \
                          src/plugins/qpluginbase.pri \
                          tools/designer/src/components/lib/lib.pro \
                          tools/designer/src/lib/lib.pro \
                          tools/designer/src/plugins/activeqt/activeqt.pro \
                          tools/designer/src/plugins/plugins.pri \
                          tools/designer/src/uitools/uitools.pro \
                          src/3rdparty/webkit/Source/WebKit/qt/declarative/declarative.pro } {
            reinplace "/+=/s@debug_and_release@@g" \
                ${worksrcpath}/${fixfile}
        }
    }
}

# The build process uses -fconstant-cfstrings.
# configure.compiler should therefore not be one of the MacPorts compilers.

# does not work with clang, see #30271 and #31638 .
if {${configure.compiler} == "clang"} {
    configure.compiler llvm-gcc-4.2
}

# --prefix is not recognized.
configure.pre_args-delete       --prefix=${prefix}

# --disable-dependency-tracking is not recognized.
configure.universal_args-delete --disable-dependency-tracking

################################################################################
# We do not want flags of any kind -- QT is smart enough to set up its own.    #
################################################################################

configure.cflags
configure.cppflags
configure.cxxflags
configure.ldflags

configure.universal_cflags
configure.universal_cppflags
configure.universal_cxxflags
configure.universal_ldflags

configure.cc_archflags
configure.cxx_archflags
configure.ld_archflags

#  use compiler.cpath and compiler.library_path, as per
#  http://trac.macports.org/ticket/25321 for all -I and -L entries,
#  so-as to avoid conflicts with already-installed headers and
#  libraries (giving preference to internal-to-this-port first)
#
#  CPATH is used instead of -I to avoid conflicts with other ports.
#  See http://trac.macports.org/ticket/15219 and
#  http://trac.macports.org/ticket/18723.
#
#  set the default paths to include those for SQLITE3 and DBUS-1

set header_path [ list ${prefix}/include/dbus-1.0 \
                       ${prefix}/lib/dbus-1.0/include \
                       ${prefix}/include ]

set library_path [ list ${prefix}/lib ]

# -system-sqlite ensures the use SQLite provided by MacPorts instead of Qt.
#
# -dbus-linked prevends qt4 from trying to dynamically load libdbus-1,
#     which it is not able to find in ${prefix}.
#
# -openssl-linked ensures that the MacPorts openssl is used.
#
# -framework ensures that this port is installed as frameworks
#     (collections of {library, headers, resources}); in
#     post-destroot, link headers and libraries from the frameworks
#     into non-framework locations as if "-no-framework" were
#     specified.  Some dependent projects will not work properly if Qt
#     is installed as libraries by default, thus make it so #1.
#
# -no-phonon ensures that Qt does not install the 3rd-parth Phonon
#     port or its backend to QuickTime 7; Phonon is now installed via
#     the 'phonon' port, which is more up to date than that provided
#     by Qt.

configure.args                                            \
    -v                                                    \
    -confirm-license                                      \
    -opensource                                           \
    -prefix          ${qt_dir}                            \
    -bindir          ${qt_bins_dir}                       \
    -libdir          ${qt_libs_dir}                       \
    -docdir          ${qt_docs_dir}                       \
    -headerdir       ${qt_includes_dir}                   \
    -plugindir       ${qt_plugins_dir}                    \
    -importdir       ${qt_imports_dir}                    \
    -datadir         ${qt_data_dir}                       \
    -translationdir  ${qt_translations_dir}               \
    -sysconfdir      ${qt_sysconf_dir}                    \
    -examplesdir     ${qt_examples_dir}                   \
    -demosdir        ${qt_demos_dir}                      \
    -system-sqlite                                        \
    -openssl-linked                                       \
    -dbus-linked                                          \
    -fast                                                 \
    -optimized-qmake                                      \
    -framework                                            \
    -no-phonon                                            \
    -no-phonon-backend

# Stop configure script from searching for SQL Drivers
#    not available from MacPorts.
foreach driver {db2 ibase oci tds} {
    configure.args-append -no-sql-${driver}
}

# By default, disable most SQL Drivers.
# There must be at least one enabled (http://trac.macports.org/ticket/15627).
# SQLite is chosen to be always enabled because a copy of it is distributed
#    with Qt, so it is reasonable for the user to expect it.
foreach driver {mysql odbc psql sqlite2} {
    configure.args-append -no-sql-${driver}
}

pre-configure {
    # use the corrected CPATH and LIBRARY_PATH for build
    compiler.cpath [join ${header_path} :]
    compiler.library_path [join ${library_path} :]

    # for 10.4 or 10.5 32-bit PPC, build as Carbon only, not Cocoa

    if {${MINOR} == "4"} {

        configure.args-append -carbon

        # required linking flags?

        configure.ldflags-append -lcrypto -ldbus-1 -ljpeg -llcms \
            -lsqlite3 -lssl -lz

    } elseif {${MINOR} == "5" &&
              [llength ${qt_arch_types}] == 1 &&
              [lsearch -exact ${qt_arch_types} ppc] == 0} {

        configure.args-append -carbon

    }

    # set the arch type(s) to use, in Qt-speak

    configure.args-append -arch \"${qt_arch_types}\"

    # cannot use pre-compiled headers when compiling with more than 1
    # arch type (typically +universal) or for X11

    #if {[llength ${qt_arch_types}] != 1 || [variant_isset x11]}

    if {[llength ${qt_arch_types}] != 1} {
        configure.args-append -no-pch
    } else {
        configure.args-append -pch
    }

    # check to see if not compiling for the native machine hardware
    # (e.g., compiling for just i386 but CPU is x86_64); optimization
    # of QMake does not work in this circumstance.

    if {[lsearch -exact ${qt_arch_types} ${os.arch}] == -1} {

        # not building for native arch: disable optimizing qmake
        configure.args-delete -optimized-qmake

    } elseif {${MINOR} == "6" &&
              [llength ${qt_arch_types}] == 1 &&
              [lsearch -exact ${qt_arch_types} x86] == 0} {

        # disable qmake optimization on 10.6 32-bit
        configure.args-delete -optimized-qmake

    }

    # set the SDK, if it was found and exists

    if {[file exists ${SDK}]} {
        configure.args-append -sdk ${SDK}
    }
}

post-configure {

    # Remove any '-I' and '-L' string from the *FLAGS for SQLITE,
    # DBUS, ODBC, and OPENSSL, so that what remains are just non-I/L
    # flags; these paths are in compiler.cpath and
    # compiler.library_path.  The header and library paths for all the
    # other variants are not used by 'configure', and are already
    # included in the compiler.cpath and compiler.library_path
    # . during the 'build' stage, 'make' will rebuild the Makefiles
    # that depend on any of these changed files.  These patches are
    # sufficient to make sure local (to this build) paths are searched
    # first, and then system paths last (via the compiler.X settings).
    # Ideally, 'qmake' -- either via its mkspecs files or the
    # project's build files -- would distinguish between "local" and
    # "system" includes & libraries.

    # SQLITE
    reinplace "/SQLITE/s@-I${prefix}/\[^ \]*include\[^ \]*@@g" \
        ${worksrcpath}/.qmake.cache
    reinplace "/SQLITE/s@-L${prefix}/\[^ \]*lib\[^ \]*@@g" \
        ${worksrcpath}/.qmake.cache
    # DBUS
    reinplace "/DBUS/s@-I${prefix}/\[^ \]*include\[^ \]*@@g" \
        ${worksrcpath}/.qmake.cache
    reinplace "/DBUS/s@-L${prefix}/\[^ \]*lib\[^ \]*@@g" \
        ${worksrcpath}/.qmake.cache
    # OPENSSL
    reinplace "/OPENSSL/s@-I${prefix}/\[^ \]*include\[^ \]*@@g" \
        ${worksrcpath}/.qmake.cache
    reinplace "/OPENSSL/s@-L${prefix}/\[^ \]*lib\[^ \]*@@g" \
        ${worksrcpath}/.qmake.cache
    # ODBC
    reinplace "/ODBC/s@-I${prefix}/\[^ \]*include\[^ \]*@@g" \
        ${worksrcpath}/.qmake.cache
    reinplace "/ODBC/s@-L${prefix}/\[^ \]*lib\[^ \]*@@g" \
        ${worksrcpath}/.qmake.cache
}

pre-build {
    # use the corrected CPATH and LIBRARY_PATH for build
    compiler.cpath [join ${header_path} :]
    compiler.library_path [join ${library_path} :]
}

build.target all

post-destroot {
    set destroot_qt ${destroot}${qt_dir}

    # Fix .pc and .prl files by changing ${worksrcpath}\${prefix} to
    # ${qt_dir}\${prefix} ("\" means 'take away').  Cannot use
    # "find -E" since it is not necessarily portable.
    regsub ${prefix} ${worksrcpath} "" from_dir
    regsub ${prefix} ${qt_dir} "" to_dir
    foreach fixfile [exec find ${destroot_qt} -name "*.pc"] {
        reinplace "s|${from_dir}|${to_dir}|g" ${fixfile}
    }
    foreach fixfile [exec find ${destroot_qt} -name "*.prl"] {
        reinplace "s|${from_dir}|${to_dir}|g" ${fixfile}
    }

    # remove Libs.private from all pc files
    foreach fixfile [exec find ${destroot_qt} -name "*.pc"] {
        reinplace "/Libs\.private/d" ${fixfile}
    }

    # Fix .pc files to use ${prefix} correctly
    foreach fixfile [exec find ${destroot_qt} -name "*.pc"] {
        reinplace "s|${prefix}/|\${prefix}/|g" ${fixfile}
    }

    # remove -L entries from .prl, and .la files; this is a
    # framework install, not a library install

    foreach fixfile [exec find ${destroot_qt} -name "*.prl"] {
        reinplace "/QMAKE_PRL_LIBS/s|-L\[^ \]*||g" ${fixfile}
    }
    foreach fixfile [exec find ${destroot_qt} -name "*.la"] {
        reinplace "/dependency_libs/s|-L\[^ \]*||g" ${fixfile}
    }

    # remove redundant -F${prefix}/Library/Frameworks entries

    foreach fixfile [exec find ${destroot_qt} -name "*.prl"] {
        reinplace "/QMAKE_PRL_LIBS/s|-F\[^ \]*|FREPLACEME|1" \
            ${fixfile}
        reinplace "/QMAKE_PRL_LIBS/s|-F\[^ \]*||g" ${fixfile}
        reinplace "s|FREPLACEME|-F${prefix}/Library/Frameworks|1" \
            ${fixfile}
    }
    foreach fixfile [exec find ${destroot_qt} -name "*.la"] {
        reinplace "/dependency_libs/s|-F\[^ \]*|FREPLACEME|1" \
            ${fixfile}
        reinplace "/dependency_libs/s|-F\[^ \]*||g" ${fixfile}
        reinplace "s|FREPLACEME|-F${prefix}/Library/Frameworks|1" \
            ${fixfile}
    }

    # move .pc files from ${qt_frameworks_dir}/pkgconfig to
    # ${qt_pkg_config_dir}

    file delete -force ${destroot}${qt_pkg_config_dir}
    xinstall -m 755 -d ${destroot}${qt_libs_dir}
    move ${destroot}${qt_frameworks_dir}/pkgconfig \
        ${destroot}${qt_libs_dir}

    # get Qt's version numbers

    set qt_vers [split ${version} "."]
    set qt_major [lindex ${qt_vers} 0]
    set qt_minor [lindex ${qt_vers} 1]
    set qt_patch [lindex ${qt_vers} 2]

    # link includes and libraries for each actual installed framework

    foreach fixfile [exec find ${destroot}${qt_frameworks_dir} \
                         -name "*.framework" | \
                         sed -e "s@${destroot}@@g"] {

        set tf_full [strsed ${fixfile} {s@\\.framework@@}]
        set tf [strsed ${tf_full} {g@.*\/@@}]

        # link headers into ${qt_includes_dir}, removing directories
        # if they are already there first

        set inc_file ${destroot}${qt_includes_dir}/${tf}
        if {[file exists ${inc_file}]} {
            file delete -force ${inc_file}
        }
        ln -s ${tf_full}.framework/Headers ${inc_file}

        # link libraries into ${qt_libs_dir}, all 4 number variants as
        # well as the .prl and .la files

        set libs_dir ${destroot}${qt_libs_dir}

        ln -s ${tf_full}.framework/${tf}.prl ${libs_dir}/lib${tf}.prl
        ln -s ${tf_full}.la ${libs_dir}/lib${tf}.la
        ln -s ${tf_full}.framework/${tf} ${libs_dir}/lib${tf}.dylib
        ln -s ${tf_full}.framework/${tf} ${libs_dir}/lib${tf}.${qt_major}.dylib
        ln -s ${tf_full}.framework/${tf} ${libs_dir}/lib${tf}.${qt_major}.${qt_minor}.dylib
        ln -s ${tf_full}.framework/${tf} ${libs_dir}/lib${tf}.${qt_major}.${qt_minor}.${qt_patch}.dylib

    }

    # Install documentation.

    xinstall -m 755 -d ${worksrcpath}/${qt_docs_dir}
    xinstall -m 644 -W ${worksrcpath} \
        INSTALL LGPL_EXCEPTION.txt LICENSE.FDL \
        LICENSE.GPL3 LICENSE.LGPL README \
        ${destroot}${qt_docs_dir}

    # Install private headers needed by QtCreator 

    foreach {src_dir include_dir} \
    {corelib QtCore gui QtGui script QtScript declarative QtDeclarative} {
        set dest_dir ${destroot}${qt_frameworks_dir}/${include_dir}.framework/Headers/private
        xinstall -m 755 -d ${dest_dir}
        set files [exec find ${worksrcpath}/src/${src_dir} -type f -name "*_p.h"]
        eval xinstall -m 644 [split ${files}] ${dest_dir}
    }

    # Move .apps into the applications_dir

    xinstall -m 755 -d ${destroot}${qt_apps_dir}
    foreach app [glob ${destroot}/${qt_bins_dir}/*.app] {
        move ${app} ${destroot}${qt_apps_dir}
    }

    # remove 'tests' directory

    file delete -force ${destroot}${prefix}/tests
}

pre-activate {
    # make sure 'none' is selected by qt4_select, so that there is no
    # conflict between it and this port.
    if {[file exists ${prefix}/bin/qt4_select]} {
        if {[exec ${prefix}/bin/qt4_select -s] != "none"} {
            ui_msg "Disabling 'qt4_select' selection."
            system "exec ${prefix}/bin/qt4_select none"
        }
    }
}

variant framework description {Framework Legacy Compatibility Variant} {
    ui_error "${name} variant +framework has been disabled because ${name} now installs as both libraries and frameworks.  Please install ${name} without +framework."
    return -code error "Variant disabled"
}

variant mysql description {MySQL Qt4 Plugin Legacy Compatibility Variant} {
    ui_error "${name} variant +mysql has been replaced by the port 'qt4-mac-mysql55-plugin' and its subports.  Please install ${name} without +mysql, then install your desired MySQL Qt plugin."
    return -code error "Variant disabled"
}

variant odbc description {Enable iODBC SQL Driver} {
    depends_lib-append port:libiodbc
    configure.args-delete -no-sql-odbc
    configure.args-append -plugin-sql-odbc
}

variant psql83 conflicts psql84 psql90 psql91 \
description {PostgreSQL 8.3 Qt4 Plugin Legacy Compatibility Variant} {}

variant psql84 conflicts psql83 psql90 psql91 \
description {PostgreSQL 8.4 Qt4 Plugin Legacy Compatibility Variant} {}

variant psql90 conflicts psql83 psql84 psql91 \
description {PostgreSQL 9.0 Qt4 Plugin Legacy Compatibility Variant} {}

variant psql91 conflicts psql83 psql84 psql90 \
description {PostgreSQL 9.1 Qt4 Plugin Legacy Compatibility Variant} {}

if {[variant_isset psql83]} {
    set psql_version "83"
} elseif {[variant_isset psql84]} {
    set psql_version "84"
} elseif {[variant_isset psql90]} {
    set psql_version "90"
} elseif {[variant_isset psql91]} {
    set psql_version "91"
}

if {${psql_version} != ""} {
    ui_error "${name} variant +psql${psql_version} has been replaced by the port 'qt4-mac-postgresql91-plugin' and its subports.  Please install ${name} without +psql${psql_version}, then install your desired PostgreSQL Qt plugin."
    return -code error "Variant disabled"
}

variant sqlite2 description {Enable SQLite version 2 SQL Driver} {
    depends_lib-append port:sqlite2
    configure.args-delete -no-sql-sqlite2
    configure.args-append -plugin-sql-sqlite2
}

variant raster description {Use raster graphics system by default} {
    configure.args-append -graphicssystem raster
}

variant demos description {Build demos} {}

if {![variant_isset demos]} {
   configure.args-append -nomake demos
}

variant examples description {Build examples} {}

if {![variant_isset examples]} {
   configure.args-append -nomake examples
}

variant debug description {Build both release and debug library} {}

if {[variant_isset debug]} {
    configure.args-append -debug-and-release -declarative-debug
} else {
    configure.args-append -release -no-declarative-debug
}

#variant quartz conflicts x11
variant quartz \
description {Build for Native OSX Quartz GUI, not X11 (default)} {}

#variant x11 conflicts quartz \
#description {Build for X11 GUI, not Native OSX Quartz} {}

# if neither +x11 or +quartz were specified, default to the latter
#if {![variant_isset quartz] && ![variant_isset x11]} {
    default_variants +quartz
#}

# check to see if user specified just "-quartz", which can't work.
#if {![variant_isset quartz] && ![variant_isset x11]} {
#    return -code error \
#"\n\nThe variant -quartz will not work alone.
#Please select one of +quartz or +x11 as a variant.\n"
#}

#if {[variant_isset x11]} {
#    return -code error "\n\nVariant +x11 is not yet functional; \
#please use +quartz for now.\n"
#}

livecheck.type      regex
livecheck.url       http://get.qt.nokia.com/qt/source/
livecheck.regex     "qt-everywhere-opensource-src-(\[0-9a-z.-\]+)${extract.suffix}"
