# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           compilers 1.0

name                ape
version             2.2.0
categories          science
platforms           darwin
license             GPL-2+
maintainers         dstrubbe

description         A tool for generating atomic pseudopotentials within a Density-Functional Theory framework.
long_description    APE (Atomic Pseudopotentials Engine) is a computer package designed to generate \
                    and test norm-conserving pseudo-potentials within Density Functional Theory. \
                    The generated pseudo-potentials can be either non-relativistic, scalar \
                    relativistic or fully relativistic and can explicitly include \
                    semi-core states. A wide range of exchange-correlation functionals is included. \
                    APE can generate pseudopotential files for use with SIESTA, Abinit, Octopus, \
                    and Quantum Espresso.
homepage            http://www.tddft.org/programs/APE
master_sites        ${homepage}/sites/default/files

checksums           rmd160  4f6e5ed09f354cfec12420354abf4346a9993d3e \
                    sha256  6a64756cf53c89b99cb311f0ef2cd48ebc97474310bb99bac36f0f85a97d3d20

depends_lib         port:libxc port:gsl

configure.args      --with-libxc-prefix=${prefix}
configure.optflags  -O3

# uses C too, could introduce variants for that too. would need to sort out FCCPP usage.
compilers.choose    fc cc cpp
compilers.setup     require_fortran -g95 -clang -gfortran -llvm

# g95 is disabled because of constructs regarded as illegal by this compiler.
# :info:build In file mesh_ape.f90:58
# :info:build
# :info:build     integer, private :: type !mesh type
# :info:build                     1
# :info:build Error: PRIVATE attribute at (1) is not allowed in a TYPE definition

compilers.enforce_fortran libxc
# libxc does not have universal variant, so APE cannot either
universal_variant   no

# Note: numerous tests will probably fail.
test.run            yes
test.target         check

# APE configure script does not set or check FCCPP automatically.
pre-configure {
#    if {[variant_isset g95]} {
#        configure.args-append  FCCPP="${configure.cc} -P -E -ansi"
#    } else {
        configure.args-append  FCCPP="${configure.cpp} -ansi"
#    }
}

# make compatible with libxc 2.1.x
patchfiles          patch-src-parser_symbols.F90.diff

livecheck.type      regex
livecheck.url       ${homepage}
livecheck.regex     New version (\[0-9.\]+)</a>
