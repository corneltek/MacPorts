--- src/classad/util.cpp.orig	2013-10-27 21:00:59.000000000 -0700
+++ src/classad/util.cpp	2013-10-27 21:01:02.000000000 -0700
@@ -24,36 +24,10 @@
 #include "classad/util.h"
 #include <limits.h>
 #include <math.h>
+#include <boost/math/special_functions/fpclassify.hpp>
 
 using namespace std;
 
-// The following definitions of isnan() and isinf() are recommended here:
-// http://www.gnu.org/software/libtool/manual/autoconf/Function-Portability.html
-// We have observed isinf(HUGE_VAL) to return 0 on HPUX, but only apparently
-// because of an errant #pragma extern applied to this constant in the system
-// header files.  When passed a normal variable assigned to HUGE_VAL, isinf()
-// does the right thing on that platform.
-
-#ifndef isnan
-# define isnan(x) \
-    (sizeof (x) == sizeof (long double) ? isnan_ld (x) \
-     : sizeof (x) == sizeof (double) ? isnan_d (x) \
-     : isnan_f (x))
-static inline int isnan_f  (float       x) { return x != x; }
-static inline int isnan_d  (double      x) { return x != x; }
-static inline int isnan_ld (long double x) { return x != x; }
-#endif
-          
-#ifndef isinf
-# define isinf(x) \
-    (sizeof (x) == sizeof (long double) ? isinf_ld (x) \
-     : sizeof (x) == sizeof (double) ? isinf_d (x) \
-     : isinf_f (x))
-static inline int isinf_f  (float       x) { return isnan (x - x); }
-static inline int isinf_d  (double      x) { return isnan (x - x); }
-static inline int isinf_ld (long double x) { return isnan (x - x); }
-#endif
-
 namespace classad {
 
 #ifdef WIN32
@@ -406,42 +380,9 @@
     return leap_year;
 }
 
-#ifdef WIN32
-int classad_isinf(double x) 
-{
-
-	int result;
-	result = _fpclass(x);
-
-	if (result == _FPCLASS_NINF ) {
-		/* negative infinity */
-		return -1;
-	} else if ( result == _FPCLASS_PINF ) {
-		/* positive infinity */
-		return 1;
-	} else {
-		/* otherwise */
-		return 0;
-	}
-}
-#elif (defined (__SVR4) && defined (__sun)) || defined(__APPLE_CC__)
-#ifndef __APPLE_CC__
-#include <ieeefp.h>
-#endif
-int classad_isinf(double x) 
-{ 
-    if (finite(x) || x != x) {
-        return 0;
-    } else if (x > 0) {
-        return 1;
-    } else {
-        return -1;
-    }
-}
-#else
 int classad_isinf(double x)
 {
-    if (!isinf(x) || x != x) {
+    if (boost::math::isfinite(x) || boost::math::isnan(x)) {
         return 0;
     } else if (x > 0) {
         return 1;
@@ -449,11 +390,10 @@
         return -1;
     }
 }
-#endif 
 
 int classad_isnan(double x)
 {
-    return isnan(x);
+    return boost::math::isnan(x);
 }
 
 } // classad
