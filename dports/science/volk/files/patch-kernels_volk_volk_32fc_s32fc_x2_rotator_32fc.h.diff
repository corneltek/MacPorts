--- kernels/volk/volk_32fc_s32fc_x2_rotator_32fc.h.orig
+++ kernels/volk/volk_32fc_s32fc_x2_rotator_32fc.h
@@ -411,11 +411,11 @@ static inline void volk_32fc_s32fc_x2_rotator_32fc_a_avx(lv_32fc_t* outVector, c
         cPtr += 4;
     }
     if (i) {
-        tmp1 = _mm_mul_ps(phase_Val, phase_Val);
-        tmp2 = _mm_hadd_ps(tmp1, tmp1);
-        tmp1 = _mm_shuffle_ps(tmp2, tmp2, 0xD8);
-        tmp2 = _mm_sqrt_ps(tmp1);
-        phase_Val = _mm_div_ps(phase_Val, tmp2);
+        tmp1 = _mm256_mul_ps(phase_Val, phase_Val);
+        tmp2 = _mm256_hadd_ps(tmp1, tmp1);
+        tmp1 = _mm256_shuffle_ps(tmp2, tmp2, 0xD8);
+        tmp2 = _mm256_sqrt_ps(tmp1);
+        phase_Val = _mm256_div_ps(phase_Val, tmp2);
     }
 
     _mm256_storeu_ps((float*)phase_Ptr, phase_Val);
@@ -517,11 +517,11 @@ static inline void volk_32fc_s32fc_x2_rotator_32fc_u_avx(lv_32fc_t* outVector, c
         cPtr += 4;
     }
     if (i) {
-        tmp1 = _mm_mul_ps(phase_Val, phase_Val);
-        tmp2 = _mm_hadd_ps(tmp1, tmp1);
-        tmp1 = _mm_shuffle_ps(tmp2, tmp2, 0xD8);
-        tmp2 = _mm_sqrt_ps(tmp1);
-        phase_Val = _mm_div_ps(phase_Val, tmp2);
+        tmp1 = _mm256_mul_ps(phase_Val, phase_Val);
+        tmp2 = _mm256_hadd_ps(tmp1, tmp1);
+        tmp1 = _mm256_shuffle_ps(tmp2, tmp2, 0xD8);
+        tmp2 = _mm256_sqrt_ps(tmp1);
+        phase_Val = _mm256_div_ps(phase_Val, tmp2);
     }
 
     _mm256_storeu_ps((float*)phase_Ptr, phase_Val);
