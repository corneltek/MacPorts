# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0

name                gmic
version             1.7.0
license             CeCILL
categories          science
platforms           darwin
maintainers         nomaintainer

description         G'MIC is an interpreter of image processing macros \
                    (stand-alone binary and GIMP plug-in).

long_description    G'MIC stands for GREYC's Magic Image Converter. It is \
                    focused on the design of possibly complex pipelines for \
                    converting, manipulating, filtering and visualizing \
                    generic 1d/2d/3d multi-spectral image datasets. This \
                    includes classical color images, but also more complex \
                    data as image sequences or 3D volumetric images. G'MIC \
                    has been designed with portability in mind and runs on \
                    different platforms (Windows, Unix, Mac OS X).

homepage            http://gmic.eu
master_sites        http://gmic.eu/files/source/

distfiles           ${name}_${version}${extract.suffix}

worksrcdir          ${worksrcdir}/src

checksums           rmd160  fe208ee03f7b2d810fd77bd44d5714f13a1a5324 \
                    sha256  a114ca67c988a3be6eca847d2540fcc15dd98bcdaab00dba88bda2b5fdf249db

depends_build       port:pkgconfig

depends_lib         path:lib/libavcodec.dylib:ffmpeg \
                    port:GraphicsMagick \
                    port:libpng \
                    port:jpeg \
                    port:tiff \
                    port:zlib \
                    port:openexr \
                    port:ilmbase \
                    port:fftw-3 \
                    port:xorg-libXext \
                    port:gimp2

# This also disables zart which requires qmake
patchfiles          patch-Makefile.diff \
                    libcxx.patch

post-patch {
    reinplace  "s|@PREFIX@|${prefix}|g" ${worksrcpath}/Makefile
}

use_configure       no

# opencv is not universal
universal_variant   no

# build uses far more memory per job than MacPorts expects
use_parallel_build  no

# There is one .c program that needs CC
build.args-append   CC="${configure.cc}" \
                    CFLAGS="${configure.cflags} [get_canonical_archflags cc]" \
                    CXX=${configure.cxx} \
                    CXXFLAGS="${configure.cxxflags} [get_canonical_archflags cxx]" \
                    CPP="${configure.cpp}" \
                    LDFLAGS="[get_canonical_archflags ld]" \
                    IS_GCC=yes \
                    OPT_CFLAGS="${configure.optflags}"

livecheck.url       http://gmic.eu/files/source/
livecheck.regex     ${name}_(\[0-9.\]+)${extract.suffix}
