--- gr-audio/lib/osx/osx_common.h.orig
+++ gr-audio/lib/osx/osx_common.h
@@ -35,9 +35,9 @@ namespace osx {
 #define check_error_and_throw(err,what,throw_str)			\
   if(err) {                                                             \
     OSStatus error = static_cast<OSStatus>(err);                        \
-    char err_str[5];                                                    \
-    *((UInt32*)err_str) = error;					\
-    err_str[4] = 0;							\
+    char err_str[sizeof(OSStatus)+1];					\
+    memcpy((void*)(&err_str), (void*)(&error), sizeof(OSStatus));	\
+    err_str[sizeof(OSStatus)] = 0;					\
     GR_LOG_FATAL(d_logger, boost::format(what));			\
     GR_LOG_FATAL(d_logger, boost::format("  Error# %u ('%s')")		\
 		 % error % err_str);					\
@@ -49,9 +49,9 @@ namespace osx {
 #define check_error(err,what)                                           \
   if(err) {                                                             \
     OSStatus error = static_cast<OSStatus>(err);                        \
-    char err_str[5];                                                    \
-    *((UInt32*)err_str) = error;					\
-    err_str[4] = 0;							\
+    char err_str[sizeof(OSStatus)+1];					\
+    memcpy((void*)(&err_str), (void*)(&error), sizeof(OSStatus));	\
+    err_str[sizeof(OSStatus)] = 0;					\
     GR_LOG_WARN(d_logger, boost::format(what));				\
     GR_LOG_WARN(d_logger, boost::format("  Error# %u ('%s')")		\
 		   % error % err_str);					\
commit aead6f76ab85755c5ae4e561f0560247eb8b2a97
Author: Michael Dickens <mlk@alum.mit.edu>
Date:   Thu Jun 26 19:35:12 2014 -0400

    gr-audio OSX: fix call to AudioHardwareRemovePropertyListener to match API.

--- gr-audio/lib/osx/osx_source.cc.orig
+++ gr-audio/lib/osx/osx_source.cc
@@ -933,8 +933,7 @@ namespace gr {
       err = AudioHardwareRemovePropertyListener
 	(kAudioHardwarePropertyDevices,
 	 reinterpret_cast<AudioHardwarePropertyListenerProc>
-	   (&osx_source::hardware_listener)
-	 reinterpret_cast<void*>(this));
+	   (&osx_source::hardware_listener));
 #if _OSX_AU_DEBUG_
       check_error(err, "AudioObjectRemovePropertyListener hardware");
 #endif
@@ -943,8 +942,7 @@ namespace gr {
 	err = AudioHardwareRemovePropertyListener
 	  (kAudioHardwarePropertyDefaultInputDevice,
 	   reinterpret_cast<AudioHardwarePropertyListenerProc>
-	     (&osx_source::default_listener),
-	   reinterpret_cast<void*>(this));
+	     (&osx_source::default_listener));
 #if _OSX_AU_DEBUG_
 	check_error(err, "AudioObjectRemovePropertyListener default");
 #endif
commit 3d76c05bca4efb8f3aa8187135986c28a4e7fae8
Author: Michael Dickens <mlk@alum.mit.edu>
Date:   Thu Jun 26 20:33:35 2014 -0400

    volk cmake: if the CPU is not x86, eliminate all Intel SIMD.

--- volk/lib/CMakeLists.txt.orig
+++ volk/lib/CMakeLists.txt
@@ -205,6 +205,22 @@ if(${HAVE_AVX_CVTPI32_PS})
     add_definitions(-DHAVE_AVX_CVTPI32_PS)
 endif()
 
+########################################################################
+# if the CPU is not x86, eliminate all Intel SIMD
+########################################################################
+
+if(NOT CPU_IS_x86)
+    OVERRULE_ARCH(3dnow "Architecture is not x86 or x86_64")
+    OVERRULE_ARCH(mmx "Architecture is not x86 or x86_64")
+    OVERRULE_ARCH(sse "Architecture is not x86 or x86_64")
+    OVERRULE_ARCH(sse2 "Architecture is not x86 or x86_64")
+    OVERRULE_ARCH(sse3 "Architecture is not x86 or x86_64")
+    OVERRULE_ARCH(ssse3 "Architecture is not x86 or x86_64")
+    OVERRULE_ARCH(sse4_a "Architecture is not x86 or x86_64")
+    OVERRULE_ARCH(sse4_1 "Architecture is not x86 or x86_64")
+    OVERRULE_ARCH(sse4_2 "Architecture is not x86 or x86_64")
+    OVERRULE_ARCH(avx "Architecture is not x86 or x86_64")
+endif(NOT CPU_IS_x86)
 
 ########################################################################
 # implement overruling in the ORC case,
commit a59f68f0ccb80d8f6bc74899b7abd2cc6b62004c
Author: Michael Dickens <mlk@alum.mit.edu>
Date:   Mon Jun 23 22:21:58 2014 -0400

    cmake: remove SIZE_T_32 SWIG code for handling std::vector<size_t>.

--- cmake/Modules/GrSwig.cmake.orig
+++ cmake/Modules/GrSwig.cmake
@@ -105,18 +105,6 @@ endfunction(GR_SWIG_MAKE_DOCS)
 macro(GR_SWIG_MAKE name)
     set(ifiles ${ARGN})
 
-    # Shimming this in here to take care of a SWIG bug with handling
-    # vector<size_t> and vector<unsigned int> (on 32-bit machines) and
-    # vector<long unsigned int> (on 64-bit machines). Use this to test
-    # the size of size_t, then set SIZE_T_32 if it's a 32-bit machine
-    # or not if it's 64-bit. The logic in gr_type.i handles the rest.
-    INCLUDE (CheckTypeSize)
-    CHECK_TYPE_SIZE("size_t" SIZEOF_SIZE_T)
-    CHECK_TYPE_SIZE("unsigned int" SIZEOF_UINT)
-    if(${SIZEOF_SIZE_T} EQUAL ${SIZEOF_UINT})
-      list(APPEND GR_SWIG_FLAGS -DSIZE_T_32)
-    endif(${SIZEOF_SIZE_T} EQUAL ${SIZEOF_UINT})
-
     #do swig doc generation if specified
     if (GR_SWIG_DOC_FILE)
         set(GR_SWIG_DOCS_SOURCE_DEPS ${GR_SWIG_SOURCE_DEPS})
--- gnuradio-runtime/swig/gr_types.i.orig
+++ gnuradio-runtime/swig/gr_types.i
@@ -80,15 +80,4 @@ namespace std {
 %template(gr_vector_vector_complexf) std::vector< std::vector< std::complex<float> > >;
 %template(gr_vector_vector_complexd) std::vector< std::vector< std::complex<double> > >;
 
-// Fix for Issue #529
-#ifdef SIZE_T_32
-  // On 32-bit systems, whenever we see std::vector<size_t>, replace it
-  // with vector<unsigned int>
-  %apply std::vector<unsigned int> { std::vector<size_t> };
-#else
-  // On 64-bit systems, whenever we see std::vector<size_t>, replace it
-  // with vector<long unsigned int>
-  %apply std::vector<long unsigned int> { std::vector<size_t> };
-#endif
-
 #endif /* SWIG_GR_TYPES_I */
