--- volk/kernels/volk/volk_32fc_deinterleave_32f_x2.h.orig
+++ volk/kernels/volk/volk_32fc_deinterleave_32f_x2.h
@@ -41,9 +41,6 @@ static inline void volk_32fc_deinterleave_32f_x2_a_avx(float* iBuffer, float* qB
   float* qBufferPtr = qBuffer;
 
   unsigned int number = 0;
-  // Mask for real and imaginary parts
-  int realMask = 0x88;
-  int imagMask = 0xdd;
   const unsigned int eighthPoints = num_points / 8;
   __m256 cplxValue1, cplxValue2, complex1, complex2, iValue, qValue;
   for(;number < eighthPoints; number++){
@@ -58,9 +55,9 @@ static inline void volk_32fc_deinterleave_32f_x2_a_avx(float* iBuffer, float* qB
     complex2 = _mm256_permute2f128_ps(cplxValue1, cplxValue2, 0x31);
 
     // Arrange in i1i2i3i4 format
-    iValue = _mm256_shuffle_ps(complex1, complex2, realMask);
+    iValue = _mm256_shuffle_ps(complex1, complex2, 0x88);
     // Arrange in q1q2q3q4 format
-    qValue = _mm256_shuffle_ps(complex1, complex2, imagMask);
+    qValue = _mm256_shuffle_ps(complex1, complex2, 0xdd);
 
     _mm256_store_ps(iBufferPtr, iValue);
     _mm256_store_ps(qBufferPtr, qValue);
--- volk/kernels/volk/volk_32fc_deinterleave_imag_32f.h.orig
+++ volk/kernels/volk/volk_32fc_deinterleave_imag_32f.h
@@ -37,7 +37,6 @@
 static inline void volk_32fc_deinterleave_imag_32f_a_avx(float* qBuffer, const lv_32fc_t* complexVector, unsigned int num_points){
   unsigned int number = 0;
   const unsigned int eighthPoints = num_points / 8;
-  int imagMask = 0xdd;
   const float* complexVectorPtr = (const float*)complexVector;
   float* qBufferPtr = qBuffer;
 
@@ -54,7 +53,7 @@ static inline void volk_32fc_deinterleave_imag_32f_a_avx(float* qBuffer, const l
     complex2 = _mm256_permute2f128_ps(cplxValue1, cplxValue2, 0x31);
 
     // Arrange in q1q2q3q4 format
-    qValue = _mm256_shuffle_ps(complex1, complex2, imagMask);
+    qValue = _mm256_shuffle_ps(complex1, complex2, 0xdd);
     //iValue = _mm_shuffle_ps(cplxValue1, cplxValue2, _MM_SHUFFLE(3,1,3,1));
 
     _mm256_store_ps(qBufferPtr, qValue);
