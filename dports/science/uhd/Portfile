# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           cmake 1.0
PortGroup           github 1.0

name                uhd
categories          science comms
maintainers         michaelld
description         USRP Hardware Driver for Ettus Research Products
license             GPL-3+
platforms           darwin

# common directory for storing downloaded tarballs

dist_subdir         uhd

if {${subport} eq ${name}} {

    long_description ${description}: \
Provides the release version, which is typically updated every month or so.

    set base_version 3.8.0
    github.setup    EttusResearch uhd 00[join [split ${base_version} "."] "_00"] release_
    version         ${base_version}
    conflicts       uhd-devel
    checksums       rmd160 9c1ddfc1b0c1df7e7747fc242c7085ebc2347380 \
                    sha256 a1e5b359cbf7decafabc95b848184809884583eba34b429d5ee9dd51a0c32742

    # overload the github livecheck regex to look for versions that
    # are just numbers and '_', no letters (e.g., "3.7.3_rc2").

    livecheck.regex archive/[join ${github.tag_prefix} ""](\[0-9_\]+)${extract.suffix}

}

subport uhd-devel {

    long_description ${description}: \
Provides the UHD GIT maint or master branch, depending on which is more advanced, and is typically updated every few days to week.

    github.setup    EttusResearch uhd 3bed14aa13176d7fa110be08235c2c5678dd8a0c
    version         20141122
    name            uhd-devel
    conflicts       uhd
    checksums       rmd160 99124a78721c3e9001676842e88ba9883e4e7fc5 \
                    sha256 bd3f3eb7c5d5cfcc5ddb1425e3cddc378bd6635e60ef9196c26dac292145e156

    # overload the github livecheck URL with the maint branch,
    # when it is more advanced; comment out for master.

    # livecheck.url   ${github.homepage}/commits/maint.atom

}

# override the github Portgroup's homepage setting

homepage             http://uhd.ettus.com/

depends_lib-append   port:boost port:ncurses

depends_build-append port:pkgconfig

# do VPATH build

post-extract        { file mkdir ${workpath}/build }
configure.dir       ${workpath}/build
build.dir           ${workpath}/build

# temporary patch to fix nirio compiling on some older compilers;
# this code is not actually used by OSX.

patchfiles-append   patch-host_lib_transport_nirio_niriok_proxy_impl_v1.cpp.diff

# remove top-level library path, such that internal libraries are used
# instead of any already-installed ones.

configure.ldflags-delete -L${prefix}/lib

# set last configure argument to the reletive path
# to the top-level cmake source

configure.post_args ../${worksrcdir}/host

# explicitly set CMake flags to get MacPorts' curses;
# these are used by some variants, and won't hurt the others.

configure.args-append \
    -DCURSES_CURSES_H_PATH=${prefix}/include \
    -DCURSES_CURSES_LIBRARY=${prefix}/lib/libcurses.dylib \
    -DCURSES_FORM_LIBRARY=${prefix}/lib/libform.dylib \
    -DCURSES_HAVE_CURSES_H=${prefix}/include/curses.h \
    -DCURSES_INCLUDE_PATH=${prefix}/include \
    -DCURSES_LIBRARY=${prefix}/lib/libcurses.dylib \
    -DCURSES_NCURSES_LIBRARY=${prefix}/lib/libncurses.dylib

# directory to install shared UHD files
# (examples, images, modules, tests, utilities)

configure.args-append \
    -DPKG_LIB_DIR=${prefix}/share/uhd

# directory to install all CMake files; internal appends "uhd"

configure.args-append \
    -DCMAKE_MODULES_DIR=${prefix}/share/cmake

# be verbose when building, for debugging purposes

build.post_args VERBOSE=1

# shortcut to installing all variants except Python

variant full description {Deprecated legacy variant} {}
default_variants -full

# per user concensus: enable all variants except +debug and +universal

default_variants +docs +examples +libusb +manual +test +orc +manpages

# set Python variants

set pythons_suffixes {26 27}
global chosen_python_suffix
set chosen_python_suffix ""

set pythons_ports {}
foreach s ${pythons_suffixes} {
    lappend pythons_ports python${s}
}

foreach s ${pythons_suffixes} {
    set p python${s}
    set v [join [split ${s} ""] "."]
    set i [lsearch -exact ${pythons_ports} ${p}]
    set c [lreplace ${pythons_ports} ${i} ${i}]
    eval [subst {
        variant ${p} description "Build UHD for Python ${v}" \
            conflicts ${c} {

            set chosen_python_suffix ${s}
            depends_lib-append \
                port:${p} \
                port:py${s}-cheetah

            # specify that Python version to use
            configure.args-append \
                -DPYTHON_EXECUTABLE=${prefix}/bin/python${v}

            # after destroot, have uhd fetch its images into the
            # destroot area, so that they are also tracked by MacPorts

            post-destroot {
                ui_debug "${prefix}/bin/python${v} ${destroot}${prefix}/share/uhd/utils/uhd_images_downloader.py --install-location=${destroot}${prefix}/share/uhd/images"
                system "${prefix}/bin/python${v} ${destroot}${prefix}/share/uhd/utils/uhd_images_downloader.py --install-location=${destroot}${prefix}/share/uhd/images"
            }
        }
    }]
}

# if no python variant is set, default to 2.7
if {![variant_isset python26] &&
    ![variant_isset python27]} {
    default_variants +python27
}

# make sure -python27 was not used alone
if {![variant_isset python26] &&
    ![variant_isset python27]} {
    return -code error "Exactly one Python variant must be selected."
}

variant test description {enable tests} {
    configure.args-append -DENABLE_TESTS=ON
    test.run yes
}

if {![variant_isset test]} {
    configure.args-append -DENABLE_TESTS=OFF
}

variant examples description {enable examples} {
    configure.args-append -DENABLE_EXAMPLES=ON
}

if {![variant_isset examples]} {
    configure.args-append -DENABLE_EXAMPLES=OFF
}

variant libusb description {enable USB support via libusb version 1.0} {
    depends_lib-append port:libusb
    configure.args-append \
        -DENABLE_USB=ON \
        -DLIBUSB_INCLUDE_DIRS=${prefix}/include/libusb-1.0
}

if {![variant_isset libusb]} {
    configure.args-append -DENABLE_USB=OFF
}

variant docs description {build documentation} {
    depends_lib-append port:doxygen
    configure.args-append -DENABLE_DOXYGEN=ON
}

if {![variant_isset docs]} {
    configure.args-append -DENABLE_DOXYGEN=OFF
}

variant manual description {build manual} {
    depends_lib-append \
        port:py${chosen_python_suffix}-docutils
    configure.args-append -DENABLE_MANUAL=ON
}

if {![variant_isset manual]} {
    configure.args-append -DENABLE_MANUAL=OFF
}

variant manpages description {build man pages} {
    depends_run-append port:gzip
    configure.args-append -DENABLE_MAN_PAGES=ON
}

if {![variant_isset manpages]} {
    configure.args-append -DENABLE_MAN_PAGES=OFF
}

variant orc description {enable ORC support} {
    depends_lib-append port:orc
    configure.args-append -DENABLE_ORC=ON
}

if {![variant_isset orc]} {
    configure.args-append -DENABLE_ORC=OFF
}
