# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           mpi 1.0

name                berkeleygw
version             1.1-beta2
categories          science
platforms           darwin
license             BSD
maintainers         dstrubbe

description         GW/Bethe-Salpeter equation
long_description    BerkeleyGW is a set of computer codes that calculate the quasiparticle properties \
                    and the optical responses of a large variety of materials from bulk periodic crystals \
                    to nanostructures such as slabs, wires and molecules, using many-body perturbation theory \
                    (the GW approximation and Bethe-Salpeter equation).
homepage            http://www.berkeleygw.org
master_sites        ${homepage}/releases

checksums           rmd160  7e1ce392da45282ef878ed1a53b34184d96c7ca2 \
                    sha256  83deea17ccbd50e9e505f69fadf858595793f9b853ec012722659100d5cf8885

distfiles           BGW-${version}.tar.gz

depends_lib         port:atlas \
                    port:fftw
# fftw port always has a Fortran variant

# WHAT DO WE DO WHEN meaning of 'gfortran' is updated? No record... Must rename to gfortran5 etc.

# test hangs in Epsilon with OpenMPI, for unknown reason.
# no appropriate way to set cpp for gcc5, gcc6, or clang
# dragonegg fails to link with error
#   Undefined symbols for architecture x86_64:
#   "_llvm.objectsize.i64", referenced from:
#   _spg_get_international in libsymspg.a(spglib.o)
#   _spg_get_schoenflies in libsymspg.a(spglib.o)
compilers.choose    fc cc cxx cpp
mpi.setup           require_fortran -dragonegg -openmpi -openmpi_devel

# just for cpp
if {[variant_isset g95] || [variant_isset gcc5] || [variant_isset gcc6] || [variant_isset gfortran]} {
    depends_build-append  port:llvm-gcc42
}

if {[mpi_variant_isset]} {
    depends_lib-append  port:scalapack
}

# fftw is not universal
universal_variant   no

# FIXME: add options for OpenBLAS(-devel)/accelerate; threads

# FIXME: this unnecessarily enforces scalapack also had same C compiler as we are using.
if {[mpi_variant_isset]} {
    mpi.enforce_variant     scalapack
}

configure {
    system -W ${worksrcpath} "sed 's|/opt/local|${prefix}|' < config/generic.serial.macos.mk > arch.mk"
    reinplace -W ${worksrcpath} "s|MATHFLAG += -DHDF5||" arch.mk
    if {![variant_isset hdf5]} {
        system -W ${worksrcpath} "echo 'HDF5LIB=' >> arch.mk"
    }
}

build.target	    all-flavors
use_parallel_build  yes

destroot.post_args  INSTDIR=${destroot}${prefix}

test.run            yes

# known problems to be fixed: Graphene incorrectly has kernel_k_interpolation.
# Si2-SAPO/sapo.inp has pointer being freed was not allocated

pre-test {
    if {[mpi_variant_isset]} {
        test.args-append    TESTSCRIPT="MPIEXEC=${prefix}/bin/${mpi.exec} make check-parallel" PARAFLAG=-DMPI
        test.target         check-jobscript

        if {![catch {sysctl hw.ncpu} ncpus]} {
            test.env-append OCT_TEST_NJOBS=$ncpus
        }
        ui_msg "Running testsuite in parallel with $ncpus MPI tasks"       
    } else {
        test.target         check
    }
}

notes {
    For the purposes of record-keeping and support, please register an account at www.berkeleygw.org.
}

pre-build {
    build.args-append   LINK="${configure.fc}" CC_COMP=${configure.cxx} C_COMP=${configure.cc} C_LINK=${configure.cxx} \
                        LAPACKLIB="-L${prefix}/lib/ -lsatlas"

    set mathflag ""
    if {[variant_isset hdf5]} {
        set mathflag "${mathflag} -DHDF5"
    }
    
    if {[variant_isset fftw3]} {
        build.args-append  FFTWLIB="-L${prefix}/lib/ -lfftw3"
        set mathflag "${mathflag} -DUSEFFTW3"
    } else {
        build.args-append  FFTWLIB="-L${prefix}/lib/ -ldfftw"
    }

    if {[variant_isset g95] || [variant_isset gcc5] || [variant_isset gcc6] || [variant_isset gfortran]} {
        set configure.cpp     llvm-cpp-4.2
    }

    if {[variant_isset g95]} {
        build.args-append COMPFLAG="-DG95" FCPP="${configure.cpp} -P -ansi" \
                          F90free="${prefix}/bin/g95 -ffree-form -ffree-line-length-huge -fno-second-underscore" \
                          MOD_OPT="-fmod="
        # test, destroot args needed just to avoid trying to build in the test/openmp directory unnecessarily
        test.args-append  COMPFLAG="-DG95"
        destroot.args-append  COMPFLAG="-DG95"
    } else {
        # gcc is default in arch.mk so most things do not need to be modified
        build.args-append FCPP="${configure.cpp} -ansi" \
            F90free="${configure.fc} -ffree-form -ffree-line-length-none -fno-second-underscore"
    }

    if {[mpi_variant_isset]} {
        set mathflag "${mathflag} -DUSESCALAPACK"
        build.args-append PARAFLAG="-DMPI" C_PARAFLAG="-DPARA" SCALAPACKLIB="-L${prefix}/lib/ -lscalapack"
    }

    build.args-append   MATHFLAG="${mathflag}"
    test.args-append    MATHFLAG="${mathflag}"
}

variant debug description {Add debug flags for more checking and output, but slower runs.} {
    build.args-append    DEBUGFLAG="-DDEBUG -DVERBOSE"
}

variant hdf5 description {Build with HDF5 support for faster epsmat I/O} {
    depends_lib-append          port:hdf5
    require_active_variants     port:hdf5 hl
    compilers.enforce_fortran   hdf5
}

variant fftw3 description {Build with FFTW-3 rather than FFTW-2 for better performance} {
    depends_lib-replace         port:fftw port:fftw-3
    compilers.enforce_some_fortran  fftw-3
}

livecheck.type      none
# This is broken currently due to changes in the settings to the code's webpage.
#livecheck.type      regex
#livecheck.url       ${homepage}/?q=node/6
#livecheck.regex     BGW-(\[0-9.\]+).tar.gz
