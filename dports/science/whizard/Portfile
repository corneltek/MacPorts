# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0

name                whizard
version             2.2.5
categories          science
platforms           darwin
maintainers         desy.de:juergen.reuter desy.de:whizard
license             GPL-2+

description         Generator of high-energy physics events

long_description    WHIZARD is a program system designed for the efficient \
                    calculation of multi-particle scattering cross sections \
                    and simulated event samples. Tree-level matrix elements \
                    are generated automatically for arbitrary partonic \
                    processes by using the Optimized Matrix Element Generator O'Mega. \
                    Matrix elements obtained by alternative methods (e.g., \
                    including loop corrections) may be interfaced as well. \
                    The program is able to calculate numerically stable signal \
                    and background cross sections and generate unweighted \
                    event samples with reasonable efficiency for processes \
                    with up to eight final-state particles\; more particles are \
                    possible. For more particles, there is the option to generate \
                    processes as decay cascades including complete spin correlations.

homepage            http://whizard.hepforge.org/
master_sites        http://www.hepforge.org/archive/whizard/

checksums           rmd160  576af9ac239f6b762e1df444ca4a7070f0b95c58 \
                    sha256  8bdd4877a7aff147b3ddfd2a41f978e8d0aa6ad4742a9e468041322c01941e97

depends_build       port:ocaml

configure.args      --enable-fc-openmp

use_parallel_build  yes

test.run            yes
test.target         check

variant gcc47 conflicts gcc48 gcc49 gcc5 description {Use GCC 4.7} {
    configure.compiler          macports-gcc-4.7
}

variant gcc48 conflicts gcc47 gcc49 gcc5 description {Use GCC 4.8} {
    configure.compiler          macports-gcc-4.8
}

variant gcc49 conflicts gcc47 gcc48 gcc5 description {Use GCC 4.9} {
    configure.compiler          macports-gcc-4.9
}

variant gcc5 conflicts gcc47 gcc48 gcc49 description {Use GCC 5} {
    configure.compiler          macports-gcc-5
}

if {![variant_isset gcc47] && ![variant_isset gcc48] && ![variant_isset gcc5]} {
    default_variants            +gcc49
}

livecheck.type      regex
livecheck.url       [lindex ${master_sites} 0]
livecheck.regex     ${name}-(\[0-9.\]+)${extract.suffix}
