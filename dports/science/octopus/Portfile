# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           mpi 1.0

name                octopus
version             5.0.0
categories          science
platforms           darwin
license             GPL-2+
maintainers         dstrubbe

description         A real-space (time-dependent) density-functional theory code.
long_description    Octopus is a scientific program aimed at ab initio virtual experimentation \
                    on a hopefully ever-increasing range of system types. \
                    Electrons are described quantum-mechanically within density-functional \
                    theory (DFT), in its time-dependent form (TDDFT) when doing simulations \
                    in time. Nuclei are described classically as point particles. Electron-nucleus \
                    interaction is described within the pseudopotential approximation.
homepage            http://www.tddft.org/programs/octopus
master_sites        ${homepage}/download/${version}

checksums           rmd160  2015e1adeab2ee00f87c0ee9a7eac21ee81b8666 \
                    sha256  47ed2a61022d20107bd9d8b05b65483fa280519833e93f2c79bbb51b8e3bea8b

# clang38: errors on operate.o
compiler.blacklist  macports-clang-3.8

# no acceptable way to set FCCPP for gcc5 or gcc6 though gfortran is ok;
# clang versions are unnecessary
# dragonegg34-gcc46 segfaults on varia.c
mpi.setup           require_fortran -dragonegg34 -gcc5 -gcc6 -clang
compilers.enforce_fortran libxc

depends_lib         port:libxc port:fftw-3 port:gsl
# openblas or accelerate/veclibfort instead of atlas?

configure.args      --with-libxc-prefix=${prefix} \
                    --disable-gdlib --without-sparskit --with-netcdf-prefix=no \
                    --with-etsf-io-prefix=no --with-berkeleygw-prefix=no \
                    --with-arpack=no --with-parpack=no --with-feast=no \
                    --with-isf-prefix=no --with-pnfft-prefix=no --with-metis-prefix=no \
                    --with-parmetis-prefix=no --with-libfm=no --with-pfft-prefix=no \
                    --with-pspio-prefix=no --with-nfft=no --with-blacs=no \
                    --with-scalapack=no
# configure will find and use these other libraries unless they are explicitly disabled
configure.optflags  -O3

default_variants +newuoa
if {![variant_isset accelerate] && ![variant_isset openblas]} {
    default_variants-append +atlas
}

# FIXME: does fortran default variant not happen in time to make fftw-3 get
# installed +gcc48?
# gfortran -> gfortran5?

# patches: (1) needed to make "--with-metis-prefix=no" work
#          (2) widen a tolerance so all tests pass
patchfiles          patch-configure.diff \
    patch-testsuite-linear_response-05-polarizability.test.diff

pre-fetch {
    if {[fortran_active_variant_name fftw-3] eq ""} {
        ui_error "Install fftw-3 with a Fortran variant."
        return -code error "fftw-3 not installed with a Fortran variant."
    }
}

if {[mpi_variant_isset]} {
    configure.args-delete  --disable-mpi
    configure.args-append  --enable-mpi
}

# More options that could be added:
# variants: berkeleygw, openmp, threads (for fftw, atlas?), (p)arpack, maxdim4, metis, parmetis
# no way to turn off PAPI, but there is no port for this anyway.

# libxc does not have universal variant, so octopus cannot either
universal_variant   no

test.run            yes
test.target         check

pre-test {
    # emulate some behavior from octopus development version
    if {![catch {sysctl hw.ncpu} result]} {
        if {[mpi_variant_isset]} {
            set njobs [expr {$result/4}]
        } else {
            set njobs $result
        }
    } else {
        set njobs 1
    }
    test.env-append OCT_TEST_NJOBS=$njobs
    ui_msg "Running testsuite with $njobs jobs in parallel"

    if {[mpi_variant_isset]} {
        test.env-append MPIEXEC=${prefix}/bin/${mpi.exec}
    }

    # test infrastructure uses /bin/ps for job parallelism which is forbidden by sandboxing
    append portsandbox_profile " (allow process-exec (literal \"/bin/ps\") (with no-profile))"
}

variant newuoa description {Build with internal newuoa library for optimal control} {
    configure.args-append --enable-newuoa
}

variant netcdf description {Build with support for NetCDF output} {
    configure.args-delete   --with-netcdf-prefix=no
    configure.args-append   --with-netcdf-prefix=${prefix}
    depends_lib-append      port:netcdf-fortran
    require_active_variants netcdf-fortran {} universal
    compilers.enforce_fortran netcdf-fortran
}

variant etsf_io requires netcdf description {Build with support for ETSF_IO output} {
    configure.args-delete   --with-etsf-io-prefix=no
    configure.args-append   --with-etsf-io-prefix=${prefix}
    depends_lib-append      port:etsf_io
    compilers.enforce_fortran etsf_io
}

variant sparskit description {Build with support for SPARSKIT propagators} {
    configure.args-delete   --without-sparskit
    depends_lib-append      port:sparskit
}

variant gdlib description {Build with support for definition of domain by 2D image} {
    configure.args-delete   --disable-gdlib
    depends_lib-append      port:gd2
}

variant scalapack description {Build with ScaLAPACK} {
    configure.args-delete   --with-blacs=no
    configure.args-delete   --with-scalapack=no
    configure.args-append   --with-blacs=-lscalapack
    depends_lib-append      port:scalapack

    if {![mpi_variant_isset]} {
        ui_error "+scalapack requires an MPI variant. Choose +mpich, +mpich_devel, +openmpi, or +openmpi_devel."
        return -code error "+scalapack requires an MPI variant."
    }
    
    mpi.setup               require
    # FIXME: this unnecessarily enforces scalapack had same C compiler as we are using.
    # also, if +scalapack but no MPI is used, an internal error from active_variants
    # is produced rather than saying you need MPI or just adding it to variants as intended.
    # Error: active_variants: Error: invalid port depspec ''
    # Error:   expecting either: port or (bin|lib|path):foo:port
    mpi.enforce_variant     scalapack
}

# choose one of the following for serial linear algebra
variant accelerate conflicts atlas openblas description {Build with linear algebra from built-in Accelerate framework} {
    depends_lib-append      port:veclibfort
    configure.args-append   --with-blas=-lveclibfort
}

variant atlas conflicts accelerate openblas description {Build with linear algebra from ATLAS} {
    depends_lib-append      port:atlas
    configure.args-append   --with-blas=-lsatlas
}

variant openblas conflicts accelerate atlas description {Build with linear algebra from OpenBLAS} {
    # allow OpenBLAS-devel too
    depends_lib-append      path:lib/libopenblas.dylib:OpenBLAS
    require_active_variants path:lib/libopenblas.dylib:OpenBLAS lapack
    configure.args-append   --with-blas=-lopenblas
}

livecheck.type      regex
livecheck.url       ${homepage}/wiki/index.php/Main_Page
livecheck.regex     ${name} (\[0-9.\]+)
